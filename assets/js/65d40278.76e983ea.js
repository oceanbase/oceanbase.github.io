"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[3151],{47737:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=s(74848),o=s(28453);const i={title:"Use obdiag for diagnostics and analytics",weight:10},t="7.9 Use obdiag for diagnostics and analytics",c={id:"user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/diagnose_and_analyze_through_obdiag",title:"Use obdiag for diagnostics and analytics",description:"You can use OceanBase Diagnostic Tool (obdiag) for diagnostics and analytics.",source:"@site/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/09_diagnose_and_analyze_through_obdiag.md",sourceDirName:"user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning",slug:"/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/diagnose_and_analyze_through_obdiag",permalink:"/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/diagnose_and_analyze_through_obdiag",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/09_diagnose_and_analyze_through_obdiag.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Use obdiag for diagnostics and analytics",weight:10},sidebar:"quick_starts_and_hands_on_practices_in_englishSidebar",previous:{title:"Use SQL Diagnoser to diagnose and analyze SQL performance issues",permalink:"/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/performance_diagnosis_by_sql_diagnoser"}},r={},l=[{value:"About obdiag",id:"about-obdiag",level:2},{value:"Benefits",id:"benefits",level:3},{value:"Features",id:"features",level:3},{value:"Install and deploy obdiag",id:"install-and-deploy-obdiag",level:2},{value:"Install obdiag",id:"install-obdiag",level:3},{value:"Method 1: Use obdiag independently",id:"method-1-use-obdiag-independently",level:4},{value:"Method 2: Use obdiag in combination with OBD",id:"method-2-use-obdiag-in-combination-with-obd",level:4},{value:"Configure obdiag",id:"configure-obdiag",level:3},{value:"User-defined configuration file",id:"user-defined-configuration-file",level:4},{value:"System configuration file",id:"system-configuration-file",level:4},{value:"Use obdiag",id:"use-obdiag",level:2},{value:"Cluster inspection",id:"cluster-inspection",level:3},{value:"Supported scenarios",id:"supported-scenarios",level:4},{value:"Commands",id:"commands",level:4},{value:"Diagnostic analysis",id:"diagnostic-analysis",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Commands",id:"commands-1",level:4},{value:"End-to-end diagnostics",id:"end-to-end-diagnostics",level:4},{value:"Step 1: Find the ID of a suspected slow SQL statement",id:"step-1-find-the-id-of-a-suspected-slow-sql-statement",level:5},{value:"Step 2: Run the end-to-end diagnostics command",id:"step-2-run-the-end-to-end-diagnostics-command",level:5},{value:"Information collection",id:"information-collection",level:3},{value:"Collect basic information",id:"collect-basic-information",level:4},{value:"Collect information for specific scenarios",id:"collect-information-for-specific-scenarios",level:4},{value:"Supported scenarios",id:"supported-scenarios-1",level:5},{value:"Commands",id:"commands-2",level:5},{value:"Root cause analysis",id:"root-cause-analysis",level:3},{value:"Supported scenarios",id:"supported-scenarios-2",level:4},{value:"Commands",id:"commands-3",level:4},{value:"Add diagnostics scenarios",id:"add-diagnostics-scenarios",level:2},{value:"Add inspection scenarios",id:"add-inspection-scenarios",level:3},{value:"Add information collection scenarios",id:"add-information-collection-scenarios",level:3},{value:"Add root cause analysis scenarios",id:"add-root-cause-analysis-scenarios",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"79-use-obdiag-for-diagnostics-and-analytics",children:"7.9 Use obdiag for diagnostics and analytics"})}),"\n",(0,a.jsx)(n.p,{children:"You can use OceanBase Diagnostic Tool (obdiag) for diagnostics and analytics."}),"\n",(0,a.jsx)(n.h2,{id:"about-obdiag",children:"About obdiag"}),"\n",(0,a.jsx)(n.p,{children:"In the native distributed database system OceanBase Database, root cause analysis for faults is complex because many factors may be involved, such as the server environment, parameters, and running load. Experts must collect and analyze extensive information during troubleshooting. Therefore, obdiag is introduced to help efficiently collect information scattered on various nodes and find their association."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"obdiag",src:s(40453).A+"",width:"1280",height:"1276"})}),"\n",(0,a.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,a.jsx)(n.p,{children:"obdiag is an agile diagnostic tool designed for OceanBase Database. It provides the following benefits:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Lightweight"}),": You can deploy obdiag by using the RPM package or OceanBase Deployer (OBD) with a few clicks. The RPM package is less than 30 MB in size. You can deploy it on an OBServer node or any server that can connect to nodes in the OceanBase cluster, for example, a jump server or control server."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Easy to use"}),": You can perform installation, cluster inspection, information collection, diagnostics, and root cause analysis all by using commands."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Open source"}),": obdiag is developed based on Python. The source code is 100% open-source. For more information, visit the ",(0,a.jsx)(n.a,{href:"https://github.com/oceanbase/obdiag",children:"GitHub code repository"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"High scalability"}),": The inspection, scenario-based information collection, and root cause analysis features of obdiag are all available as add-ons. You can add custom diagnostic scenarios at low costs."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Benefits",src:s(12622).A+"",width:"2012",height:"374"})}),"\n",(0,a.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,a.jsx)(n.p,{children:"obdiag can scan, collect, analyze, and diagnose information such as the logs, SQL audit records, and the process stack information of OceanBase Database. You can use obdiag with ease, no matter whether your OceanBase cluster is deployed manually or by using OceanBase Cloud Platform (OCP) or OBD. obdiag has the following features:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Features",src:s(12119).A+"",width:"1972",height:"368"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Cluster inspection"}),": You can use ",(0,a.jsx)(n.code,{children:"obdiag check"})," commands to inspect the status of an OceanBase cluster. The inspection process analyzes the cluster from perspectives of the system kernel parameters and internal tables, identifies the causes of existing or possible exceptions, and provides O&M suggestions."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Diagnostic analysis"}),": You can use ",(0,a.jsx)(n.code,{children:"obdiag analyze"})," commands to analyze diagnostic information of OceanBase Database. These commands allow you to analyze OceanBase Database logs to identify errors that have occurred, as well as enable end-to-end diagnostics to locate slow execution."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Information collection"}),": You can use ",(0,a.jsx)(n.code,{children:"obdiag gather"})," commands to collect diagnostic information of OceanBase Database, including basic information and information for specific scenarios."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Root cause analysis"}),": You can use ",(0,a.jsx)(n.code,{children:"obdiag rca"})," commands to analyze diagnostic information of OceanBase Database. These commands allow you to analyze exceptions of OceanBase Database to identify causes of these exceptions."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"install-and-deploy-obdiag",children:"Install and deploy obdiag"}),"\n",(0,a.jsx)(n.h3,{id:"install-obdiag",children:"Install obdiag"}),"\n",(0,a.jsx)(n.p,{children:"You can use obdiag independently or in combination with OBD."}),"\n",(0,a.jsx)(n.h4,{id:"method-1-use-obdiag-independently",children:"Method 1: Use obdiag independently"}),"\n",(0,a.jsx)(n.p,{children:"If the cluster to be diagnosed is not deployed by using OBD, you can run the following commands to install and deploy obdiag:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Online deployment (when Internet access is available)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/oceanbase/OceanBase.repo\nsudo yum install -y oceanbase-diagnostic-tool\nsource /usr/local/oceanbase-diagnostic-tool/init.sh\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Offline deployment (when Internet access is unavailable)"}),"\n",(0,a.jsxs)(n.p,{children:["Download the obdiag package of the latest version from ",(0,a.jsx)(n.a,{href:"https://en.oceanbase.com/softwarecenter",children:"OceanBase Download Center"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yum install -y oceanbase-diagnostic-tool*.rpm\nsource /usr/local/oceanbase-diagnostic-tool/init.sh\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Deployment on a Debian-based system, such as Ubuntu"}),"\n",(0,a.jsxs)(n.p,{children:["Download the obdiag package of the latest version from ",(0,a.jsx)(n.a,{href:"https://en.oceanbase.com/softwarecenter",children:"OceanBase Download Center"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"apt-get update\napt-get install alien -y\nalien --scripts --to-deb  oceanbase-diagnostic-tool*.rpm # Convert the RPM package to a DEB package.\ndpkg -i oceanbase-diagnostic-tool*.deb\nsource /usr/local/oceanbase-diagnostic-tool/init.sh\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"method-2-use-obdiag-in-combination-with-obd",children:"Method 2: Use obdiag in combination with OBD"}),"\n",(0,a.jsxs)(n.p,{children:["If the cluster to be diagnosed is deployed by using OBD, we recommend that you upgrade OBD to V2.5.0 or later. Then, you can directly run obdiag commands in OBD. For more information about the commands, see ",(0,a.jsx)(n.a,{href:"https://en.oceanbase.com/docs/community-obd-en-10000000001181576",children:"obdiag commands"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Online deployment (when Internet access is available)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Enable OBD to pull remote images.\nobd mirror enable remote\nDeploy obdiag by using OBD.\nobd obdiag deploy\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Offline deployment (when Internet access is unavailable)"}),"\n",(0,a.jsxs)(n.p,{children:["Download the obdiag package of the latest version from ",(0,a.jsx)(n.a,{href:"https://en.oceanbase.com/softwarecenter",children:"OceanBase Download Center"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Copy the offline obdiag package to the image repository of OBD.\nobd mirror clone oceanbase-diagnostic-tool-xxxxxxxx.rpm\nDeploy obdiag by using OBD.\nobd obdiag deploy\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"configure-obdiag",children:"Configure obdiag"}),"\n",(0,a.jsx)(n.p,{children:"To configure obdiag, you can create a user-defined configuration file in a custom path, or use the system configuration file, which you do not need to modify in most cases. The following sections describe the two configuration files."}),"\n",(0,a.jsx)(n.h4,{id:"user-defined-configuration-file",children:"User-defined configuration file"}),"\n",(0,a.jsxs)(n.p,{children:["You can create or edit a user-defined configuration file by running the ",(0,a.jsx)(n.code,{children:"obdiag config <option>"})," command. By default, the configuration file is named ",(0,a.jsx)(n.code,{children:"config.yml"})," and is stored in the ",(0,a.jsx)(n.code,{children:"~/.obdiag/"})," directory. Template configuration files are stored in the ",(0,a.jsx)(n.code,{children:"~/.obdiag/example"})," directory."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag config -h <db_host> -u <sys_user> [-p password] [-P port]\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following table describes the parameters."}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Required?"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"db_host"}),(0,a.jsx)(n.td,{children:"Yes"}),(0,a.jsxs)(n.td,{children:["The IP address used to connect to the ",(0,a.jsx)(n.code,{children:"sys"})," tenant of the OceanBase cluster."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"sys_user"}),(0,a.jsx)(n.td,{children:"Yes"}),(0,a.jsxs)(n.td,{children:["The username used to connect to the ",(0,a.jsx)(n.code,{children:"sys"})," tenant of the OceanBase cluster. To avoid permission issues, we recommend that you use ",(0,a.jsx)(n.code,{children:"root@sys"}),". If you connect to the cluster by using OceanBase Database Proxy (ODP), the value of this parameter must include the cluster name, for example, ",(0,a.jsx)(n.code,{children:"root@sys#obtest"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"-p password"}),(0,a.jsx)(n.td,{children:"No"}),(0,a.jsxs)(n.td,{children:["The password used to connect to the ",(0,a.jsx)(n.code,{children:"sys"})," tenant of the OceanBase cluster. This parameter is left empty by default."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"-P port"}),(0,a.jsx)(n.td,{children:"No"}),(0,a.jsxs)(n.td,{children:["The port used to connect to the ",(0,a.jsx)(n.code,{children:"sys"})," tenant of the OceanBase cluster. Port ",(0,a.jsx)(n.code,{children:"2881"})," is used by default."]})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"Here are some examples:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"A password is specified."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"obdiag config -hxx.xx.xx.xx -uroot@sys -p***** -P2881\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"No password is specified."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"obdiag config -hxx.xx.xx.xx -uroot@sys -P2881\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"ODP is used for connection."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"obdiag config -hxx.xx.xx.xx -uroot@sys#obtest  -p***** -P2883\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["After the execution is completed, the new configuration is generated in the ",(0,a.jsx)(n.code,{children:"config.yml"})," configuration file, and the original configuration file, if it contains configuration information, is backed up to the ",(0,a.jsx)(n.code,{children:"~/.obdiag/"})," directory as a ",(0,a.jsx)(n.code,{children:"backup_conf"})," file."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Tips:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Manage the configuration files of multiple clusters:"}),"\n",(0,a.jsx)(n.p,{children:"You can directly specify the configuration files of target clusters in obdiag commands. Here is an example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"obdiag gather log \u2013c cluster_1.yaml\nobdiag gather log \u2013c cluster_2.yaml\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If a cluster is deployed by using OBD, you can directly use obdiag commands in the cluster without generating a configuration file. When you run obdiag commands in OBD, you must add ",(0,a.jsx)(n.code,{children:"obd"})," to the commands and specify the cluster name. For example, ",(0,a.jsx)(n.code,{children:"obdiag gather log"})," is replaced with ",(0,a.jsx)(n.code,{children:"obd obdiag gather log <cluster_name>"}),". OBD will generate a configuration file for obdiag."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"system-configuration-file",children:"System configuration file"}),"\n",(0,a.jsxs)(n.p,{children:["The system configuration file is named ",(0,a.jsx)(n.code,{children:"inner_config.yml"})," and located in the ",(0,a.jsx)(n.code,{children:"/usr/local/oceanbase-diagnostic-tool/conf/"})," directory."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'obdiag:\n  basic:\n    config_path: ~/.obdiag/config.yml # The path of the user-defined configuration file.\n    config_backup_dir: ~/.obdiag/backup_conf # The path where the backup of the original configuration file is stored when you run the `obdiag config` command.\n    file_number_limit: 20 # The maximum number of files returned for a collection command on a single remote host.\n    file_size_limit: 2G # The maximum size of the compressed file returned for a collection command on a single remote host.\n  logger:\n    log_dir: ~/.obdiag/log # The path where the execution log file of obdiag is stored.\n    log_filename: obdiag.log # The name of the execution log file of obdiag.\n    file_handler_log_level: DEBUG # The lowest level of execution logs of obdiag to be recorded.\n    log_level: INFO # The execution log level of obdiag.\n    mode: obdiag\n    stdout_handler_log_level: INFO # The lowest level of obdiag logs to be displayed.\ncheck: # Parameters required for inspection. Usually, you do not need to modify parameters in this section.\n  ignore_version: false # Specifies whether to ignore the version of OceanBase Database.\n  report:\n    report_path: "./check_report/" # The output path of the inspection report.\n    export_type: table # The type of the inspection report.\n  package_file: "~/.obdiag/check_package.yaml" # The path of the inspection package file.\n  tasks_base_path: "~/.obdiag/tasks/" # The basic directory of inspection tasks.\ngather:\n  scenes_base_path: "~/.obdiag/gather/tasks" # The directory of `gather` tasks.\nrca:\n  result_path: "./rca/" # The storage path of root cause analysis results.\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Note"})}),"\n",(0,a.jsxs)(n.p,{children:["You can modify the ",(0,a.jsx)(n.code,{children:"obdiag.basic.file_number_limit"})," and ",(0,a.jsx)(n.code,{children:"obdiag.basic.file_size_limit"})," parameters if the number of log files on the remote host or the size of the compressed file exceeds the specified upper limit during log collection."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"use-obdiag",children:"Use obdiag"}),"\n",(0,a.jsx)(n.h3,{id:"cluster-inspection",children:"Cluster inspection"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"obdiag check"})," commands to inspect the status of an OceanBase cluster. The inspection process analyzes the cluster from perspectives of the system kernel parameters and internal tables, identifies the causes of existing or possible exceptions, and provides O&M suggestions."]}),"\n",(0,a.jsx)(n.h4,{id:"supported-scenarios",children:"Supported scenarios"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"obdiag check list\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"\n[check cases about observer]:\n------------------------------------------------------------------------------------------------------------------\ncommand                              info_en                                                    info_cn            \n------------------------------------------------------------------------------------------------------------------\nobdiag check                         default check all task without filter                      \u9ed8\u8ba4\u6267\u884c\u9664filter\u7ec4\u91cc\u7684\u6240\u6709\u5de1\u68c0\u9879\nobdiag check --cases=ad              Test and inspection tasks                                  \u6d4b\u8bd5\u5de1\u68c0\u4efb\u52a1             \nobdiag check --cases=build_before    Deployment environment check                               \u90e8\u7f72\u73af\u5883\u68c0\u67e5             \nobdiag check --cases=sysbench_run    Collection of inspection tasks when executing sysbench     \u6267\u884csysbench\u65f6\u7684\u5de1\u68c0\u4efb\u52a1\u96c6\u5408 \nobdiag check --cases=sysbench_free   Collection of inspection tasks before executing sysbench   \u6267\u884csysbench\u524d\u7684\u5de1\u68c0\u4efb\u52a1\u96c6\u5408 \n------------------------------------------------------------------------------------------------------------------\n\n[check cases about obproxy]:\n-----------------------------------------------------------------------------------------------\ncommand                              info_en                                 info_cn            \n-----------------------------------------------------------------------------------------------\nobdiag check                         default check all task without filter   \u9ed8\u8ba4\u6267\u884c\u9664filter\u7ec4\u91cc\u7684\u6240\u6709\u5de1\u68c0\u9879\nobdiag check --obproxy-cases=proxy   obproxy version check                   obproxy \u7248\u672c\u68c0\u67e5       \n-----------------------------------------------------------------------------------------------\n"})}),"\n",(0,a.jsx)(n.h4,{id:"commands",children:"Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Run all inspection items by default\nobdiag check\n\n# Check the deployment environment\nobdiag check --cases=build_before\n\n# List the inspection tasks when a Sysbench benchmark is run \nobdiag check --cases=sysbench_run\n\n# List the inspection tasks before a Sysbench benchmark is run \nobdiag check --cases=sysbench_free\n\n# Check the version of ODP\nobdiag check --obproxy-cases=proxy\n"})}),"\n",(0,a.jsx)(n.h3,{id:"diagnostic-analysis",children:"Diagnostic analysis"}),"\n",(0,a.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag analyze <analyze type> [options]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Valid values of the ",(0,a.jsx)(n.code,{children:"analyze type"})," parameter are as follows:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"log"}),": analyzes logs of OceanBase Database."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"flt_trace"}),": performs end-to-end diagnostics."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"commands-1",children:"Commands"}),"\n",(0,a.jsxs)(n.p,{children:["You can run ",(0,a.jsx)(n.code,{children:"obdiag analyze"})," commands to analyze logs of an OceanBase cluster online, or specify the ",(0,a.jsx)(n.code,{children:"--files"})," option to enable offline analysis."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Analyze the logs of the last hour online. When you run this command, obdiag pulls and analyzes the logs of the last hour from the remote host to diagnose the errors that have occurred.\nobdiag analyze log --since 1h\n\n\n# Analyze the logs of the last 30 minutes online. When you run this command, obdiag pulls and analyzes the logs of the last 30 minutes from the remote host to diagnose the errors that have occurred.\nobdiag analyze log --since 30m\n\n\n# Analyze a specified log file offline\nobdiag analyze log --files observer.log.20230831142211247 \n\n# Analyze the log files in a specified directory offline\nobdiag analyze log --files ./test/\n"})}),"\n",(0,a.jsx)(n.h4,{id:"end-to-end-diagnostics",children:"End-to-end diagnostics"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"What is end-to-end diagnostics?"})," OceanBase Database is a distributed database in which the call links are complex. When a timeout issue occurs, O&M engineers cannot quickly locate whether the issue is caused by OceanBase Database components or the network. They can only analyze the issue based on experience and OceanBase Database logs. OceanBase Database V4.0 provides the trace log feature for end-to-end diagnostics. Two paths are involved in end-to-end tracing. In one path, the application sends a request to ODP by using a client, such as Java Database Connectivity (JDBC) or Oracle Call Interface (OCI), to access an OBServer node. The access result is returned to the application. In the other path, the application directly accesses an OBServer node by using a client, and the access result is returned to the application. In end-to-end diagnostics, all components are diagnosed."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Working mechanism"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server 1 \u2502------\x3e\u2502 Search and filter the logs related to the specified flt_trace_id. \u2502------\x3e\u2502 Return filtered logs to the node where obdiag is deployed. \u2502---\u2510\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server 2 \u2502------\x3e\u2502 Search and filter the logs related to the specified flt_trace_id. \u2502------\x3e\u2502 Return filtered logs to the node where obdiag is deployed. \u2502---\u253c---\x3e\u2502 Aggregate logs obtained from parent and child nodes and generate a trace tree based on the hierarchical relationship between nodes.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502 Server N \u2502------\x3e\u2502 Search and filter the logs related to the specified flt_trace_id. \u2502------\x3e\u2502 Return filtered logs to the node where obdiag is deployed. \u2502---\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag analyze flt_trace [options]\n"})}),"\n",(0,a.jsx)(n.h5,{id:"step-1-find-the-id-of-a-suspected-slow-sql-statement",children:"Step 1: Find the ID of a suspected slow SQL statement"}),"\n",(0,a.jsxs)(n.p,{children:["If you suspect that an SQL statement is slow, you can query the ",(0,a.jsx)(n.code,{children:"gv$ob_sql_audit"})," view to obtain its ",(0,a.jsx)(n.code,{children:"flt_trace_id"})," value. Here is an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"OceanBase(root@test)>select query_sql, flt_trace_id from oceanbase.gv$ob_sql_audit where query_sql like 'select @@version_comment limit 1';\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"+----------------------------------+--------------------------------------+\n| query_sql                        | flt_trace_id                         |\n+----------------------------------+--------------------------------------+\n| select @@version_comment limit 1 | 00060aa3-d607-f5f2-328b-388e17f687cb |\n+----------------------------------+--------------------------------------+\n1 row in set\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The result indicates that the ",(0,a.jsx)(n.code,{children:"flt_trace_id"})," value of the suspected SQL statement is ",(0,a.jsx)(n.code,{children:"00060aa3-d607-f5f2-328b-388e17f687cb"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can also obtain the ",(0,a.jsx)(n.code,{children:"flt_trace_id"})," value by searching the ",(0,a.jsx)(n.code,{children:"trace.log"})," file of ODP or OceanBase Database. Here is an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:'head trace.log\n\n[2023-12-07 22:20:07.242229] [489640][T1_L0_G0][T1][YF2A0BA2DA7E-00060BEC28627BEF-0-0] {"trace_id":" 00060bec-275e-9832-e730-7c129f2182ac","name":" close_das_task","id":" 00060bec-2a20-bf9e-56c9-724cb467f859","start_ts":1701958807240606,"end_ts":1701958807240607,"parent_id":" 00060bec-2a20-bb5f-e03a-5da01aa3308b","is_follow":false}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The result indicates that the ",(0,a.jsx)(n.code,{children:"flt_trace_id"})," value of the suspected SQL statement is ",(0,a.jsx)(n.code,{children:"00060bec-275e-9832-e730-7c129f2182ac"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"step-2-run-the-end-to-end-diagnostics-command",children:"Step 2: Run the end-to-end diagnostics command"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag analyze flt_trace --flt_trace_id 000605b1-28bb-c15f-8ba0-1206bcc08aa3\n\nroot node id: 000605b1-28bb-c15f-8ba0-1206bcc08aa3\n\nTOP time-consuming leaf span:\n+---+----------------------------------+-------------+---------------------+\n| ID| Span Name                        | Elapsed Time|      NODE           |\n+---+----------------------------------+-------------+---------------------+\n| 18| px_task                          | 2.758 ms    | OBSERVER(xx.xx.xx.1)|\n| 5 | pc_get_plan                      | 52 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 16| do_local_das_task                | 45 \u03bcs       | OBSERVER(xx.xx.xx.1)|     \n| 10| do_local_das_task                | 17 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 17| close_das_task                   | 14 \u03bcs       | OBSERVER(xx.xx.xx.1)|     \n+---+----------------------------------+-------------+---------------------+\nTags & Logs:\n-------------------------------------\n18 - px_task  Elapsed: 2.758 ms \n     NODE:OBSERVER(xx.xx.xx.1)\n     tags: [{'group_id': 0}, {'qc_id': 1}, {'sqc_id': 0}, {'dfo_id': 1}, {'task_id': 1}]\n5 - pc_get_plan  Elapsed: 52 \u03bcs \n    NODE:OBSERVER(xx.xx.xx.1)\n16 - do_local_das_task  Elapsed: 45 \u03bcs \n     NODE:OBSERVER(xx.xx.xx.3)\n10 - do_local_das_task  Elapsed: 17 \u03bcs \n     NODE:OBSERVER(xx.xx.xx.1)\n17 - close_das_task  Elapsed: 14 \u03bcs \n     NODE:OBSERVER(xx.xx.xx.3)\n\nDetails:\n+---+----------------------------------+-------------+---------------------+\n| ID| Span Name                        | Elapsed Time|  NODE               |\n+---+----------------------------------+-------------+---------------------+\n| 1 | TRACE                            | -           | -                   |\n| 2 | \u2514\u2500com_query_process              | 5.351 ms    | OBPROXY(xx.xx.xx.1) |\n| 3 |   \u2514\u2500mpquery_single_stmt          | 5.333 ms    | OBSERVER(xx.xx.xx.1)|\n| 4 |     \u251c\u2500sql_compile                | 107 \u03bcs      | OBSERVER(xx.xx.xx.1)|\n| 5 |     \u2502 \u2514\u2500pc_get_plan              | 52 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 6 |     \u2514\u2500sql_execute                | 5.147 ms    | OBSERVER(xx.xx.xx.1)|\n| 7 |       \u251c\u2500open                     | 87 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 8 |       \u251c\u2500response_result          | 4.945 ms    | OBSERVER(xx.xx.xx.1)|\n| 9 |       \u2502 \u251c\u2500px_schedule            | 2.465 ms    | OBSERVER(xx.xx.xx.1)|\n| 10|       \u2502 \u2502 \u251c\u2500do_local_das_task    | 17 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 11|       \u2502 \u2502 \u251c\u2500px_task              | 2.339 ms    | OBSERVER(xx.xx.xx.2)|\n| 12|       \u2502 \u2502 \u2502 \u251c\u2500do_local_das_task  | 54 \u03bcs       | OBSERVER(xx.xx.xx.2)|\n| 13|       \u2502 \u2502 \u2502 \u2514\u2500close_das_task     | 22 \u03bcs       | OBSERVER(xx.xx.xx.2)|\n| 14|       \u2502 \u2502 \u251c\u2500do_local_das_task    | 11 \u03bcs       | OBSERVER(xx.xx.xx.1)|\n| 15|       \u2502 \u2502 \u251c\u2500px_task              | 2.834 ms    | OBSERVER(xx.xx.xx.3)|\n| 16|       \u2502 \u2502 \u2502 \u251c\u2500do_local_das_task  | 45 \u03bcs       | OBSERVER(xx.xx.xx.3)|\n| 17|       \u2502 \u2502 \u2502 \u2514\u2500close_das_task     | 14 \u03bcs       | OBSERVER(xx.xx.xx.3)|\n| 18|       \u2502 \u2502 \u2514\u2500px_task              | 2.758 ms    | OBSERVER(xx.xx.xx.1)|\n| 19|       \u2502 \u251c\u2500px_schedule            | 1 \u03bcs        | OBSERVER(xx.xx.xx.1)|\n| 20|       \u2502 \u2514\u2500px_schedule            | 1 \u03bcs        | OBSERVER(xx.xx.xx.1)|\n| ..|       ......                     | ...         |  ......             |\n+---+----------------------------------+-------------+---------------------+\n\nFor more details, please run cmd ' cat analyze_flt_result/000605b1-28bb-c15f-8ba0-1206bcc08aa3.txt '\n"})}),"\n",(0,a.jsx)(n.h3,{id:"information-collection",children:"Information collection"}),"\n",(0,a.jsx)(n.p,{children:"obdiag allows you to collect basic information and information for specific scenarios."}),"\n",(0,a.jsx)(n.h4,{id:"collect-basic-information",children:"Collect basic information"}),"\n",(0,a.jsx)(n.p,{children:"Syntax:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag gather <gather type> [options]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Valid values of the ",(0,a.jsx)(n.code,{children:"gather type"})," parameter are as follows:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"log"}),": collects logs of the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"sysstat"}),": collects information about nodes in the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"clog"}),": collects the clogs of the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"slog"}),": collects the slogs of the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"plan_monitor"}),": collects the execution details of parallel SQL statements with the specified trace ID in the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"stack"}),": collects the stack information of the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"perf"}),": collects the performance information of the specified OceanBase cluster."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"obproxy_log"}),": collects the logs of the ODP node on which the specified OceanBase cluster depends."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"all"}),": collects the diagnostic information of the specified OceanBase cluster, including the logs, node information, stack information, and performance information of the cluster."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"collect-information-for-specific-scenarios",children:"Collect information for specific scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"obdiag gather scenes"})," commands to collect the information required for troubleshooting specific issues. These commands help address the pain point in collecting information on distributed nodes."]}),"\n",(0,a.jsx)(n.h5,{id:"supported-scenarios-1",children:"Supported scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["You can run the ",(0,a.jsx)(n.code,{children:"obdiag gather scene list"})," command to query the scenarios supported for information collection."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag gather scene list\n\n[Other Problem Gather Scenes]:\n---------------------------------------------------------------------------------------\ncommand                                                   info_en               info_cn\n---------------------------------------------------------------------------------------\nobdiag gather scene run --scene=other.application_error   [application error]   [\u5e94\u7528\u62a5\u9519\u95ee\u9898]\n---------------------------------------------------------------------------------------\n\n[Obproxy Problem Gather Scenes]:\n----------------------------------------------------------------------------------\ncommand                                           info_en             info_cn\n----------------------------------------------------------------------------------\nobdiag gather scene run --scene=obproxy.restart   [obproxy restart]   [obproxy\u65e0\u6545\u91cd\u542f]\n----------------------------------------------------------------------------------\n\n[Observer Problem Gather Scenes]:\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ncommand                                                                                                                                   info_en                                       info_cn\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nobdiag gather scene run --scene=observer.backup                                                                                           [backup problem]                              [\u6570\u636e\u5907\u4efd\u95ee\u9898]\nobdiag gather scene run --scene=observer.backup_clean                                                                                     [backup clean]                                [\u5907\u4efd\u6e05\u7406\u95ee\u9898]\nobdiag gather scene run --scene=observer.clog_disk_full                                                                                   [clog disk full]                              [clog\u76d8\u6ee1]\nobdiag gather scene run --scene=observer.cluster_down                                                                                     [cluster down]                                [\u96c6\u7fa4\u65e0\u6cd5\u8fde\u63a5]\nobdiag gather scene run --scene=observer.compaction                                                                                       [compaction]                                  [\u5408\u5e76\u95ee\u9898]\nobdiag gather scene run --scene=observer.cpu_high                                                                                         [High CPU]                                    [CPU\u9ad8]\nobdiag gather scene run --scene=observer.delay_of_primary_and_backup                                                                      [delay of primary and backup]                 [\u4e3b\u5907\u5e93\u5ef6\u8fdf]\nobdiag gather scene run --scene=observer.io                                                                                               [io problem]                                  [io\u95ee\u9898]\nobdiag gather scene run --scene=observer.log_archive                                                                                      [log archive]                                 [\u65e5\u5fd7\u5f52\u6863\u95ee\u9898]\nobdiag gather scene run --scene=observer.long_transaction                                                                                 [long transaction]                            [\u957f\u4e8b\u52a1]\nobdiag gather scene run --scene=observer.memory                                                                                           [memory problem]                              [\u5185\u5b58\u95ee\u9898]\nobdiag gather scene run --scene=observer.perf_sql --env \"{db_connect='-h127.0.0.1 -P2881 -utest@test -p****** -Dtest', trace_id='Yxx'}\"   [SQL performance problem]                     [SQL\u6027\u80fd\u95ee\u9898]\nobdiag gather scene run --scene=observer.px_collect_log --env \"{trace_id='Yxx', estimated_time='2024-04-19 14:46:17'}\"                    [Collect error source node logs for SQL PX]   [SQL PX \u6536\u96c6\u62a5\u9519\u6e90\u8282\u70b9\u65e5\u5fd7]\nobdiag gather scene run --scene=observer.recovery                                                                                         [recovery]                                    [\u6570\u636e\u6062\u590d\u95ee\u9898]\nobdiag gather scene run --scene=observer.restart                                                                                          [restart]                                     [observer\u65e0\u6545\u91cd\u542f]\nobdiag gather scene run --scene=observer.rootservice_switch                                                                               [rootservice switch]                          [\u6709\u4e3b\u6539\u9009\u6216\u8005\u65e0\u4e3b\u9009\u4e3e\u7684\u5207\u4e3b]\nobdiag gather scene run --scene=observer.sql_err --env \"{db_connect='-h127.0.0.1 -P2881 -utest@test -p****** -Dtest', trace_id='Yxx'}\"    [SQL execution error]                         [SQL \u6267\u884c\u51fa\u9519]\nobdiag gather scene run --scene=observer.suspend_transaction                                                                              [suspend transaction]                         [\u60ac\u6302\u4e8b\u52a1]\nobdiag gather scene run --scene=observer.unit_data_imbalance                                                                              [unit data imbalance]                         [unit\u8fc1\u79fb/\u7f29\u5c0f \u526f\u672c\u4e0d\u5747\u8861\u95ee\u9898]\nobdiag gather scene run --scene=observer.unknown                                                                                          [unknown problem]                             [\u672a\u80fd\u660e\u786e\u95ee\u9898\u7684\u573a\u666f]\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n"})}),"\n",(0,a.jsx)(n.h5,{id:"commands-2",children:"Commands"}),"\n",(0,a.jsx)(n.p,{children:"Syntax:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag gather scene run --scene={SceneName}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Application error\nobdiag gather scene run --scene=other.application_error\n\n# Unexpected restart of the obproxy process\nobdiag gather scene run --scene=obproxy.restart\n\n# Data backup exception\nobdiag gather scene run --scene=observer.backup\n\n# Backup cleanup exception\nobdiag gather scene run --scene=observer.backup_clean\n\n# Clog disk space exhausted\nobdiag gather scene run --scene=observer.clog_disk_full \n\n# Major compaction exception\nobdiag gather scene run --scene=observer.compaction \n\n# High CPU utilization\nobdiag gather scene run --scene=observer.cpu_high\n\n# Data latency between the primary and standby databases\nobdiag gather scene run --scene=observer.delay_of_primary_and_backup \n\n# Log archiving exception\nobdiag gather scene run --scene=observer.log_archive\n\n# Long-running transaction\nobdiag gather scene run --scene=observer.long_transaction \n\n# Memory exception\nobdiag gather scene run --scene=observer.memory\n\n# SQL performance exception. In the following example, the value of `trace_id` in the `env` parameter corresponds to the value of `trace_id` in the `gv$ob_sql_audit` view.\nobdiag gather scene run --scene=observer.perf_sql --env \"{db_connect='-hxx -Pxx -uxx -pxx -Dxx', trace_id='xx'}\"   \n\n# Restore exception\nobdiag gather scene run --scene=observer.memory# \n\n# Unexpected restart of the observer process\nobdiag gather scene run --scene=observer.restart  \n\n# Leader switching in re-election with a leader or election without a leader\nobdiag gather scene run --scene=observer.rootservice_switch  \n\n# SQL execution error. In the following example, the value of `trace_id` in the `env` parameter corresponds to the value of `trace_id` in the `gv$ob_sql_audit` view.\nobdiag gather scene run --scene=observer.sql_err --env \"{db_connect='-hxx -Pxx -uxx -pxx -Dxx', trace_id='xx'}\"    \n\n# Suspended transaction\nobdiag gather scene run --scene=observer.suspend_transaction \n\n# Data imbalance between units after unit migration or unit reduction\nobdiag gather scene run --scene=observer.unit_data_imbalance \n\n# Unknown error\nobdiag gather scene run --scene=observer.unknown\n\n# When you collect PX logs of the source node that reports an error, the `trace_id` parameter is required and the `estimated_time` parameter is optional. The default value of `estimated_time` is the current time. PX logs generated one week earlier than the specified time will be collected based on the specified trace ID.\nobdiag gather scene run --scene=observer.px_collect_log --env \"{trace_id='Yxx', estimated_time='2024-04-19 14:46:17'}\"\n"})}),"\n",(0,a.jsx)(n.h3,{id:"root-cause-analysis",children:"Root cause analysis"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"obdiag rca"})," commands to analyze the diagnostic information of OceanBase Database. These commands allow you to analyze exceptions of OceanBase Database to identify the causes of these exceptions."]}),"\n",(0,a.jsx)(n.h4,{id:"supported-scenarios-2",children:"Supported scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["You can run the ",(0,a.jsx)(n.code,{children:"obdiag rca list"})," command to query the scenarios supported for root cause analysis."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag rca list \n"})}),"\n",(0,a.jsx)(n.h4,{id:"commands-3",children:"Commands"}),"\n",(0,a.jsx)(n.p,{children:"You can run the following command to analyze the root cause of a specified issue."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag rca run --scene=<scene_name>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"obdiag rca run --scene=disconnection \n"})}),"\n",(0,a.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:'+-----------------------------------------------------------------------------------------------------------+\n|                                                   record                                                  |\n+------+----------------------------------------------------------------------------------------------------+\n| step | info                                                                                               |\n+------+----------------------------------------------------------------------------------------------------+\n|  1   | node:xxx.xxx.xxx obproxy_diagnosis_log: [2024-01-18 17:48:37.667014] [23173][Y0-00007FAA5183E710] |\n|      | [CONNECTION](trace_type="CLIENT_VC_TRACE", connection_diagnosis={cs_id:1065, ss_id:4559,           |\n|      | proxy_session_id:837192278409543969, server_session_id:3221810838,                                 |\n|      | client_addr:" xxx.xxx.xxx.xxx:xxxx", server_addr:" xxx.xxx.xxx.xxx:2883", cluster_name:" obcluster",     |\n|      | tenant_name:" sys", user_name:" root", error_code: -10010, error_msg:" An unexpected connection event  |\n|      | received from client while obproxy reading request", request_cmd:" COM_SLEEP", sql_cmd:" COM_END",   |\n|      | req_total_time(us):5315316}{vc_event:" VC_EVENT_EOS", user_sql:" "})                                 |\n|  2   | cs_id:1065, server_session_id:3221810838                                                           |\n|  3   | trace_type:CLIENT_VC_TRACE                                                                         |\n|  4   | error_code: -10010                                                                                  |\n+------+----------------------------------------------------------------------------------------------------+\nThe suggest: Need client cooperation for diagnosis\n'})}),"\n",(0,a.jsx)(n.h2,{id:"add-diagnostics-scenarios",children:"Add diagnostics scenarios"}),"\n",(0,a.jsx)(n.p,{children:"This section describes how to add diagnostics scenarios to meet the diagnostics requirements of clusters."}),"\n",(0,a.jsx)(n.h3,{id:"add-inspection-scenarios",children:"Add inspection scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["Inspection scenarios are stored in the ",(0,a.jsx)(n.code,{children:"~/.obdiag/check"})," directory. The ",(0,a.jsx)(n.code,{children:"obproxy_check_package.yaml"})," and ",(0,a.jsx)(n.code,{children:"observer_check_package.yaml"})," files record the inspection items for ODP and OBServer nodes, respectively."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"#tree\n.\n\u251c\u2500\u2500 obproxy_check_package.yaml\n\u251c\u2500\u2500 observer_check_package.yaml\n\u2514\u2500\u2500 tasks\n    \u251c\u2500\u2500 obproxy\n    \u2502   \u2514\u2500\u2500 version\n    \u2502       \u2514\u2500\u2500 bad_version.yaml\n    \u2514\u2500\u2500 observer\n        \u251c\u2500\u2500 cluster\n        \u2502   \u251c\u2500\u2500 core_file_find.yaml\n        \u2502   \u251c\u2500\u2500 data_path_settings.yaml\n        \u2502   \u251c\u2500\u2500 deadlocks.yaml\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 cpu\n        \u2502   \u2514\u2500\u2500 oversold.yaml\n        \u251c\u2500\u2500 disk\n        \u2502   \u251c\u2500\u2500 clog_abnormal_file.yaml\n        \u2502   \u251c\u2500\u2500 disk_full.yaml\n        \u2502   \u251c\u2500\u2500 disk_hole.yaml\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 err_code\n        \u2502   \u251c\u2500\u2500 find_err_4000.yaml\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 sysbench\n        \u2502   \u251c\u2500\u2500 sysbench_free_test_cpu_count.yaml\n        \u2502   \u251c\u2500\u2500 sysbench_free_test_memory_limit.yaml\n        \u2502   \u251c\u2500\u2500 sysbench_free_test_network_speed.yaml\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 system\n        \u2502   \u251c\u2500\u2500 aio.yaml\n        \u2502   \u251c\u2500\u2500 dependent_software_swapon.yaml\n        \u2502   \u251c\u2500\u2500 dependent_software.yaml\n        \u2502   \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 version\n            \u251c\u2500\u2500 bad_version.yaml\n            \u2514\u2500\u2500 old_version.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"tasks"})," directory stores existing inspection items, and each large inspection item corresponds to a YAML file. You can write a task script in the YAML format according to specific rules."]}),"\n",(0,a.jsx)(n.p,{children:"Here is a sample task script:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'info: testinfo\ntask:\n  - version: "[3.1.0,3.2.4]"\n    steps:\n      {steps_object}\n  - version: "[4.2.0.0,4.3.0.0]"\n    steps:\n      {steps_object}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The following table describes the parameters."}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Required?"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"info"}),(0,a.jsx)(n.td,{children:"Yes"}),(0,a.jsx)(n.td,{children:"The scenario to use the task script file. This information facilitates maintenance."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"version"}),(0,a.jsx)(n.td,{children:"No"}),(0,a.jsxs)(n.td,{children:["The OceanBase Database versions that the script is compatible with. The value is a range with complete version numbers in the form of a string. ",(0,a.jsx)("br",{}),"A version number contains three digits for OceanBase Database V3.x, such as [3.1.1,3.2.0]. ",(0,a.jsx)("br",{}),"A version number contains four digits for OceanBase Database V4.x, such as [4.1.0.0,4.2.0.0]."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"steps"}),(0,a.jsx)(n.td,{children:"Yes"}),(0,a.jsx)(n.td,{children:"The list of steps to be executed."})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["For more information about the tutorial, see ",(0,a.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-obdiag-en-10000000001574823",children:"Use obdiag to inspect an OceanBase cluster"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"add-information-collection-scenarios",children:"Add information collection scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["Information collection scenarios are stored in the ",(0,a.jsx)(n.code,{children:"~/.obdiag/gather/tasks"})," directory. The YAML files in the ",(0,a.jsx)(n.code,{children:"obproxy"}),", ",(0,a.jsx)(n.code,{children:"observer"}),", and ",(0,a.jsx)(n.code,{children:"other"})," directories record the information collection scenarios for ODP, OBServer nodes, and other components, respectively."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"#tree\n.\n\u251c\u2500\u2500 obproxy\n\u2502   \u2514\u2500\u2500 restart.yaml\n\u251c\u2500\u2500 observer\n\u2502   \u251c\u2500\u2500 backup_clean.yaml\n\u2502   \u251c\u2500\u2500 backup.yaml\n\u2502   \u251c\u2500\u2500 clog_disk_full.yaml\n\u2502   \u251c\u2500\u2500 cluster_down.yaml\n\u2502   \u251c\u2500\u2500 compaction.yaml\n\u2502   \u251c\u2500\u2500 delay_of_primary_and_backup.yaml\n\u2502   \u251c\u2500\u2500 io.yaml\n\u2502   \u251c\u2500\u2500 log_archive.yaml\n\u2502   \u251c\u2500\u2500 long_transaction.yaml\n\u2502   \u251c\u2500\u2500 memory.yaml\n\u2502   \u251c\u2500\u2500 recovery.yaml\n\u2502   \u251c\u2500\u2500 restart.yaml\n\u2502   \u251c\u2500\u2500 rootservice_switch.yaml\n\u2502   \u251c\u2500\u2500 suspend_transaction.yaml\n\u2502   \u251c\u2500\u2500 unit_data_imbalance.yaml\n\u2502   \u2514\u2500\u2500 unknown.yaml\n\u2514\u2500\u2500 other\n    \u2514\u2500\u2500 application_error.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The method for adding an information collection scenario is similar to that of ",(0,a.jsx)(n.a,{href:"#Add_inspection_scenarios",children:"adding an inspection scenario"}),". Here is an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'#cat backup.yaml\ninfo_en: "[backup problem]"\ninfo_cn: "[Data backup problem]"\ncommand: obdiag gather scene run --scene=observer.backup\ntask:\n  - version: "[2.0.0.0, 4.0.0.0]"\n    steps:\n      - type: sql\n        sql: "show variables like \'version_comment\';"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.v$ob_cluster"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase. __all_zone WHERE name=\'idc\';"\n        global: true\n      - type: sql\n        sql: "select svr_ip,zone,with_rootserver,status,block_migrate_in_time,start_service_time,stop_time,build_version from oceanbase. __all_server order by zone;"\n        global: true\n      - type: sql\n        sql: "SELECT zone, concat(svr_ip, \':\' , svr_port) observer, cpu_capacity, cpu_total, cpu_assigned, cpu_assigned_percent, mem_capacity, mem_total, mem_assigned, mem_assigned_percent, unit_Num, round(`load`, 2) `load`, round(cpu_weight, 2) cpu_weight, round(memory_weight, 2) mem_weight, leader_count FROM oceanbase. __all_virtual_server_stat ORDER BY zone,svr_ip;"\n        global: true\n      - type: sql\n        sql: "select tenant_id,tenant_name,primary_zone,compatibility_mode from oceanbase. __all_tenant;"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%syslog_level%\';"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%syslog_io_bandwidth_limit%\';"\n        global: true\n      - type: sql\n        sql: "select count(*),tenant_id,zone_list,unit_count from oceanbase. __all_resource_pool group by tenant_id,zone_list,unit_count;"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%auto_delete_expired_backup%\';"\n        global: true\n      - type: sql\n        sql: "select * from oceanbase. __all_virtual_backup_task;"\n        global: true\n      - type: sql\n        sql: "select * from oceanbase. __all_virtual_backup_info;"\n        global: true\n      - type: sql\n        sql: "select * from oceanbase. __all_virtual_sys_task_status where comment like \'%backup%\';"\n        global: true\n      - type: sql\n        sql: "select count(*),status from oceanbase. __all_virtual_pg_backup_task group by status;"\n        global: true\n      - type: sql\n        sql: "select svr_ip, log_archive_status, count(*) from oceanbase. __all_virtual_pg_backup_log_archive_status group by svr_ip, log_archive_status;"\n        global: true\n      - type: sql\n        sql: "select * from oceanbase. __all_rootservice_event_history where gmt_create > ${from_time} and gmt_create < ${to_time} order by gmt_create desc;"\n        global: true\n      - type: sql\n        sql: "select b.* from oceanbase. __all_virtual_pg_backup_log_archive_status a,oceanbase. __all_virtual_pg_log_archive_stat b where a.table_id=b.table_id and a.partition_id=b.partition_id  order by log_archive_cur_ts limit 5;"\n        global: true\n      - type: log\n        global: false\n        grep: ""\n      - type: sysstat\n        global: false\n        sysstat: ""\n  - version: "[4.0.0.0, *]"\n    steps:\n      - type: sql\n        sql: "show variables like \'version_comment\';"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_ZONES;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_SERVERS;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.GV$OB_SERVERS;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_UNIT_CONFIGS;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_RESOURCE_POOLS;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_TENANTS;"\n        global: true\n      - type: sql\n        sql: "SELECT c.TENANT_ID, e.TENANT_NAME, concat(c.NAME, \': \', d.NAME) `pool:conf`,concat(c.UNIT_COUNT, \' unit: \', d.min_cpu, \'C/\', ROUND(d.MEMORY_SIZE/1024/1024/1024,0), \'G\') unit_info FROM oceanbase.DBA_OB_RESOURCE_POOLS c, oceanbase.DBA_OB_UNIT_CONFIGS d, oceanbase.DBA_OB_TENANTS e WHERE c.UNIT_CONFIG_ID=d.UNIT_CONFIG_ID AND c.TENANT_ID=e.TENANT_ID AND c.TENANT_ID>1000 ORDER BY c.TENANT_ID;"\n        global: true\n      - type: sql\n        sql: "SELECT a.TENANT_NAME,a.TENANT_ID,b.SVR_IP FROM oceanbase.DBA_OB_TENANTS a, oceanbase.GV$OB_UNITS b WHERE a.TENANT_ID=b.TENANT_ID;"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%syslog_level%\';"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%syslog_io_bandwidth_limit%\';"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%backup%\';"\n        global: true\n      - type: sql\n        sql: "show parameters like \'%ha_low_thread_score%\';"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.CDB_OB_BACKUP_PARAMETER"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.CDB_OB_BACKUP_JOBS limit 20;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.DBA_OB_ROOTSERVICE_EVENT_HISTORY WHERE module=\'backup_data\' AND event =\'start_backup_data\';"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase.CDB_OB_BACKUP_TASKS limit 20;"\n        global: true\n      - type: sql\n        sql: "SELECT * FROM oceanbase. __all_virtual_backup_schedule_task limit 20"\n        global: true\n      - type: sql\n        sql: "SELECT * from oceanbase.CDB_OB_BACKUP_JOB_HISTORY where STATUS = \'FAILED\' limit 20;"\n        global: true\n      - type: log\n        global: false\n        grep: ""\n      - type: sysstat\n        global: false\n        sysstat: ""\n'})}),"\n",(0,a.jsx)(n.p,{children:"The parameters are described as follows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"info_en"}),": the scenario description in English to be returned by the ",(0,a.jsx)(n.code,{children:"obdiag gather scene list"})," command."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"info_cn"}),": the scenario description in Chinese to be returned by the ",(0,a.jsx)(n.code,{children:"obdiag gather scene list"})," command."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"command"}),": the command to be run."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"task.version"}),": the OceanBase Database version supported by obdiag."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"task.steps.type"}),": the type of the execution step. Valid values are ",(0,a.jsx)(n.code,{children:"ssh"}),", ",(0,a.jsx)(n.code,{children:"sql"}),", ",(0,a.jsx)(n.code,{children:"log"}),", ",(0,a.jsx)(n.code,{children:"obproxy_log"}),", and ",(0,a.jsx)(n.code,{children:"sysstat"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"task.steps.type.global"}),": specifies whether to execute the step only on one node or on all nodes. The value ",(0,a.jsx)(n.code,{children:"true"})," specifies to execute the step only on the first node. The value ",(0,a.jsx)(n.code,{children:"false"})," specifies to execute the step on each node."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"add-root-cause-analysis-scenarios",children:"Add root cause analysis scenarios"}),"\n",(0,a.jsxs)(n.p,{children:["Root cause analysis scenarios are recorded in Python files under the ",(0,a.jsx)(n.code,{children:"~/.obdiag/rca"})," directory. To add a root cause analysis scenario, you must configure specific link logic for root cause analysis in the Python code. For more information, see ",(0,a.jsx)(n.a,{href:"https://oceanbase.yuque.com/org-wiki-obtech-vh7w9r/imzr6c/or82ioetg06ta27e",children:"obdiag Project Developer Guide"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"#tree\n.\n\u251c\u2500\u2500 ddl_disk_full_scene.py \n\u251c\u2500\u2500 disconnection_scene.py\n\u251c\u2500\u2500 lock_conflict_scene.py\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 major_hold_scene.py\n"})}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"obdiag supports cluster inspection, diagnostic analysis, and information collection. You can easily inspect an OceanBase cluster and recover the cluster based on the diagnostics report. If a cluster encounters an unknown exception, obdiag allows you to analyze the logs to narrow the troubleshooting scope. If a cluster encounters a known exception, obdiag allows you to directly analyze the root cause based on the root cause analysis report. If the problem persists, you can collect diagnostic information and post it to the QA module in the OceanBase community or send it to OceanBase Technical Support."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Overall process",src:s(89976).A+"",width:"1834",height:"498"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},40453:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/001-7f3869a3aa5303a4898770edb61f7689.png"},12622:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/002-8c216f74555bf3ba0e6e0b71c5359f15.png"},12119:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/003-5fa4a3408b1f8060f57d75f9d4c8430a.png"},89976:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/004-c6b271046516bb42b9f4e518c48a36dd.png"},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(96540);const o={},i=a.createContext(o);function t(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);