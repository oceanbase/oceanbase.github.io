"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[3158],{86437:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>_,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=e(74848),a=e(28453);const r={title:"SQL \u6027\u80fd\u8c03\u4f18 \u2014\u2014 \u8fde\u63a5\uff08JOIN\uff09\u65b9\u5f0f\u8c03\u4f18",weight:4},i="\u8fde\u63a5\uff08JOIN\uff09\u65b9\u5f0f\u8c03\u4f18",l={id:"user_manual/user_best_practices/performance_tuning/join_optimize",title:"SQL \u6027\u80fd\u8c03\u4f18 \u2014\u2014 \u8fde\u63a5\uff08JOIN\uff09\u65b9\u5f0f\u8c03\u4f18",description:"\u5728 OceanBase \u6570\u636e\u5e93\u4e2d\uff0c\u6709\u4e09\u79cd\u57fa\u7840\u7684\u8fde\u63a5\u7b97\u6cd5\uff1a Nested-Loop Join\u3001 Merge Join \u4ee5\u53ca Hash Join\uff1a",source:"@site/docs/user_manual/user_best_practices/performance_tuning/join_optimize.md",sourceDirName:"user_manual/user_best_practices/performance_tuning",slug:"/user_manual/user_best_practices/performance_tuning/join_optimize",permalink:"/docs/user_manual/user_best_practices/performance_tuning/join_optimize",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/user_manual/user_best_practices/performance_tuning/join_optimize.md",tags:[],version:"current",frontMatter:{title:"SQL \u6027\u80fd\u8c03\u4f18 \u2014\u2014 \u8fde\u63a5\uff08JOIN\uff09\u65b9\u5f0f\u8c03\u4f18",weight:4},sidebar:"legacySidebar",previous:{title:"SQL \u6027\u80fd\u8c03\u4f18 \u2014\u2014 \u7d22\u5f15\u8c03\u4f18",permalink:"/docs/user_manual/user_best_practices/performance_tuning/index_optimize"},next:{title:"SQL \u5ba1\u8ba1\u89c6\u56fe",permalink:"/docs/user_manual/user_best_practices/performance_tuning/sql_audit"}},o={},c=[{value:"\u975e\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join",id:"\u975e\u6761\u4ef6\u4e0b\u538b\u7684-nested-loop-join",level:2},{value:"\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join",id:"\u6761\u4ef6\u4e0b\u538b\u7684-nested-loop-join",level:2},{value:"Subplan Filter",id:"subplan-filter",level:2}];function d(t){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("a",{name:"P6a9t"}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\u8fde\u63a5join\u65b9\u5f0f\u8c03\u4f18",children:"\u8fde\u63a5\uff08JOIN\uff09\u65b9\u5f0f\u8c03\u4f18"})}),"\n",(0,s.jsx)(n.p,{children:"\u5728 OceanBase \u6570\u636e\u5e93\u4e2d\uff0c\u6709\u4e09\u79cd\u57fa\u7840\u7684\u8fde\u63a5\u7b97\u6cd5\uff1a Nested-Loop Join\u3001 Merge Join \u4ee5\u53ca Hash Join\uff1a"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Nested-Loop Join\uff1a\u9996\u5148\u628a join \u5de6\u4fa7\u7684\u6570\u636e\u626b\u63cf\u51fa\u6765\uff0c\u7136\u540e\u7528\u5de6\u4fa7\u7684\u6bcf\u4e00\u884c\u53bb\u904d\u5386\u4e00\u6b21\u53f3\u8868\u7684\u6570\u636e\uff0c\u4ece\u91cc\u9762\u627e\u5230\u6240\u6709\u80fd\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u884c\u505a\u8fde\u63a5\u3002\u5b83\u7684\u4ee3\u4ef7 = \u5de6\u8868\u626b\u63cf\u7684\u4ee3\u4ef7 + \u5de6\u8868\u7684\u884c\u6570 * \u5de6\u8868\u6bcf\u4e00\u884c\u904d\u5386\u53f3\u8868\u7684\u4ee3\u4ef7\uff0c\u5373\uff1acost(NLJ) = cost(left) + N(left) * cost(right)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m * n)\u3002"}),"\n",(0,s.jsx)(n.li,{children:"Merge Join\uff08\u8fd9\u4e2a\u5e94\u8be5\u4e5f\u53ef\u4ee5\u53eb\u505a sort merge join\uff09\uff1a\u5148\u5bf9\u5de6\u8868\u548c\u53f3\u8868\u7684\u8fde\u63a5\u952e\u5206\u522b\u6392\u5e8f\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u79fb\u52a8\u6307\u9488\u7684\u65b9\u5f0f\u4e0d\u65ad\u5730\u8c03\u6574\u6307\u9488\uff0c\u627e\u5230\u5339\u914d\u884c\u505a\u8fde\u63a5\u3002\u5b83\u7684\u4ee3\u4ef7 = \u5de6\u53f3\u8868\u6392\u5e8f\u7684\u4ee3\u4ef7 + \u5de6\u53f3\u8868\u626b\u63cf\u7684\u4ee3\u4ef7\uff0c\u5373\uff1acost(MJ) = sort(left) + sort(right) + cost(left) + cost(right)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(n * logn)\u3002"}),"\n",(0,s.jsx)(n.li,{children:"Hash Join\uff1a\u626b\u63cf\u5de6\u8868\u5e76\u5bf9\u6bcf\u4e00\u884c\u5efa\u54c8\u5e0c\u8868\uff0c\u626b\u63cf\u53f3\u8868\u5e76\u54c8\u5e0c\u8868\u4e2d\u505a\u63a2\u6d4b\uff0c\u5339\u914d\u5e76\u8fde\u63a5\u3002\u5b83\u7684\u4ee3\u4ef7 = \u626b\u63cf\u5de6\u8868\u7684\u4ee3\u4ef7 + \u5de6\u8868\u7684\u884c\u6570 * \u6bcf\u4e00\u884c\u5efa\u54c8\u5e0c\u8868\u7684\u4ee3\u4ef7 + \u626b\u63cf\u53f3\u8868\u7684\u4ee3\u4ef7 + \u53f3\u8868\u7684\u884c\u6570 * \u6bcf\u4e00\u884c\u63a2\u6d4b\u54c8\u5e0c\u8868\u7684\u4ee3\u4ef7\uff0c\u5373\uff1acost(HJ) = cost(left) + N(left) * create_hash_cost + cost(right) + N(right) * probe_hash_cost\u3002"}),"\n"]}),"\n",(0,s.jsx)("a",{name:"m8Fvq"}),"\n",(0,s.jsx)(n.h1,{id:"nested-loop-join",children:"Nested-Loop Join"}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003OceanBase \u91cc\u7684 Nested-Loop Join \u6709\u4e24\u79cd\u6267\u884c\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\u975e\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join \u548c\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join\u3002",(0,s.jsx)("br",{}),"\u2003\u2003\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u770b\u4e00\u4e0b\u975e\u6761\u4ef6\u4e0b\u538b\u7684 NLJ \u548c\u6761\u4ef6\u4e0b\u538b\u7684 NLJ \u7684\u5f00\u9500\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5f00\u59cb\u524d\uff0c\u6211\u4eec\u505a\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c\uff0c\u5148\u521b\u5efa\u4e24\u5f20\u8868 t1 \u548c t2\uff0c\u901a\u8fc7 recursive cte \u5206\u522b\u63d2\u5165 1000 \u884c\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u7cfb\u7edf\u5305\u51fd\u6570 dbms_stats.gather_table_stats \u6536\u96c6\u4e00\u4e0b\u7edf\u8ba1\u4fe1\u606f\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"drop table t1;\n\ndrop table t2;\n\nCREATE TABLE t1\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 1000\n)\nSELECT * FROM my_cte;\n\nalter table t1 add primary key(a);\n\nCREATE TABLE t2\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 1000\n)\nSELECT * FROM my_cte;\n\nalter table t2 add primary key(a);\n\ncall dbms_stats.gather_table_stats('TEST', 'T1', method_opt=>'for all columns size auto', estimate_percent=>100);\n\ncall dbms_stats.gather_table_stats('TEST', 'T2', method_opt=>'for all columns size auto', estimate_percent=>100);\n"})}),"\n",(0,s.jsx)("a",{name:"RNFD4"}),"\n",(0,s.jsx)(n.h2,{id:"\u975e\u6761\u4ef6\u4e0b\u538b\u7684-nested-loop-join",children:"\u975e\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join"}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003\u6211\u4eec\u901a\u8fc7\u6307\u5b9a hint /*+use_nl(t1, t2)*/ \u7684\u65b9\u5f0f\u5f3a\u5236\u8ba9\u4e0b\u9762\u8fd9\u6761 SQL \u751f\u6210 NESTED-LOOP JOIN \u7684\u8ba1\u5212\uff0ct2 \u4e0a\u6ca1\u6709\u5408\u9002\u7684\u7d22\u5f15\u53ef\u7528\uff0c\u4e3b\u952e\u4e2d\u4e5f\u6ca1\u6709\u5305\u542b b \u5217\uff0c\u5c31\u9700\u8981\u5148\u626b\u63cf t2 \u7684\u5168\u90e8\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 material \u7b97\u5b50\u5c06\u5b83\u7269\u5316\u5230\u5185\u5b58\u91cc\u3002\u610f\u5473\u7740\u63a5\u4e0b\u6765\u5728\u5904\u7406 t1 \u7684\u6bcf\u4e00\u884c\u65f6\uff0c\u90fd\u8981\u5b8c\u6574\u5730\u904d\u5386 t2 \u7684\u6240\u6709\u884c\uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u7b1b\u5361\u5c14\u79ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m * n)\uff0c\u6240\u4ee5\u6027\u80fd\u975e\u5e38\u5dee\u3002",(0,s.jsx)("br",{}),"\u2003\u2003OB \u4e2d\u53ea\u4f1a\u51fa\u73b0\u6709\u6761\u4ef6\u4e0b\u538b\u7684 NLJ\uff0c\u7406\u8bba\u4e0a\u4e0d\u5e94\u8be5\u51fa\u73b0\u8fd9\u79cd\u975e\u6761\u4ef6\u4e0b\u538b\u7684 NLJ\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select /*+use_nl(t1, t2)*/ * from t1, t2 where t1.b = t2.b;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| ===================================================                                   |\n| |ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|                                   |\n| ---------------------------------------------------                                   |\n| |0 |NESTED-LOOP JOIN   |    |1877    |11578       |                                   |\n| |1 |\u251c\u2500TABLE FULL SCAN  |t1  |1000    |84          |                                   |\n| |2 |\u2514\u2500MATERIAL         |    |1000    |179         |                                   |\n| |3 |  \u2514\u2500TABLE FULL SCAN|t2  |1000    |84          |                                   |\n| ===================================================                                   |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       conds([t1.b = t2.b]), nl_params_(nil), use_batch=false                          |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|   3 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([t2.a], [t2.b], [t2.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX)always true                                  |\n+---------------------------------------------------------------------------------------+\n21 rows in set (0.050 sec)\n"})}),"\n",(0,s.jsx)("a",{name:"Xieus"}),"\n",(0,s.jsx)(n.h2,{id:"\u6761\u4ef6\u4e0b\u538b\u7684-nested-loop-join",children:"\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join"}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003\u6211\u4eec\u6539\u53d8\u8fde\u63a5\u6761\u4ef6\u4e3a t1.a = t2.a\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a hint /*+use_nl(t1, t2)*/ \u7684\u65b9\u5f0f\u5f3a\u5236\u8ba9\u4e0b\u9762\u8fd9\u6761 SQL \u751f\u6210 NESTED-LOOP JOIN \u7684\u8ba1\u5212\u3002",(0,s.jsx)("br",{}),"\u2003\u2003\u53ef\u4ee5\u770b\u5230\u5728 nl_params \u91cc\u9762\u6709 t1.a\uff0c\u610f\u5473\u7740\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u9996\u5148\u626b\u63cf join \u7684\u5de6\u652f\uff08t1 \u8868\uff09\uff0c\u7136\u540e\u628a\u83b7\u53d6\u5230\u7684 t1 \u6bcf\u4e00\u884c\u7684 a \u503c\u5f53\u505a\u8fc7\u6ee4\u6761\u4ef6\uff0c\u5230\u53f3\u652f\u4e0a\u5229\u7528 t1.a = t2.a \u4f5c\u4e3a range_cond \u53bb\u8fdb\u884c\u7684 table get\uff08\u4e3b\u952e\u67e5\u8be2\uff09\u3002\u56e0\u4e3a\u53f3\u652f t2 \u8868\u5728 a \u5217\u4e0a\u6709\u4e3b\u952e\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 table get \u5feb\u901f\u83b7\u53d6\u5230\u4efb\u4f55\u4e00\u4e2a\u5177\u4f53\u7684\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709 O(m)\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select /*+use_nl(t1, t2)*/ * from t1, t2 where t1.a = t2.a;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =======================================================                               |\n| |ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|                               |\n| -------------------------------------------------------                               |\n| |0 |NESTED-LOOP JOIN       |    |1000    |16274       |                               |\n| |1 |\u251c\u2500TABLE FULL SCAN      |t1  |1000    |84          |                               |\n| |2 |\u2514\u2500DISTRIBUTED TABLE GET|t2  |1       |16          |                               |\n| =======================================================                               |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       conds(nil), nl_params_([t1.a(:0)]), use_batch=true                              |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([GROUP_ID], [t2.a], [t2.b], [t2.c]), partitions(p0)                      |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX),                                            |\n|       range_cond([:0 = t2.a])                                                         |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003",(0,s.jsx)("strong",{children:"\u5728 OceanBase \u4e2d\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u53ea\u4f1a\u9009\u62e9\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join\u3002"}),"\u9664\u975e\u6ca1\u6709\u7b49\u503c\u8fde\u63a5\u6761\u4ef6\uff0c\u5e76\u4e14 Nested-Loop Join \u4e5f\u6ca1\u6709\u5408\u9002\u7684\u7d22\u5f15\u53ef\u7528\uff0c\u624d\u6709\u53ef\u80fd\u4f1a\u8003\u8651\u751f\u6210\u975e\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join\uff0c\u751f\u6210\u8fd9\u79cd\u975e\u6761\u4ef6\u4e0b\u538b\u7684 NLJ \u7684\u6982\u7387\u975e\u5e38\u5c0f\uff0c\u4e00\u822c\u90fd\u4f1a\u7528 HJ \u6216 MJ \u4ee3\u66ff\uff0c\u5982\u679c\u51fa\u73b0\uff0c\u5c31\u8981\u4ed4\u7ec6\u5206\u6790\u4e0b\u662f\u5426\u5408\u7406\u4e86\u3002"]}),"\n",(0,s.jsx)("a",{name:"je7GS"}),"\n",(0,s.jsx)(n.h2,{id:"subplan-filter",children:"Subplan Filter"}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003\u8fd9\u91cc\u9700\u8981\u591a\u63d0\u4e00\u53e5\u548c\u5b50\u67e5\u8be2\u76f8\u5173\u7684 subplan filter \u7b97\u5b50\uff0c\u8fd9\u4e2a\u7b97\u5b50\u7684\u6267\u884c\u65b9\u5f0f\u8ddf Nested Loop Join \u7c7b\u4f3c\uff0c\u548c NLJ \u4e00\u6837\uff0c\u4e5f\u9700\u8981\u521b\u5efa\u5408\u9002\u7684\u7d22\u5f15\u6216\u8005\u4e3b\u952e\uff0c\u8ba9\u6761\u4ef6\u80fd\u591f\u4e0b\u538b\u3002",(0,s.jsx)("br",{}),"\u2003\u2003\u6211\u4eec\u8fd8\u7ee7\u7eed\u7528\u4e4b\u524d\u521b\u5efa\u7684\u4e24\u5f20\u8868 t1 \u548c t2\uff0c\u4e3b\u952e\u90fd\u5efa\u5728\u4e24\u5f20\u8868\u7684 a \u5217\u4e0a\u3002\u4e0b\u9762\u8fd9\u6761 SQL \u662f subplan filter \u6ca1\u6709\u5408\u9002\u7684\u7d22\u5f15\u6216\u4e3b\u952e\u7684\u60c5\u51b5\uff0c\u8ba1\u5212\u548c\u6ca1\u6709\u6761\u4ef6\u4e0b\u538b\u7684 NLJ \u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u4e86\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select /*+no_rewrite*/ a from t1 where b > (select b from t2 where t1.b = t2.b);\n+--------------------------------------------------------------------------------------------+\n| Query Plan                                                                                 |\n+--------------------------------------------------------------------------------------------+\n| =================================================                                          |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                          |\n| -------------------------------------------------                                          |\n| |0 |SUBPLAN FILTER   |    |334     |45415       |                                          |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |1000    |60          |                                          |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |2       |46          |                                          |\n| =================================================                                          |\n| Outputs & filters:                                                                         |\n| -------------------------------------                                                      |\n|   0 - output([t1.a]), filter([t1.b > subquery(1)]), rowset=256                             |\n|       exec_params_([t1.b(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false |\n|   1 - output([t1.a], [t1.b]), filter(nil), rowset=256                                      |\n|       access([t1.a], [t1.b]), partitions(p0)                                               |\n|       is_index_back=false, is_global_index=false,                                          |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                       |\n|   2 - output([t2.b]), filter([:0 = t2.b]), rowset=256                                      |\n|       access([t2.b]), partitions(p0)                                                       |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],          |\n|       range_key([t2.a]), range(MIN ; MAX)always true                                       |\n+--------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u4e0b\u9762\u8fd9\u6761 SQL \u662f subplan filter \u6709\u5408\u9002\u4e3b\u952e\u7684\u60c5\u51b5\uff0c\u8ba1\u5212\u548c\u6709\u6761\u4ef6\u4e0b\u538b\u7684 NLJ \u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u4e86\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select /*+no_rewrite*/ a from t1 where b > (select b from t2 where t1.a = t2.a);\n+-------------------------------------------------------------------------------------------+\n| Query Plan                                                                                |\n+-------------------------------------------------------------------------------------------+\n| =======================================================                                   |\n| |ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|                                   |\n| -------------------------------------------------------                                   |\n| |0 |SUBPLAN FILTER         |    |334     |18043       |                                   |\n| |1 |\u251c\u2500TABLE FULL SCAN      |t1  |1000    |60          |                                   |\n| |2 |\u2514\u2500DISTRIBUTED TABLE GET|t2  |1       |18          |                                   |\n| =======================================================                                   |\n| Outputs & filters:                                                                        |\n| -------------------------------------                                                     |\n|   0 - output([t1.a]), filter([t1.b > subquery(1)]), rowset=256                            |\n|       exec_params_([t1.a(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=true |\n|   1 - output([t1.a], [t1.b]), filter(nil), rowset=256                                     |\n|       access([t1.a], [t1.b]), partitions(p0)                                              |\n|       is_index_back=false, is_global_index=false,                                         |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                      |\n|   2 - output([t2.b]), filter(nil), rowset=256                                             |\n|       access([GROUP_ID], [t2.b]), partitions(p0)                                          |\n|       is_index_back=false, is_global_index=false,                                         |\n|       range_key([t2.a]), range(MIN ; MAX)always true,                                     |\n|       range_cond([:0 = t2.a])                                                             |\n+-------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003\u5728 OceanBase \u4e2d\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5b50\u67e5\u8be2\u90fd\u80fd\u88ab unnest\uff0c\u6709\u65f6\u5019\u6839\u636e sql \u7684\u8bed\u4e49\uff0c\u53ea\u80fd\u7528 subplan filter \u7b97\u5b50\u8fdb\u884c\u8ba1\u7b97\u3002",(0,s.jsx)(n.strong,{children:"subplan filter \u7684\u6267\u884c\u65b9\u5f0f\u8ddf Nested Loop Join \u7c7b\u4f3c\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u521b\u5efa\u5408\u9002\u7684\u7d22\u5f15\u907f\u514d\u51fa\u73b0\u975e\u6761\u4ef6\u4e0b\u538b\u7684 subplan filter\u3002"})]}),"\n",(0,s.jsx)("a",{name:"TS0s8"}),"\n",(0,s.jsx)(n.h1,{id:"hash-join",children:"Hash Join"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"cost(NLJ) = cost(left) + N(left) * cost(right)"}),"\n",(0,s.jsx)(n.li,{children:"cost(HJ) = cost(left) + N(left) * create_hash_cost + cost(right) + N(right) * probe_hash_cost"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u4e0a\u9762\u5217\u51fa\u4e86 NLJ \u548c HJ \u7684\u4ee3\u4ef7\u8ba1\u7b97\u516c\u5f0f\uff0c\u8fd9\u91cc\u5148\u514d\u53bb\u6570\u5b66\u63a8\u5bfc\u7684\u8fc7\u7a0b\uff0c\u76f4\u63a5\u8bf4\u7ed3\u8bba \u201c OB \u7684\u4f18\u5316\u5668\u5982\u679c\u8981\u5728 NLJ \u548c HJ \u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u5728\u6ee1\u8db3\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\u65f6\uff0c\u624d\u4f1a\u9009\u62e9 NLJ \u201d \uff1a"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"\u53f3\u8868\u6709\u5408\u9002\u7684\u7d22\u5f15\u6216\u8005\u4e3b\u952e\u3002"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u53f3\u8868\u7684\u884c\u6570 / \u5de6\u8868\u7684\u884c\u6570\u8d85\u8fc7\u4e00\u5b9a\u7684\u9608\u503c\uff0c\u5728 OB \u4e2d\uff0c\u5927\u6982\u662f 20 \u8fd9\u6837"}),"\uff0820 \u662f\u535a\u58eb\u548c\u4e49\u535a\u4ed6\u4eec\u7ed9\u51fa\u7684\u7ecf\u9a8c\u503c\uff0c\u5b9e\u6d4b\u4e0d\u6b62 20\uff0c\u5927\u6982\u5728 100 \u7684\u6837\u5b50\uff0c\u8fd9\u91cc\u4e0d\u4e71\u731c\u6d4b\uff0c\u540e\u9762\u6709\u7a7a\u513f\u4e86\u4f1a\u5b66\u4e60\u4e00\u4e0b\u4ee3\u4ef7\u8ba1\u7b97\u8fd9\u5757\u513f\u7684\u4ee3\u7801\uff09\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u6211\u4eec\u6765\u9a8c\u8bc1\u4e00\u4e0b\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u5148\u521b\u5efa\u4e24\u5f20\u8868\uff1a\u7b2c\u4e00\u5f20\u65e0\u4e3b\u952e\u8868 t1 \u6709 10 \u884c\uff1b\u7b2c\u4e8c\u5f20\u6709\u4e3b\u952e\u8868 t2 \u4e3b\u952e\u662f a \u5217\uff0c\u6709 1000 \u884c\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"drop table t1;\n\ndrop table t2;\n\nCREATE TABLE t1\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 10\n)\nSELECT * FROM my_cte;\n\nCREATE TABLE t2\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 1000\n)\nSELECT * FROM my_cte;\n\nalter table t2 add primary key(a);\n\ncall dbms_stats.gather_table_stats('TEST', 'T1', method_opt=>'for all columns size auto', estimate_percent=>100);\n\ncall dbms_stats.gather_table_stats('TEST', 'T2', method_opt=>'for all columns size auto', estimate_percent=>100);\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u5f53\u7528\u4e0d\u4e0a t2 \u8868\u7684\u4e3b\u952e\u65f6\uff0c\u5982\u679c\u8981\u751f\u6210 NLJ\uff0c\u5219\u4f1a\u751f\u6210\u975e\u6761\u4ef6\u4e0b\u538b\u7684 NLJ\uff0c\u663e\u7136\u4ee3\u4ef7\u4f1a\u5f88\u5927\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u751f\u6210\u4e00\u4e2a HJ \u7684\u8ba1\u5212\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select * from t1, t2 where t1.b = t2.b;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =================================================                                     |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                     |\n| -------------------------------------------------                                     |\n| |0 |HASH JOIN        |    |1       |4           |                                     |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |1       |2           |                                     |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |1       |2           |                                     |\n| =================================================                                     |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       equal_conds([t1.b = t2.b]), other_conds(nil)                                    |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   2 - output([t2.b], [t2.a], [t2.c]), filter(nil), rowset=256                         |\n|       access([t2.b], [t2.a], [t2.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                     |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u5f53\u80fd\u7528\u4e0a t2 \u8868\u7684\u4e3b\u952e\u5217 t2.a \u53bb\u8fdb\u884c table get\uff0c\u800c\u4e14\u53f3\u8868\u548c\u5de6\u8868\u6709\u660e\u663e\u7684\u5927\u5c0f\u8868\u5173\u7cfb\u65f6\uff08\u53f3\u8868 t2 \u6709 1000 \u884c\uff0c\u5de6\u8868 t1 \u53ea\u6709 10 \u884c\uff09\uff0c\u8fd9\u91cc\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a NLJ \u7684\u8ba1\u5212\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select * from t1, t2 where t1.a = t2.a;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =======================================================                               |\n| |ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|                               |\n| -------------------------------------------------------                               |\n| |0 |NESTED-LOOP JOIN       |    |10      |165         |                               |\n| |1 |\u251c\u2500TABLE FULL SCAN      |t1  |10      |3           |                               |\n| |2 |\u2514\u2500DISTRIBUTED TABLE GET|t2  |1       |16          |                               |\n| =======================================================                               |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       conds(nil), nl_params_([t1.a(:0)]), use_batch=true                              |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                     |\n|   2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([GROUP_ID], [t2.a], [t2.b], [t2.c]), partitions(p0)                      |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX),                                            |\n|       range_cond([:0 = t2.a])                                                         |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)("a",{name:"WnUdT"}),"\n",(0,s.jsx)(n.h1,{id:"merge-join",children:"Merge Join"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"cost(MJ) = cost(left) + cost(right) + sort(left) + sort(right)"}),"\n",(0,s.jsx)(n.li,{children:"cost(HJ) = cost(left) + N(left) * hash_cost + cost(right) + N(right) * probe_cost"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u2003\u2003\u4e0a\u9762\u5217\u51fa\u4e86 NLJ \u548c HJ \u7684\u4ee3\u4ef7\u8ba1\u7b97\u516c\u5f0f\uff0c\u5b83\u4eec\u90fd\u9700\u8981\u5b8c\u6574\u5730\u626b\u63cf\u5de6\u8868\u548c\u53f3\u8868\uff0c\u533a\u522b\u5728\u4e8e Merge Join \u8981\u5206\u522b\u5bf9\u4e24\u4fa7\u5728\u8fde\u63a5\u952e\u4e0a\u8fdb\u884c\u6392\u5e8f\uff0c\u800c\u54c8\u5e0c\u5219\u662f\u5bf9\u5de6\u4fa7\u5efa\u54c8\u5e0c\u8868\u3001\u5bf9\u53f3\u4fa7\u505a\u54c8\u5e0c\u63a2\u6d4b\u3002\u76f8\u6bd4\u4e8e\u6784\u5efa\u54c8\u5e0c\u8868\u548c\u54c8\u5e0c\u63a2\u6d4b\uff08O(n)\uff09\u6765\u8bf4\uff0c\u505a\u6392\u5e8f\u7684\u4ee3\u4ef7\u4f1a\u66f4\u9ad8\uff08O(nlogn)\uff09\u3002",(0,s.jsx)(n.strong,{children:"\u56e0\u6b64\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u662f Hash Join \u4f18\u4e8e Merge Join\u3002"}),(0,s.jsx)("br",{}),"\u2003\u2003\u53ea\u6709\u5728\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u573a\u666f\u4e0b\uff0c\u624d\u4f1a\u9009\u62e9 Merge Join \u3002\u6bd4\u5982\u4e24\u4fa7\u90fd\u6709\u5e8f\u65f6\uff0c\u5c31\u53ef\u4ee5\u7701\u53bb\u6392\u5e8f\u7684\u4ee3\u4ef7\uff0c\u76f4\u63a5\u505a\u4e00\u6b21\u5f52\u5e76\u5c31\u597d\u4e86\u3002",(0,s.jsx)("br",{}),"\u2003\u2003\u8fd8\u662f\u62ff\u4e00\u5f00\u59cb\u7684\u4e24\u5f20\u8868 t1 \u548c t2 \u505a\u5b9e\u9a8c\uff0ct1 \u548c t2 \u90fd\u6709\u5efa\u5728 a \u5217\u4e0a\u7684\u4e3b\u952e\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"drop table t1;\n\ndrop table t2;\n\nCREATE TABLE t1\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 1000\n)\nSELECT * FROM my_cte;\n\nalter table t1 add primary key(a);\n\nCREATE TABLE t2\nWITH RECURSIVE my_cte(a, b, c) AS\n(\n  SELECT 1, 0, 0\n  UNION ALL\n  SELECT a + 1, round((a + 1) / 2, 0), round((a + 1) / 3, 0) FROM my_cte WHERE a < 1000\n)\nSELECT * FROM my_cte;\n\nalter table t2 add primary key(a);\n\ncall dbms_stats.gather_table_stats('TEST', 'T1', method_opt=>'for all columns size auto', estimate_percent=>100);\n\ncall dbms_stats.gather_table_stats('TEST', 'T2', method_opt=>'for all columns size auto', estimate_percent=>100);\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u5982\u679c\u8fde\u63a5\u6761\u4ef6\u90fd\u662f\u672c\u6765\u5c31\u6709\u5e8f\u7684\u4e3b\u952e a \u5217\uff0c\u5219\u4f1a\u751f\u6210 merge join\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select * from t1, t2 where t1.a = t2.a;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =================================================                                     |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                     |\n| -------------------------------------------------                                     |\n| |0 |MERGE JOIN       |    |1000    |301         |                                     |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |1000    |84          |                                     |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |1000    |84          |                                     |\n| =================================================                                     |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       equal_conds([t1.a = t2.a]), other_conds(nil)                                    |\n|       merge_directions([ASC])                                                         |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([t2.a], [t2.b], [t2.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX)always true                                  |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u5982\u679c\u8fde\u63a5\u6761\u4ef6\u90fd\u662f\u65e0\u5e8f\u7684 b \u5217\uff0c\u5219\u4f1a\u751f\u6210 hash join\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select * from t1, t2 where t1.b = t2.b;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =================================================                                     |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                     |\n| -------------------------------------------------                                     |\n| |0 |HASH JOIN        |    |1877    |481         |                                     |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |1000    |84          |                                     |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |1000    |84          |                                     |\n| =================================================                                     |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       equal_conds([t1.b = t2.b]), other_conds(nil)                                    |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([t2.a], [t2.b], [t2.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX)always true                                  |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u2003\u2003\u5982\u679c\u8fde\u63a5\u6761\u4ef6\u90fd\u662f\u65e0\u5e8f\u7684 b \u5217\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a hint \u5f3a\u5236\u8981\u6c42\u751f\u6210 merge join \u7684\u8ba1\u5212\uff0c\u90a3\u4e48\u6267\u884c\u8ba1\u5212\u4e2d\u4e00\u5b9a\u4f1a\u88ab\u5148\u5206\u914d sort \u7b97\u5b50\uff0c\u901a\u8fc7 sort \u7b97\u5b50\u8fdb\u884c\u6392\u5e8f\u540e\u518d\u8fdb\u884c merge join\uff0c\u8fd9\u79cd\u8ba1\u5212\u7684\u4ee3\u4ef7\u5f80\u5f80\u4f1a\u6bd4 hash join \u9ad8\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"explain select /*+ USE_MERGE(t1 t2) */ * from t1, t2 where t1.b = t2.b;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| ===================================================                                   |\n| |ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|                                   |\n| ---------------------------------------------------                                   |\n| |0 |MERGE JOIN         |    |1877    |750         |                                   |\n| |1 |\u251c\u2500SORT             |    |1000    |294         |                                   |\n| |2 |\u2502 \u2514\u2500TABLE FULL SCAN|t1  |1000    |84          |                                   |\n| |3 |\u2514\u2500SORT             |    |1000    |294         |                                   |\n| |4 |  \u2514\u2500TABLE FULL SCAN|t2  |1000    |84          |                                   |\n| ===================================================                                   |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256 |\n|       equal_conds([t1.b = t2.b]), other_conds(nil)                                    |\n|       merge_directions([ASC])                                                         |\n|   1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       sort_keys([t1.b, ASC])                                                          |\n|   2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256                         |\n|       access([t1.a], [t1.b], [t1.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.a]), range(MIN ; MAX)always true                                  |\n|   3 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       sort_keys([t2.b, ASC])                                                          |\n|   4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256                         |\n|       access([t2.a], [t2.b], [t2.c]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.a]), range(MIN ; MAX)always true                                  |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)("a",{name:"gTjRW"}),"\n",(0,s.jsx)(n.h1,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,s.jsx)(n.p,{children:"\u8fd9\u4e09\u4e2a join \u65b9\u5f0f\u662f\u6570\u636e\u5e93\u6700\u57fa\u7840\u7684\u77e5\u8bc6\u70b9\uff0c\u6700\u540e\u7b80\u5355\u5730\u603b\u7ed3\u4e00\u4e0b\u5b66\u5b8c\u4e4b\u540e\u9700\u8981\u8bb0\u4f4f\u7684\u51e0\u4e2a\u70b9\uff1a"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\u8ba1\u5212\u91cc\u7edd\u5927\u591a\u6570\u7684\u60c5\u51b5\u90fd\u53ea\u4f1a\u9009\u62e9\u6709\u6761\u4ef6\u4e0b\u538b\u7684 Nested-Loop Join\uff0c\u5982\u679c\u9009\u62e9\u4e86\u975e\u6761\u4ef6\u4e0b\u538b\u7684 NLJ\uff0c\u9700\u8981\u521b\u5efa\u5408\u9002\u7684\u7d22\u5f15\u8ba9\u8ba1\u5212\u53d8\u6210\u6709\u6761\u4ef6\u4e0b\u538b\u7684 NLJ\uff0c\u6216\u8005\u6307\u5b9a hint \u53d8\u66f4 join \u7684\u65b9\u5f0f\u3002\u4e0e\u8054\u63a5\u64cd\u4f5c\u76f8\u5173\u7684 Hint \u8be6\u89c1\u5b98\u7f51\u94fe\u63a5\uff1a",(0,s.jsx)(n.a,{href:"https://www.oceanbase.com/docs/common-oceanbase-database-cn-1000000000222744",children:"https://www.oceanbase.com/docs/common-oceanbase-database-cn-1000000000222744"})]}),"\n",(0,s.jsx)(n.li,{children:"subplan filter \u7684\u6267\u884c\u65b9\u5f0f\u8ddf Nested Loop Join \u7c7b\u4f3c\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u521b\u5efa\u5408\u9002\u7684\u7d22\u5f15\u907f\u514d\u51fa\u73b0\u975e\u6761\u4ef6\u4e0b\u538b\u7684 subplan filter\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u8ba1\u5212\u91cc\u5982\u679c\u6709 merge join\uff0c\u5f80\u5f80\u662f\u53ef\u4ee5\u5229\u7528\u4e0b\u5c42\u7b97\u5b50\u7684\u6709\u5e8f\u6027\u3002\u5982\u679c\u4e0b\u5c42\u7b97\u5b50\u90fd\u662f\u65e0\u5e8f\u7684\uff0c\u8ba1\u5212\u4e2d\u5728 merge \u524d\u8fd8\u4e13\u95e8\u5206\u914d\u4e86\u4e00\u4e9b sort \u8fdb\u884c\u6392\u5e8f\uff0c\u9700\u8981\u5206\u6790\u4e0b\u662f\u5426\u9700\u8981\u901a\u8fc7 hint \u6539\u6210\u4f7f\u7528 hash join \u8fdb\u884c\u8fde\u63a5\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u7d22\u5f15\u548c\u4e3b\u952e\uff0c\u4e5f\u6ca1\u6709\u6709\u5e8f\u6027\uff0c\u90a3\u4e48\u4e00\u822c hash join \u7684\u4ee3\u4ef7\u662f\u6700\u4f4e\u7684\u3002"}),"\n"]})]})}function _(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},28453:(t,n,e)=>{e.d(n,{R:()=>i,x:()=>l});var s=e(96540);const a={},r=s.createContext(a);function i(t){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),s.createElement(r.Provider,{value:n},t.children)}}}]);