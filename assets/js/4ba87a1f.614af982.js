"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[4039],{56138:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>_,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=t(74848),i=t(28453);const r={title:"Monitoring Metrics",weight:7},a=void 0,o={id:"user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/monitoring_metrics",title:"Monitoring Metrics",description:"Query Cache Size Statistics",source:"@site/docs/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/07_monitoring_metrics.md",sourceDirName:"user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql",slug:"/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/monitoring_metrics",permalink:"/docs/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/monitoring_metrics",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/07_monitoring_metrics.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Monitoring Metrics",weight:7},sidebar:"operation_and_maintenanceEnglishSidebar",previous:{title:"Compaction Management",permalink:"/docs/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/merge_management"},next:{title:"SQL Audit",permalink:"/docs/user_manual/operation_and_maintenance/en-US/operations_and_maintenance/commonly_used_sql/sql_audit"}},_={},d=[{value:"Query Cache Size Statistics",id:"query-cache-size-statistics",level:2},{value:"Query the Connection Information",id:"query-the-connection-information",level:2},{value:"Query the Delay of Log Stream Synchronization",id:"query-the-delay-of-log-stream-synchronization",level:2},{value:"Query the Number of Index Errors",id:"query-the-number-of-index-errors",level:2},{value:"Query the Status of Indexes",id:"query-the-status-of-indexes",level:2},{value:"Query Abnormal Indexes",id:"query-abnormal-indexes",level:2},{value:"Query Plan Cache Statistics",id:"query-plan-cache-statistics",level:2},{value:"Query the Duration of MemTable Snapshots",id:"query-the-duration-of-memtable-snapshots",level:2},{value:"Query Memory Usage of the Tenant sys500",id:"query-memory-usage-of-the-tenant-sys500",level:2},{value:"Query Memory Usage Statistics Grouped by Tenant",id:"query-memory-usage-statistics-grouped-by-tenant",level:2},{value:"Query Memory Usage Statistics Grouped by Module",id:"query-memory-usage-statistics-grouped-by-module",level:2},{value:"Query Latch Information",id:"query-latch-information",level:2},{value:"Query the Time Spent for Ongoing System Jobs",id:"query-the-time-spent-for-ongoing-system-jobs",level:2},{value:"Query the Time Spent for All System Jobs",id:"query-the-time-spent-for-all-system-jobs",level:2},{value:"Query the Time Spent for Server Jobs",id:"query-the-time-spent-for-server-jobs",level:2},{value:"Query System Event Statistics Grouped by Tenant",id:"query-system-event-statistics-grouped-by-tenant",level:2},{value:"Query System Event Statistics Grouped by Event",id:"query-system-event-statistics-grouped-by-event",level:2},{value:"Query System Statistics",id:"query-system-statistics",level:2}];function c(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"query-cache-size-statistics",children:"Query Cache Size Statistics"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  cache_name,\n  round(cache_size / 1024 / 1024) cache_size_mb\nFROM\n  gv$ob_kvcache\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port,\n  cache_name;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-connection-information",children:"Query the Connection Information"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  t2.svr_ip,\n  t2.svr_port,\n  t1.tenant_name,\n  coalesce(t2.active_cnt, 0) AS active_cnt,\n  coalesce(t2.all_cnt, 0) AS all_cnt\nFROM\n  (\n    SELECT\n      tenant_name\n    FROM\n      dba_ob_tenants\n    WHERE\n      tenant_type <> 'META'\n  ) t1\n  LEFT JOIN (\n    SELECT\n      count(\n        `state` = 'ACTIVE'\n        OR NULL\n      ) AS active_cnt,\n      COUNT(1) AS all_cnt,\n      tenant AS tenant_name,\n      svr_ip,\n      svr_port\n    FROM\n      gv$ob_processlist\n    GROUP BY\n      tenant,\n      svr_ip,\n      svr_port\n  ) t2 ON t1.tenant_name = t2.tenant_name\nORDER BY\n  all_cnt DESC,\n  active_cnt DESC,\n  t2.svr_ip,\n  t2.svr_port,\n  t1.tenant_name;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-delay-of-log-stream-synchronization",children:"Query the Delay of Log Stream Synchronization"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  leader.tenant_id,\n  '0' AS replica_type,\n  abs(\n    MAX(\n      CAST(leader_ts AS signed) - CAST(follower_ts AS signed)\n    )\n  ) / 1000000000 max_clog_sync_delay_seconds\nFROM\n  (\n    SELECT\n      MAX(end_scn) leader_ts,\n      tenant_id,\n      role\n    FROM\n      gv$ob_log_stat\n    WHERE\n      role = 'LEADER'\n    GROUP BY\n      tenant_id\n  ) leader\n  INNER JOIN (\n    SELECT\n      MIN(end_scn) follower_ts,\n      tenant_id,\n      role\n    FROM\n      gv$ob_log_stat\n    WHERE\n      role = 'FOLLOWER'\n    GROUP BY\n      tenant_id\n  ) follower ON leader.tenant_id = follower.tenant_id\nGROUP BY\n  leader.tenant_id\nORDER BY\n  leader.tenant_id;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-number-of-index-errors",children:"Query the Number of Index Errors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /*+ MONITOR_AGENT QUERY_TIMEOUT(100000000) */\n  COUNT(*) AS cnt\nFROM\n  cdb_indexes\nWHERE\n  status IN ('ERROR', 'UNUSABLE');\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-status-of-indexes",children:"Query the Status of Indexes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  con_id tenant_id,\n  table_type,\n  table_owner,\n  table_name,\n  owner index_owner,\n  index_name,\n  status,\n  index_type,\n  uniqueness,\n  compression\nFROM\n  cdb_indexes\nWHERE\n  con_id = 1012\n  AND table_owner = 'ALVIN'\n--   AND table_name = 'TEST'\nORDER BY\n  tenant_id,\n  table_owner,\n  table_name,\n  index_name;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-abnormal-indexes",children:"Query Abnormal Indexes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  con_id tenant_id,\n  table_type,\n  table_owner,\n  table_name,\n  owner index_owner,\n  index_name,\n  status,\n  index_type,\n  uniqueness,\n  compression\nFROM\n  cdb_indexes\nWHERE\n  status IN ('ERROR', 'UNUSABLE')\n  AND con_id = 1012\n  AND table_owner = 'ALVIN';\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-plan-cache-statistics",children:"Query Plan Cache Statistics"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  mem_used,\n  access_count,\n  hit_count\nFROM\n  v$ob_plan_cache_stat;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-duration-of-memtable-snapshots",children:"Query the Duration of MemTable Snapshots"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /*+ PARALLEL(2), ENABLE_PARALLEL_DML, MONITOR_AGENT */\n  tenant_id,\n  svr_ip,\n  svr_port,\n  MAX(unix_timestamp(now()) - end_log_scn / 1000000000) max_snapshot_duration_seconds\nFROM\n  gv$ob_sstables\nWHERE\n  table_type = 'MEMTABLE'\n  AND is_active = 'NO'\n  AND end_log_scn / 1000000000 > 1\nGROUP BY\n  tenant_id,\n  svr_ip,\n  svr_port\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-memory-usage-of-the-tenant-sys500",children:"Query Memory Usage of the Tenant sys500"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  svr_ip,\n  svr_port,\n  round(SUM(hold) / 1024 / 1024) AS hold_mb,\n  round(SUM(used) / 1024 / 1024) AS used_mb\nFROM\n  gv$ob_memory\nWHERE\n  tenant_id = 500\n  AND mod_name <> 'KvstorCacheMb'\nGROUP BY\n  tenant_id,\n  svr_ip,\n  svr_port\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-memory-usage-statistics-grouped-by-tenant",children:"Query Memory Usage Statistics Grouped by Tenant"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  svr_ip,\n  svr_port,\n  round(SUM(hold) / 1024 / 1024) AS hold_mb,\n  round(SUM(used) / 1024 / 1024) AS used_mb\nFROM\n  gv$ob_memory\nWHERE\n  mod_name <> 'KvstorCacheMb'\nGROUP BY\n  tenant_id,\n  svr_ip,\n  svr_port\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-memory-usage-statistics-grouped-by-module",children:"Query Memory Usage Statistics Grouped by Module"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  svr_ip,\n  svr_port,\n  mod_name,\n  round(SUM(hold) / 1024 / 1024) AS hold_mb,\n  round(SUM(used) / 1024 / 1024) AS used_mb\nFROM\n  gv$ob_memory\nWHERE\n  mod_name <> 'KvstorCacheMb'\nGROUP BY\n  tenant_id,\n  svr_ip,\n  svr_port,\n  mod_name\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port,\n  mod_name;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-latch-information",children:"Query Latch Information"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  con_id tenant_id,\n  name,\n  svr_ip,\n  svr_port,\n  gets,\n  misses,\n  sleeps,\n  immediate_gets,\n  immediate_misses,\n  spin_gets,\n  wait_time / 1000000 AS wait_time\nFROM\n  gv$latch\nWHERE\n  (\n    con_id = 1\n    OR con_id > 1000\n  )\n  AND (\n    gets > 0\n    OR misses > 0\n    OR sleeps > 0\n    OR immediate_gets > 0\n    OR immediate_misses > 0\n  )\nORDER BY\n  tenant_id,\n  name,\n  svr_ip,\n  svr_port;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-time-spent-for-ongoing-system-jobs",children:"Query the Time Spent for Ongoing System Jobs"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  job_type AS task_type,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds,\n  rs_svr_ip AS svr_ip,\n  rs_svr_port AS svr_port\nFROM\n  dba_ob_tenant_jobs\nWHERE\n  job_status = 'INPROGRESS'\nUNION\nSELECT\n  tenant_id,\n  job_type AS task_type,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds,\n  rs_svr_ip AS svr_ip,\n  rs_svr_port AS svr_port\nFROM\n  dba_ob_unit_jobs\nWHERE\n  tenant_id IS NOT NULL\n  AND job_status = 'INPROGRESS'\nORDER BY\n  tenant_id,\n  task_type,\n  svr_ip,\n  svr_port;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-time-spent-for-all-system-jobs",children:"Query the Time Spent for All System Jobs"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  tenant_id,\n  rs_svr_ip AS svr_ip,\n  rs_svr_port svr_port,\n  job_status,\n  job_type AS task_type,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds\nFROM\n  dba_ob_tenant_jobs\nUNION\nSELECT\n  tenant_id,\n  rs_svr_ip AS svr_ip,\n  rs_svr_port svr_port,\n  job_status,\n  job_type AS task_type,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds\nFROM\n  dba_ob_unit_jobs\nWHERE\n  tenant_id IS NOT NULL\nORDER BY\n  tenant_id,\n  svr_ip,\n  svr_port,\n  job_status,\n  task_type;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-the-time-spent-for-server-jobs",children:"Query the Time Spent for Server Jobs"}),"\n",(0,s.jsx)(e.p,{children:"Execute the following SQL statement to query the time spent for ongoing server jobs:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  job_type AS task_type,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds,\n  svr_ip\nFROM\n  dba_ob_server_jobs\nWHERE\n  job_status = 'INPROGRESS'\nORDER BY\n  start_time DESC,\n  task_type,\n  job_status;\n"})}),"\n",(0,s.jsx)(e.p,{children:"Execute the following SQL statement to query the time spent for all server jobs:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  job_type AS task_type,\n  job_status,\n  timestampdiff(second, start_time, current_timestamp) AS max_sys_task_duration_seconds,\n  svr_ip\nFROM\n  dba_ob_server_jobs\nORDER BY\n  start_time DESC,\n  task_type,\n  job_status;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-system-event-statistics-grouped-by-tenant",children:"Query System Event Statistics Grouped by Tenant"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  con_id tenant_id,\n  SUM(total_waits) AS total_waits,\n  SUM(time_waited_micro) / 1000000 AS time_waited\nFROM\n  v$system_event\nWHERE\n  v$system_event.wait_class <> 'IDLE'\n  AND (\n    con_id > 1000\n    OR con_id = 1\n  )\nGROUP BY\n  tenant_id;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-system-event-statistics-grouped-by-event",children:"Query System Event Statistics Grouped by Event"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT\n  /* MONITOR_AGENT */\n  con_id tenant_id,\n  CASE\n  WHEN event_id = 10000 THEN 'INTERNAL'\n  WHEN event_id = 13000 THEN 'SYNC_RPC'\n  WHEN event_id = 14003 THEN 'ROW_LOCK_WAIT'\n  WHEN (\n    event_id >= 10001\n    AND event_id <= 11006\n  )\n  OR (\n    event_id >= 11008\n    AND event_id <= 11011\n  ) THEN 'IO'\n  WHEN event LIKE 'latch:%' THEN 'LATCH'\n  ELSE 'OTHER'\nEND\n  event_group,\n  SUM(total_waits) AS total_waits,\n  SUM(time_waited_micro / 1000000) AS time_waited\nFROM\n  v$system_event\nWHERE\n  v$system_event.wait_class <> 'IDLE'\n  AND (\n    con_id > 1000\n    OR con_id = 1\n  )\nGROUP BY\n  tenant_id,\n  event_group\nORDER BY\n  tenant_id,\n  event_group;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"query-system-statistics",children:"Query System Statistics"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT /* MONITOR_AGENT */\n    con_id tenant_id,\n    stat_id,\n    value\nFROM\n    v$sysstat\nWHERE\n    stat_id IN ( 10000, 10001, 10002, 10003, 10004,\n                 10005, 10006, 140002, 140003, 140005,\n                 140006, 140012, 140013, 40030, 80040,\n                 80041, 130000, 130001, 130002, 130004,\n                 20000, 20001, 20002, 30000, 30001,\n                 30002, 30005, 30006, 30007, 30008,\n                 30009, 30010, 30011, 30012, 30013,\n                 30080, 30081, 30082, 30083, 30084,\n                 30085, 30086, 40000, 40001, 40002,\n                 40003, 40004, 40005, 40006, 40007,\n                 40008, 40009, 40010, 40011, 40012,\n                 40018, 40019, 40116, 40117, 40118,\n                 50000, 50001, 60087, 50004, 50005,\n                 50008, 50009, 50010, 50011, 50037,\n                 50038, 60000, 60001, 60002, 60003,\n                 60004, 60005, 60019, 60020, 60021,\n                 60022, 60023, 60024, 80001, 80002,\n                 80003, 80007, 80008, 80009, 80057,\n                 120000, 120001, 120009, 120008 )\n    AND ( con_id > 1000\n          OR con_id = 1 )\n    AND class < 1000;\n"})}),"\n",(0,s.jsx)(e.p,{children:"Execute the following SQL statement to exclude the statistics of meta tenants:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT /* MONITOR_AGENT */\n    tenant_id,\n    stat_id,\n    value\nFROM\n    v$sysstat,\n    dba_ob_tenants\nWHERE\n    stat_id IN ( 30066, 50003, 50021, 50022, 50030,\n                 50039, 50040, 60031, 60057, 60083,\n                 80023, 80025, 80026, 120002, 120005,\n                 120006, 200001, 200002 )\n    AND ( con_id > 1000\n          OR con_id = 1 )\n    AND dba_ob_tenants.tenant_id = v$sysstat.con_id\n    AND dba_ob_tenants.tenant_type <> 'META'\nUNION ALL\nSELECT\n    con_id AS tenant_id,\n    stat_id,\n    value\nFROM\n    v$sysstat\nWHERE\n    stat_id IN ( 80025, 80026, 80023 )\n    AND con_id > 1\n    AND con_id < 1001\n    AND value > 0;\n"})})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);