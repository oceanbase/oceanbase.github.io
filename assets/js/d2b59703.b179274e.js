"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[397],{41963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var s=t(74848),i=t(28453);const a={title:"Read and manage SQL execution plans in OceanBase Database",weight:6},r="7.5 Read and manage SQL execution plans in OceanBase Database",c={id:"user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/management_execution_plan",title:"Read and manage SQL execution plans in OceanBase Database",description:"An execution plan describes the process of executing an SQL statement in a database.",source:"@site/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/05_management_execution_plan.md",sourceDirName:"user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning",slug:"/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/management_execution_plan",permalink:"/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/management_execution_plan",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/05_management_execution_plan.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Read and manage SQL execution plans in OceanBase Database",weight:6},sidebar:"quick_starts_and_hands_on_practices_in_englishSidebar",previous:{title:"Perform analysis based on SQL monitoring views",permalink:"/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/analyze_sql_monitoring_view"},next:{title:"Common SQL tuning methods",permalink:"/docs/user_manual/quick_starts_and_hands_on_practices_in_english/chapter_07_diagnosis_and_tuning/sql_tuning"}},l={},o=[{value:"Syntax of the EXPLAIN statement",id:"syntax-of-the-explain-statement",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Execution plan operators",id:"execution-plan-operators",level:2},{value:"EXCHANGE IN/EXCHANGE OUT",id:"exchange-inexchange-out",level:3},{value:"EXCHANGE IN/EXCHANGE OUT (REMOTE)",id:"exchange-inexchange-out-remote",level:3},{value:"Local plan",id:"local-plan",level:4},{value:"Remote plan",id:"remote-plan",level:4},{value:"EXCHANGE IN/EXCHANGE OUT (PKEY)",id:"exchange-inexchange-out-pkey",level:3},{value:"Use hints to generate a plan",id:"use-hints-to-generate-a-plan",level:2},{value:"Hint syntax",id:"hint-syntax",level:3},{value:"Hint parameters",id:"hint-parameters",level:3},{value:"QB_NAME",id:"qb_name",level:3},{value:"Usage rules of hints",id:"usage-rules-of-hints",level:3},{value:"Common hints",id:"common-hints",level:3},{value:"INDEX hint",id:"index-hint",level:4},{value:"FULL hint",id:"full-hint",level:4},{value:"LEADING hint",id:"leading-hint",level:4},{value:"USE_NL hint",id:"use_nl-hint",level:4},{value:"USE_HASH hint",id:"use_hash-hint",level:4},{value:"USE_MERGE hint",id:"use_merge-hint",level:4},{value:"PARALLEL hint",id:"parallel-hint",level:4},{value:"READ_CONSISTENCY(WEAK) hint",id:"read_consistencyweak-hint",level:4},{value:"QUERY_TIMEOUT hint",id:"query_timeout-hint",level:4},{value:"Use an outline to bind a plan",id:"use-an-outline-to-bind-a-plan",level:2},{value:"Dictionary views related to outlines",id:"dictionary-views-related-to-outlines",level:3},{value:"Create an outline",id:"create-an-outline",level:3},{value:"Create an outline based on SQL_TEXT",id:"create-an-outline-based-on-sql_text",level:4},{value:"Create an outline based on SQL_ID",id:"create-an-outline-based-on-sql_id",level:4},{value:"Verify whether the outline creation takes effect",id:"verify-whether-the-outline-creation-takes-effect",level:3},{value:"Drop an outline",id:"drop-an-outline",level:3},{value:"Relationship between plan binding and plan caching",id:"relationship-between-plan-binding-and-plan-caching",level:3},{value:"Relationship between plan binding and throttling rules",id:"relationship-between-plan-binding-and-throttling-rules",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"75-read-and-manage-sql-execution-plans-in-oceanbase-database",children:"7.5 Read and manage SQL execution plans in OceanBase Database"})}),"\n",(0,s.jsx)(n.p,{children:"An execution plan describes the process of executing an SQL statement in a database."}),"\n",(0,s.jsxs)(n.p,{children:["You can execute the ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement to view the execution plan generated by the optimizer for a given SQL statement. To analyze the performance of an SQL statement, you need to first check the SQL execution plan to see if any error exists. Therefore, understanding the execution plan is the first step for SQL tuning, and knowledge about operators of an execution plan is key to understanding the ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement."]}),"\n",(0,s.jsx)(n.h2,{id:"syntax-of-the-explain-statement",children:"Syntax of the EXPLAIN statement"}),"\n",(0,s.jsxs)(n.p,{children:["You can use this statement to obtain the execution plan of an SQL statement, which can be a ",(0,s.jsx)(n.code,{children:"SELECT"}),", ",(0,s.jsx)(n.code,{children:"DELETE"}),", ",(0,s.jsx)(n.code,{children:"INSERT"}),", ",(0,s.jsx)(n.code,{children:"REPLACE"}),", or ",(0,s.jsx)(n.code,{children:"UPDATE"})," statement."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"EXPLAIN"}),", ",(0,s.jsx)(n.code,{children:"DESCRIBE"}),", and ",(0,s.jsx)(n.code,{children:"DESC"})," are synonyms."]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"{EXPLAIN [INTO table_name] [SET statement_id = string]}\n[explain_type] [PRETTY | PRETTY_COLOR] dml_statement;\n\nexplain_type:\n    BASIC\n  | OUTLINE\n  | EXTENDED\n  | EXTENDED_NOADDR\n  | PARTITIONS\n  | FORMAT = {TRADITIONAL| JSON}\n\ndml_statement:\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | REPLACE statement\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"EXPLAIN",src:t(18007).A+"",width:"1867",height:"889"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Parameter"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"INTO table_name"}),(0,s.jsxs)(n.td,{children:["The table where the execution plan obtained by ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," is to be stored. If you do not specify ",(0,s.jsx)(n.code,{children:"INTO table_name"}),", the execution plan is stored in the ",(0,s.jsx)(n.code,{children:"PLAN_TABLE"})," table by default."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SET statement_id"}),(0,s.jsxs)(n.td,{children:["The statement ID of the explained SQL statement, which can be used to query the execution plan of the statement later. If you do not specify ",(0,s.jsx)(n.code,{children:"SET statement_id"}),", an empty string is used as the statement ID by default."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PRETTY | PRETTY_COLOR"}),(0,s.jsx)(n.td,{children:"Specifies to connect the parent and child nodes in the plan tree with tree lines or colored tree lines to make the execution plan easier to read."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BASIC"}),(0,s.jsx)(n.td,{children:"The basic information about the output plan, such as the operator ID, operator name, and name of the referenced table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE"}),(0,s.jsx)(n.td,{children:"The outline information contained in the output plan."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EXTENDED"}),(0,s.jsx)(n.td,{children:"Specifies to display the extra information."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EXTENDED_NOADDR"}),(0,s.jsx)(n.td,{children:"Specifies to display the brief extra information."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PARTITIONS"}),(0,s.jsx)(n.td,{children:"Specifies to display the partition-related information."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["FORMAT = ",(0,s.jsx)(n.code,{children:"{TRADITIONAL | JSON}"})]}),(0,s.jsxs)(n.td,{children:["The output format of ",(0,s.jsx)(n.code,{children:"EXPLAIN"}),". Valid values: ",(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"TRADITIONAL"}),": presents the output in the tabular format."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"JSON"}),": presents the output in the ",(0,s.jsx)(n.code,{children:"KEY:VALUE"})," format. The output is displayed as JSON strings, including ",(0,s.jsx)(n.code,{children:"EXTENDED"})," and ",(0,s.jsx)(n.code,{children:"PARTITIONS"})," information. "]})]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"dml_statement"}),(0,s.jsx)(n.td,{children:"The DML statement."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," and ",(0,s.jsx)(n.code,{children:"EXPLAIN EXTENDED_NOADDR"})," statements are most commonly used in OceanBase Database."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement shows information that helps you understand the entire execution process of a plan. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table t1(c1 int, c2 int);\n\ncreate table t2(c1 int, c2 int);\n\n-- Insert 10 rows of test data into the `t1` table, and set values of the `c1` column to consecutive integers ranging from 1 to 1000.\ninsert into t1 with recursive cte(n) as (select 1 from dual union all select n + 1 from cte where n < 1000) select n, n from cte;\n\n-- Insert 10 rows of test data into the `t2` table, and set values of the `c1` column to consecutive integers ranging from 1 to 1000.\ninsert into t2 with recursive cte(n) as (select 1 from dual union all select n + 1 from cte where n < 1000) select n, n from cte;\n\n-- Collect statistics on the `t1` table.\nanalyze table t1 COMPUTE STATISTICS for all columns size 128;\n\n-- Collect statistics on the `t2` table.\nanalyze table t2 COMPUTE STATISTICS for all columns size 128;\n\nexplain select * from t1, t2 where t1.c1 = t2.c1 and t1.c1 < 500;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |498     |315         |                                  |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |499     |76          |                                  |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |499     |76          |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256          |\n|       equal_conds([t1.c1 = t2.c1]), other_conds(nil)                               |\n|   1 - output([t1.c1], [t1.c2]), filter([t1.c1 < 500]), rowset=256                  |\n|       access([t1.c1], [t1.c2]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t2.c1], [t2.c2]), filter([t2.c1 < 500]), rowset=256                  |\n|       access([t2.c1], [t2.c2]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following table describes columns of an execution plan in OceanBase Database."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Column"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ID"}),(0,s.jsx)(n.td,{children:"The sequence number of the operator obtained by the execution tree through preorder traversal, starting from 0."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OPERATOR"}),(0,s.jsx)(n.td,{children:"The name of the operator."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NAME"}),(0,s.jsx)(n.td,{children:"The name of the table or index corresponding to a table operation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EST. ROWS"}),(0,s.jsxs)(n.td,{children:["The number of output rows of the operator estimated by the optimizer. This column is for your reference only. ",(0,s.jsx)("br",{}),"In the preceding figure, Operator 1 ",(0,s.jsx)(n.code,{children:"TABLE FULL SCAN"})," contains the filter condition ",(0,s.jsx)(n.code,{children:"t1.c1 < 500"}),". Based on the statistics of the 1000 rows of data, the optimizer estimates that 499 rows of data are to be output."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"EST.TIME"}),(0,s.jsx)(n.td,{children:"The execution cost of the operator estimated by the optimizer, in microseconds. This column is for your reference only."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["In a table operation, the ",(0,s.jsx)(n.code,{children:"NAME"})," field displays names (alias) of tables involved in the operation. In the case of index access, the name of the index is displayed in parentheses after the table name. For example, ",(0,s.jsx)(n.code,{children:"t1(t1_c2)"})," indicates that index ",(0,s.jsx)(n.code,{children:"t1_c2"})," is used. In the case of reverse scanning, the keyword ",(0,s.jsx)(n.code,{children:"RESERVE"})," is added after the index name, with the index name and the keyword ",(0,s.jsx)(n.code,{children:"RESERVE"})," separated with a comma (,), such as ",(0,s.jsx)(n.code,{children:"t1(t1_c2,RESERVE)"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In OceanBase Database, the first part of the output of ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," is the tree structure of the execution plan. The hierarchy of operations in the tree is represented by the indentation of the operators. Operators at the deepest level are executed first. Operators at the same level are executed in the specified execution order. The following figure shows the tree structure of the execution plan described in the preceding example:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Plan display",src:t(29276).A+"",width:"957",height:"590"})}),"\n",(0,s.jsxs)(n.p,{children:["Operator 0 is a ",(0,s.jsx)(n.code,{children:"HASH JOIN"})," operator and has two subnodes: Operators 1 and 2, which are ",(0,s.jsx)(n.code,{children:"TABLE SCAN"})," operators. The execution logic of Operator 0 is as follows:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Read data from the subnode on the left to generate a hash value based on the join column, and then create a hash table."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Read data from the subnode on the right to generate a hash value based on the join column, and try to use the hash table created based on the data of the node on the left for hash probes to complete the join operation."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In OceanBase Database, the second part of the output of ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," contains the details of each operator, including the output expression, filter conditions, partition information, and unique information of each operator, such as the sort keys, join keys, and pushdown conditions. The second part is the same as the second half of the preceding plan."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:" Outputs & filters:                                                                 \n -------------------------------------                                              \n   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           \n       equal_conds([t1.c1 = t2.c1]), other_conds(nil)                               \n   1 - output([t1.c1], [t1.c2]), filter([t1.c1 > 10]), rowset=16                    \n       access([t1.c1], [t1.c2]), partitions(p0)                                     \n       is_index_back=false, is_global_index=false, filter_before_indexback[false],  \n       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  \n   2 - output([t2.c1], [t2.c2]), filter([t2.c1 > 10]), rowset=16                    \n       access([t2.c1], [t2.c2]), partitions(p0)                                     \n       is_index_back=false, is_global_index=false, filter_before_indexback[false],  \n       range_key([t2.__pk_increment]), range(MIN ; MAX)always true\n"})}),"\n",(0,s.jsx)(n.p,{children:"The second part describes the details of operators in the first part. The common information includes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"output"}),": The output expressions of the operator."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"filter"}),": The filter predicates of the operator. ",(0,s.jsx)(n.code,{children:"filter"})," is set to ",(0,s.jsx)(n.code,{children:"nil"})," if no filter condition is configured for the operator."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To better understand each operator in the plan described in the second part of output of ",(0,s.jsx)(n.code,{children:"EXPLAIN"}),", you must first get familiar with the purposes of the operators. For more information, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169820",children:"Execution plan operators"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to understand the operators in the preceding plan, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169820",children:"TABLE SCAN"})," and the ",(0,s.jsx)(n.strong,{children:"HASH JOIN"})," section in ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169814",children:"JOIN"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rowset=16"})," in the preceding plan is related to vectorized execution of the OceanBase Database execution engine. It specifies to calculate 16 rows of data at a time in a specific operator."]}),"\n",(0,s.jsxs)(n.p,{children:["You can specify ",(0,s.jsx)(n.code,{children:"_rowsets_enabled"})," to enable or disable vectorization. For example, the ",(0,s.jsx)(n.code,{children:"alter system set _rowsets_enabled = 0;"})," statement disables vectorization. You can also specify ",(0,s.jsx)(n.code,{children:"_rowsets_max_rows"})," to set the number of rows to be processed at a time in vectorized execution. For example, the ",(0,s.jsx)(n.code,{children:"alter system set_rowsets_max_rows = 4;"})," statement changes the number of rows to be processed at a time to ",(0,s.jsx)(n.code,{children:"4"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For more information about vectorization, see the ",(0,s.jsx)(n.strong,{children:"Vectorized execution"})," section in ",(0,s.jsx)(n.a,{href:"https://open.oceanbase.com/blog/7499489568",children:"Key Lightweight Data Warehouse Technologies of OceanBase Database"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXPLAIN EXTENDED_NOADDR"})," statement extends a plan to its full frame with the most details and is usually used in troubleshooting."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE `t1` (\n  `c1` int, `c2` int,\n  KEY `idx` (`c1`));\n\ninsert into t1 values(1, 2);\n\nexplain EXTENDED_NOADDR select * from t1 where c1 > 10;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| ===================================================                      |\n| |ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|                      |\n| ---------------------------------------------------                      |\n| |0 |TABLE RANGE SCAN|t1(idx)|1       |7           |                      |\n| ===================================================                      |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                   |\n|       access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)      |\n|       is_index_back=true, is_global_index=false,                         |\n|       range_key([t1.c1], [t1.__pk_increment]), range(10,MAX ; MAX,MAX),  |\n|       range_cond([t1.c1 > 10])                                           |\n| Used Hint:                                                               |\n| -------------------------------------                                    |\n|   /*+                                                                    |\n|                                                                          |\n|   */                                                                     |\n| Qb name trace:                                                           |\n| -------------------------------------                                    |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                         |\n|   stmt_id:1, SEL$1                                                       |\n| Outline Data:                                                            |\n| -------------------------------------                                    |\n|   /*+                                                                    |\n|       BEGIN_OUTLINE_DATA                                                 |\n|       INDEX(@"SEL$1" "test"." t1"@"SEL$1" "idx")                          |\n|       OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')                               |\n|       END_OUTLINE_DATA                                                   |\n|   */                                                                     |\n| Optimization Info:                                                       |\n| -------------------------------------                                    |\n|   t1:                                                                    |\n|       table_rows:1                                                       |\n|       physical_range_rows:1                                              |\n|       logical_range_rows:1                                               |\n|       index_back_rows:1                                                  |\n|       output_rows:1                                                      |\n|       table_dop:1                                                        |\n|       dop_method:Table DOP                                               |\n|       avaiable_index_name: [idx, t1]                                      |\n|       unstable_index_name: [t1]                                           |\n|       stats version:0                                                    |\n|       dynamic sampling level:0                                           |\n|   Plan Type:                                                             |\n|       LOCAL                                                              |\n|   Note:                                                                  |\n|       Degree of Parallelisim is 1 because of table property              |\n+--------------------------------------------------------------------------+\n47 rows in set\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The information in the ",(0,s.jsx)(n.code,{children:"Optimization Info"})," section helps you analyze performance issues of SQL statements. The following table describes the fields in the ",(0,s.jsx)(n.code,{children:"Optimization Info"})," section."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"table_rows"}),(0,s.jsxs)(n.td,{children:["The number of rows of the SSTable in the last major compaction version, which can be simply understood as the number of rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table. This field is for your reference only."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"physical_range_rows"}),(0,s.jsxs)(n.td,{children:["The number of physical rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table to be scanned. If an index is used, this field indicates the number of physical rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table to be scanned in the index."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"logical_range_rows"}),(0,s.jsxs)(n.td,{children:["The number of logical rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table to be scanned. If an index is used, this field indicates the number of logical rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table to be scanned in the index. In the preceding plan, the scan range is ",(0,s.jsx)(n.code,{children:"range(10,MAX ; MAX,MAX),range_cond([t1.c1 > 10])"})," because the index ",(0,s.jsx)(n.code,{children:"idx"})," is scanned. If no index is used, a full table scan is required. In this case, the scan range changes to ",(0,s.jsx)(n.code,{children:"range(MIN ; MAX)"}),". ",(0,s.jsxs)("blockquote",{children:[(0,s.jsx)(n.strong,{children:"Notice"}),(0,s.jsx)("br",{}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Generally, the values of ",(0,s.jsx)("code",{children:"physical_range_rows"})," and ",(0,s.jsx)("code",{children:"logical_range_rows"})," are close. You can use either one. However, in special buffer tables, the value of ",(0,s.jsx)("code",{children:"physical_range_rows"})," may be much larger than that of ",(0,s.jsx)("code",{children:"logical_range_rows"}),". "]}),(0,s.jsxs)("li",{children:["Data is frequently inserted to or deleted from buffer tables. If a large amount of incremental data is labeled as deleted in the LSM-tree architecture, few rows are actually available for upper-layer applications, and the labeled data may be processed during range queries. In this case, the value of ",(0,s.jsx)("code",{children:"physical_range_rows"})," may be much larger than that of ",(0,s.jsx)("code",{children:"logical_range_rows"}),", which results in long execution time of SQL queries. In the presence of buffer tables, the optimizer is prone to generate suboptimal execution plans. "]}),(0,s.jsxs)("li",{children:["For more information about the concept, detection logic, and troubleshooting methods for buffer tables, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169853",children:"Buffer tables"}),". "]})]})]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"index_back_rows"}),(0,s.jsxs)(n.td,{children:["The number of rows accessed by index primary key. The value ",(0,s.jsx)(n.code,{children:"0"})," indicates a full table scan or an index scan without table access by index primary key. For more information about table access by index primary key, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169820",children:"TABLE SCAN"}),". Simply put, the primary table needs to be accessed by index primary key in the preceding plan because the index ",(0,s.jsx)(n.code,{children:"idx"})," contains only the data of the ",(0,s.jsx)(n.code,{children:"c1"})," column and the data of the ",(0,s.jsx)(n.code,{children:"c2"})," column must be queried from the primary table based on the hidden primary keys of the primary table that correspond to the data filtered by the index. If the ",(0,s.jsx)(n.code,{children:"select c1 from t1 where c1 > 10"})," statement, rather than the ",(0,s.jsx)(n.code,{children:"select * from t1 where c1 > 10"})," statement, is executed, table access by index primary key is not required because the index contains all the information to be queried."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"output_rows"}),(0,s.jsxs)(n.td,{children:["The estimated number of output rows. In the preceding plan, this field indicates the number of rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table that are output after filtering."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"table_dop"}),(0,s.jsxs)(n.td,{children:["The degree of parallelism (DOP) for scanning the ",(0,s.jsx)(n.code,{children:"t1"})," table. The DOP indicates the number of worker threads used for parallel execution."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"dop_method"}),(0,s.jsxs)(n.td,{children:["The method for determining the DOP for scanning the table. The value ",(0,s.jsx)(n.code,{children:"TableDOP"})," indicates that the DOP is defined by the table. The value ",(0,s.jsx)(n.code,{children:"AutoDop"})," indicates that the DOP is selected by the optimizer based on the cost. In this case, the auto DOP feature must be enabled. The value ",(0,s.jsx)(n.code,{children:"global parallel"})," indicates that the DOP is specified by the ",(0,s.jsx)(n.code,{children:"PARALLEL"})," hint or a system variable."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"avaiable_index_name"}),(0,s.jsxs)(n.td,{children:["The list of indexes available for the ",(0,s.jsx)(n.code,{children:"t1"})," table. The list contains index tables and the primary table. If no suitable index is available, the plan executes a full table scan on the primary table."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"pruned_index_name"}),(0,s.jsxs)(n.td,{children:["The list of indexes pruned by the current query based on the rules of the optimizer. For more information about the index pruning rules of the optimizer, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001170726",children:"Rule-based path selection"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"unstable_index_name"}),(0,s.jsx)(n.td,{children:"The pruned primary table path. The primary table path is usually pruned if an index path involving fewer rows is available."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"stats version"}),(0,s.jsxs)(n.td,{children:["The version of statistics about the ",(0,s.jsx)(n.code,{children:"t1"})," table. The value ",(0,s.jsx)(n.code,{children:"0"})," indicates that no statistics are collected for the table. To ensure correct generation of a plan, statistics about the table can be automatically or manually collected."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"dynamic sampling level"}),(0,s.jsxs)(n.td,{children:["The level of dynamic sampling. The value ",(0,s.jsx)(n.code,{children:"0"})," indicates that dynamic sampling is not enabled for the table. ",(0,s.jsx)("br",{}),"Dynamic sampling is an optimization tool for the optimizer. For more information, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001170728",children:"Dynamic sampling"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"estimation method"}),(0,s.jsxs)(n.td,{children:["The method for estimating the number of rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table. The value ",(0,s.jsx)(n.code,{children:"DEFAULT"})," indicates that the number of rows is estimated based on default statistics. In this case, the estimated number of rows can be inaccurate and must be optimized by the database administrator (DBA). The value ",(0,s.jsx)(n.code,{children:"STORAGE"})," indicates that the number of rows is estimated in real time based on the storage layer. The value ",(0,s.jsx)(n.code,{children:"STATS"})," indicates that the number of rows is estimated based on statistics."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Plan Type"}),(0,s.jsxs)(n.td,{children:["The type of the current plan. Valid values: ",(0,s.jsx)(n.code,{children:"LOCAL"}),", ",(0,s.jsx)(n.code,{children:"REMOTE"}),", and ",(0,s.jsx)(n.code,{children:"DISTRIBUTED"}),". For more information, see the ",(0,s.jsx)(n.strong,{children:"Types of SQL execution plans"})," section in '7.2 Principles of ODP SQL routing'"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Note"}),(0,s.jsxs)(n.td,{children:["The additional information for generating the plan. For example, in the preceding plan, ",(0,s.jsx)(n.code,{children:"Degree of Parallelisim is 1 because of table property"})," indicates that the DOP of the current query is set to ",(0,s.jsx)(n.code,{children:"1"})," because the DOP of the current table is set to ",(0,s.jsx)(n.code,{children:"1"}),"."]})]})]})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXPLAIN EXTENDED"})," statement further returns the data storage addresses of expressions involved in the operators in addition to the information returned by the ",(0,s.jsx)(n.code,{children:"EXPLAIN EXTENDED_NOADDR"})," statement. It is usually used by OceanBase Technical Support and R&D engineers in troubleshooting. The syntax is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain EXTENDED select * from t1 where c1 > 10;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+---------------------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                          |\n+---------------------------------------------------------------------------------------------------------------------+\n| ===================================================                                                                 |\n| |ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|                                                                 |\n| ---------------------------------------------------                                                                 |\n| |0 |TABLE RANGE SCAN|t1(idx)|1       |7           |                                                                 |\n| ===================================================                                                                 |\n| Outputs & filters:                                                                                                  |\n| -------------------------------------                                                                               |\n|   0 - output([t1.c1(0x7fed4fe0df50)], [t1.c2(0x7fed4fe0e4c0)]), filter(nil), rowset=16                              |\n|       access([t1.__pk_increment(0x7fed4fe0e9d0)], [t1.c1(0x7fed4fe0df50)], [t1.c2(0x7fed4fe0e4c0)]), partitions(p0) |\n|       is_index_back=true, is_global_index=false,                                                                    |\n|       range_key([t1.c1(0x7fed4fe0df50)], [t1.__pk_increment(0x7fed4fe0e9d0)]), range(10,MAX ; MAX,MAX),             |\n|       range_cond([t1.c1(0x7fed4fe0df50) > 10(0x7fed4fe0d800)])                                                      |\n|                                                                                                                     |\n|       ......                                                                                                        |\n|                                                                                                                     |\n+---------------------------------------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"execution-plan-operators",children:"Execution plan operators"}),"\n",(0,s.jsxs)(n.p,{children:["For information about common operators, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169820",children:"Execution plan operators"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.p,{children:["We recommend that you get familiar with the ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169820",children:"TABLE SCAN"})," and ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169814",children:"JOIN"})," operators as well as DAS execution for the ",(0,s.jsx)(n.code,{children:"TABLE SCAN"})," operator."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This topic describes only the ",(0,s.jsx)(n.code,{children:"EXCHANGE"})," operators. The ",(0,s.jsx)(n.code,{children:"EXCHANGE"})," operators are commonly used in execution plans of OceanBase Database and not easy to understand. Therefore, this topic provides additional information based on related content in OceanBase Database documentation."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXCHANGE"})," operators exchange data between threads and usually appear in pairs, with an ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT"})," operator on the source side and an ",(0,s.jsx)(n.code,{children:"EXCHANGE IN"})," operator on the destination side. You can use the ",(0,s.jsx)(n.code,{children:"EXCHANGE"})," operators to gather, transmit, and repartition data."]}),"\n",(0,s.jsx)(n.h3,{id:"exchange-inexchange-out",children:"EXCHANGE IN/EXCHANGE OUT"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXCHANGE IN"})," and ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT"})," operators aggregate data from multiple partitions and send the aggregated data to the leader node involved in the query."]}),"\n",(0,s.jsxs)(n.p,{children:["The following query accesses five partitions: ",(0,s.jsx)(n.code,{children:"p0"}),", ",(0,s.jsx)(n.code,{children:"p1"}),", ",(0,s.jsx)(n.code,{children:"p2"}),", ",(0,s.jsx)(n.code,{children:"p3"}),", and ",(0,s.jsx)(n.code,{children:"p4"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t3 (c1 INT, c2 INT) PARTITION BY HASH(c1) PARTITIONS 5;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Execute the ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement to query the execution plan."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain select * from t3 where c1 > 10;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =============================================================                      |\n| |ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|                      |\n| -------------------------------------------------------------                      |\n| |0 |PX COORDINATOR           |        |1       |20          |                      |\n| |1 |\u2514\u2500EXCHANGE OUT DISTR     |:EX10000|1       |20          |                      |\n| |2 |  \u2514\u2500PX PARTITION ITERATOR|        |1       |19          |                      |\n| |3 |    \u2514\u2500TABLE FULL SCAN    |t3      |1       |19          |                      |\n| =============================================================                      |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([INTERNAL_FUNCTION(t3.c1, t3.c2)]), filter(nil), rowset=16            |\n|   1 - output([INTERNAL_FUNCTION(t3.c1, t3.c2)]), filter(nil), rowset=16            |\n|       dop=1                                                                        |\n|   2 - output([t3.c1], [t3.c2]), filter(nil), rowset=16                             |\n|       force partition granule                                                      |\n|   3 - output([t3.c1], [t3.c2]), filter([t3.c1 > 10]), rowset=16                    |\n|       access([t3.c1], [t3.c2]), partitions(p[0-4])                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t3.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"The operators in the plan are described as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 2 ",(0,s.jsx)(n.code,{children:"PX PARTITION ITERATOR"})," iterates data by partition. For information about granule iterator (GI) operators, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001169827",children:"GI"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 1 ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT DISTR"})," receives the output of Operator 2 ",(0,s.jsx)(n.code,{children:"PX PARTITION ITERATOR"})," and sends the data out."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 0 ",(0,s.jsx)(n.code,{children:"PX COORDINATOR"})," receives the output of Operator 1 from multiple partitions, aggregates them, and returns the result. ",(0,s.jsx)(n.code,{children:"PX COORDINATOR"})," is a special type of ",(0,s.jsx)(n.code,{children:"EXCHANGE IN"})," operator, and is responsible for not only pulling back remote data, but also scheduling the execution of sub-plans."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"exchange-inexchange-out-remote",children:"EXCHANGE IN/EXCHANGE OUT (REMOTE)"}),"\n",(0,s.jsxs)(n.p,{children:["OceanBase Database supports local, remote, and distributed plans. For more information, see '7.2 Principles of ODP SQL routing'. The ",(0,s.jsx)(n.code,{children:"EXCHANGE IN REMOTE"})," and ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT REMOTE"})," operators are used in a remote plan to pull remote data in a single partition back to the local node."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example: A cluster is created in the 1-1-1 architecture, where the cluster has three zones and each zone has one node. The three zones are denoted as ",(0,s.jsx)(n.code,{children:"zone1"}),", ",(0,s.jsx)(n.code,{children:"zone2"}),", and ",(0,s.jsx)(n.code,{children:"zone3"}),", and the three nodes are denoted as ",(0,s.jsx)(n.code,{children:"A"}),", ",(0,s.jsx)(n.code,{children:"B"}),", and ",(0,s.jsx)(n.code,{children:"C"}),". ",(0,s.jsx)(n.code,{children:"primary_zone"})," is set to ",(0,s.jsx)(n.code,{children:"zone1"})," for a tenant, and the leaders of all tables of the tenant are stored on node ",(0,s.jsx)(n.code,{children:"A"})," in ",(0,s.jsx)(n.code,{children:"zone1"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"local-plan",children:"Local plan"}),"\n",(0,s.jsxs)(n.p,{children:["If you directly connect to node ",(0,s.jsx)(n.code,{children:"A"})," to perform calculation for two non-partitioned tables, a local plan will be generated because the leaders of the two tables are stored on the local node. A sample plan is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table t1(c1 int, c2 int);\n\ncreate table t2(c1 int, c2 int);\n\nexplain select * from t1, t2 where t1.c1 = t2.c1 and t1.c1 > 10;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |\u251c\u2500TABLE FULL SCAN|t1  |1       |4           |                                  |\n| |2 |\u2514\u2500TABLE FULL SCAN|t2  |1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters: Omitted                                                              |\n"})}),"\n",(0,s.jsx)(n.h4,{id:"remote-plan",children:"Remote plan"}),"\n",(0,s.jsxs)(n.p,{children:["If you directly connect to node ",(0,s.jsx)(n.code,{children:"B"})," to perform calculation for two non-partitioned tables, a remote plan will be generated because the leaders of the two tables are not stored on the local node. A sample plan is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"explain select * from t1, t2 where t1.c1 = t2.c1 and t1.c1 > 10;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =====================================================                              |\n| |ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|                              |\n| -----------------------------------------------------                              |\n| |0 |EXCHANGE IN REMOTE   |    |1       |11          |                              |\n| |1 |\u2514\u2500EXCHANGE OUT REMOTE|    |1       |10          |                              |\n| |2 |  \u2514\u2500HASH JOIN        |    |1       |9           |                              |\n| |3 |    \u251c\u2500TABLE FULL SCAN|t1  |1       |4           |                              |\n| |4 |    \u2514\u2500TABLE FULL SCAN|t2  |1       |4           |                              |\n| =====================================================                              |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil)                      |\n|   1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil)                      |\n|   2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c1 = t2.c1]), other_conds(nil)                               |\n|   3 - output([t1.c1], [t1.c2]), filter([t1.c1 > 10]), rowset=16                    |\n|       access([t1.c1], [t1.c2]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n|   4 - output([t2.c1], [t2.c2]), filter([t2.c1 > 10]), rowset=16                    |\n|       access([t2.c1], [t2.c2]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n23 rows in set\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXCHANGE IN REMOTE"})," and ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT REMOTE"})," operators in the remote plan pull remote data in a single partition back to the local node."]}),"\n",(0,s.jsx)(n.p,{children:"In this case, Operators 0 and 1 are assigned to the execution plan to fetch remote data. The operators in the plan are described as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operators 2 to 4 are executed on node ",(0,s.jsx)(n.code,{children:"A"})," to read data from the storage layer and complete the ",(0,s.jsx)(n.code,{children:"HASH JOIN"})," operation."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 1 ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT REMOTE"})," is also executed on node ",(0,s.jsx)(n.code,{children:"A"})," to read the result data calculated by Operator 2 ",(0,s.jsx)(n.code,{children:"HASH JOIN"})," and send the data to Operator 0."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 0 ",(0,s.jsx)(n.code,{children:"EXCHANGE IN REMOTE"})," is executed on node ",(0,s.jsx)(n.code,{children:"B"})," to receive the output of Operator 1."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"exchange-inexchange-out-pkey",children:"EXCHANGE IN/EXCHANGE OUT (PKEY)"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EXCHANGE IN/EXCHANGE OUT (PKEY)"})," operators repartition data. They are generally used with a binary operator pair, such as a ",(0,s.jsx)(n.code,{children:"JOIN"})," operator pair, to repartition the data of the left-side subnode by using the partitioning method of the right-side subnode and then send the repartitioned data to the OBServer node where the partition corresponding to the right-side subnode resides."]}),"\n",(0,s.jsx)(n.p,{children:"In the following example, the query joins two partitioned tables."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t1 (c1 INT, c2 INT) PARTITION BY HASH(c1) PARTITIONS 5;\n\nCREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT) PARTITION BY HASH(c1) PARTITIONS 4;\n\nEXPLAIN SELECT * FROM t1, t2 WHERE t1.c1 = t2.c1;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =====================================================================                 |\n| |ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|                 |\n| ---------------------------------------------------------------------                 |\n| |0 |PX COORDINATOR                   |        |1       |38          |                 |\n| |1 |\u2514\u2500EXCHANGE OUT DISTR             |:EX10001|1       |37          |                 |\n| |2 |  \u2514\u2500HASH JOIN                    |        |1       |36          |                 |\n| |3 |    \u251c\u2500EXCHANGE IN DISTR          |        |1       |20          |                 |\n| |4 |    \u2502 \u2514\u2500EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |20          |                 |\n| |5 |    \u2502   \u2514\u2500PX PARTITION ITERATOR  |        |1       |19          |                 |\n| |6 |    \u2502     \u2514\u2500TABLE FULL SCAN      |t1      |1       |19          |                 |\n| |7 |    \u2514\u2500PX PARTITION ITERATOR      |        |1       |16          |                 |\n| |8 |      \u2514\u2500TABLE FULL SCAN          |t2      |1       |16          |                 |\n| =====================================================================                 |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, t2.c1, t2.c2)]), filter(nil), rowset=16 |\n|   1 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, t2.c1, t2.c2)]), filter(nil), rowset=16 |\n|       dop=1                                                                           |\n|   2 - output([t1.c1], [t2.c1], [t1.c2], [t2.c2]), filter(nil), rowset=16              |\n|       equal_conds([t1.c1 = t2.c1]), other_conds(nil)                                  |\n|   3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|   4 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       (#keys=1, [t1.c1]), dop=1                                                       |\n|   5 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       force partition granule                                                         |\n|   6 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       access([t1.c1], [t1.c2]), partitions(p[0-4])                                    |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                     |\n|   7 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|       affinitize, force partition granule                                             |\n|   8 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|       access([t2.c1], [t2.c2]), partitions(p[0-3])                                    |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.c1]), range(MIN ; MAX)always true                                 |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The execution plan repartitions the data of the ",(0,s.jsx)(n.code,{children:"t1"})," table by using the partitioning method of the ",(0,s.jsx)(n.code,{children:"t2"})," table."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 4 ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT DISTR (PKEY)"})," determines the destination node for every row of the ",(0,s.jsx)(n.code,{children:"t1"})," table based on the partitioning method of the ",(0,s.jsx)(n.code,{children:"t2"})," table and the join condition of the query, and sends the rows of the ",(0,s.jsx)(n.code,{children:"t1"})," table to corresponding nodes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 3 ",(0,s.jsx)(n.code,{children:"EXCHANGE IN DISTR"})," receives the data of the ",(0,s.jsx)(n.code,{children:"t1"})," table on corresponding nodes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 2 ",(0,s.jsx)(n.code,{children:"HASH JOIN"})," executes a ",(0,s.jsx)(n.code,{children:"JOIN"})," operation on each node to join the data iterated by Operator 7 and the data received by Operator 3. The data iterated by Operator 7 includes the data of all partitions of the ",(0,s.jsx)(n.code,{children:"t2"})," table. The data received by Operator 3 includes the data of the ",(0,s.jsx)(n.code,{children:"t1"})," table that is repartitioned based on the partitioning rules of the ",(0,s.jsx)(n.code,{children:"t2"})," table."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 1 ",(0,s.jsx)(n.code,{children:"EXCHANGE OUT DISTR"})," sends the join results to Operator 0."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Operator 0 ",(0,s.jsx)(n.code,{children:"PX COORDINATOR"})," receives and summarizes the join results from all nodes."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The optimizer also generates the ",(0,s.jsx)(n.code,{children:"EXCHANGE IN/EXCHANGE OUT (HASH)"})," and ",(0,s.jsx)(n.code,{children:"EXCHANGE IN/EXCHANGE OUT (BC2HOST)"})," operators based on different repartitioning methods for different SQL queries. For more information about repartitioning methods, see the ",(0,s.jsx)(n.strong,{children:"Data distribution methods between the producer and the consumer"})," section in ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001378041",children:"Introduction to parallel execution"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"use-hints-to-generate-a-plan",children:"Use hints to generate a plan"}),"\n",(0,s.jsx)(n.p,{children:"You can use hints to make the optimizer generate a specified execution plan. Generally, the optimizer will select the optimal execution plan for a query and you do not need to use a hint to specify an execution plan. However, in some scenarios, the execution plan generated by the optimizer may not meet your requirements. In this case, you need to use a hint to specify an execution plan to be generated."}),"\n",(0,s.jsx)(n.h3,{id:"hint-syntax",children:"Hint syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"{ DELETE | INSERT | SELECT | UPDATE | REPLACE } /*+ [hint_text][,hint_text]... */\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the following query, the ",(0,s.jsx)(n.code,{children:"/*+ PARALLEL(3)*/"})," hint sets the DOP of SQL execution to ",(0,s.jsx)(n.code,{children:"3"}),". The ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement returns ",(0,s.jsx)(n.code,{children:"dop=3"}),", and the ",(0,s.jsx)(n.code,{children:"explain EXTENDED_NOADDR"})," statement additionally returns ",(0,s.jsx)(n.code,{children:"Note: Degree of Parallelism is 3 because of hint"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create t1 (c1 int, c2 int) PARTITION BY HASH(c1) PARTITIONS 5;\n\nexplain EXTENDED_NOADDR select /*+ PARALLEL(3) */* from t1 where c1 > 10;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| ==========================================================               |\n| |ID|OPERATOR              |NAME    |EST.ROWS|EST.TIME(us)|               |\n| ----------------------------------------------------------               |\n| |0 |PX COORDINATOR        |        |1       |3           |               |\n| |1 |\u2514\u2500EXCHANGE OUT DISTR  |:EX10000|1       |3           |               |\n| |2 |  \u2514\u2500PX BLOCK ITERATOR |        |1       |3           |               |\n| |3 |    \u2514\u2500TABLE RANGE SCAN|t1(idx) |1       |3           |               |\n| ==========================================================               |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([INTERNAL_FUNCTION(t1.c1, t1.c2)]), filter(nil), rowset=16  |\n|   1 - output([INTERNAL_FUNCTION(t1.c1, t1.c2)]), filter(nil), rowset=16  |\n|       dop=3                                                              |\n|   2 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                   |\n|   3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                   |\n|       access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)      |\n|       is_index_back=true, is_global_index=false,                         |\n|       range_key([t1.c1], [t1.__pk_increment]), range(10,MAX ; MAX,MAX),  |\n|       range_cond([t1.c1 > 10])                                           |\n| Used Hint:                                                               |\n| -------------------------------------                                    |\n|   /*+                                                                    |\n|       PARALLEL(3)                                                        |\n|   */                                                                     |\n|                                                                          |\n|   ......                                                                 |\n|                                                                          |\n|   Note:                                                                  |\n|       Degree of Parallelism is 3 because of hint                         |\n+--------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A hint is a special SQL comment in terms of syntax, because a plus sign (",(0,s.jsx)(n.code,{children:"+"}),") is added to the opening tag (",(0,s.jsx)(n.code,{children:"/*"}),") of the comment. If the OBServer node does not recognize the hint in an SQL statement due to syntax errors, the optimizer ignores the specified hint and generates a default execution plan. In addition, the hint only affects the execution plan generated by the optimizer. The semantics of the SQL statement remains unaffected."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to execute SQL statements containing hints in a MySQL client, you must log on to the client by using the ",(0,s.jsx)(n.code,{children:"-c"})," option. Otherwise, the MySQL client will remove the hints from the SQL statements as comments, and the system cannot receive the hints."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hint-parameters",children:"Hint parameters"}),"\n",(0,s.jsx)(n.p,{children:"The following table describes the name, syntax, and description of the hint parameters."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Parameter"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Syntax"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NO_REWRITE"}),(0,s.jsx)(n.td,{children:"NO_REWRITE"}),(0,s.jsx)(n.td,{children:"Specifies to prohibit SQL rewrite."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"READ_CONSISTENCY"}),(0,s.jsx)(n.td,{children:"READ_CONSISTENCY(WEAK [STRONG])"}),(0,s.jsx)(n.td,{children:"Sets the read consistency (weak/strong)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"INDEX_HINT"}),(0,s.jsx)(n.td,{children:"INDEX(table_name index_name)"}),(0,s.jsx)(n.td,{children:"Sets the table index."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"QUERY_TIMEOUT"}),(0,s.jsx)(n.td,{children:"QUERY_TIMEOUT(INTNUM)"}),(0,s.jsx)(n.td,{children:"Sets the statement timeout value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"LOG_LEVEL"}),(0,s.jsx)(n.td,{children:"LOG_LEVEL([']log_level['])"}),(0,s.jsxs)(n.td,{children:["Sets the log level. A module-level statement starts and ends with an apostrophe (",(0,s.jsx)(n.code,{children:"'"}),"), for example, 'DEBUG'."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"LEADING"}),(0,s.jsx)(n.td,{children:"LEADING([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Sets the join order."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ORDERED"}),(0,s.jsx)(n.td,{children:"ORDERED"}),(0,s.jsx)(n.td,{children:"Specifies to join tables by the order in the SQL statement."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FULL"}),(0,s.jsx)(n.td,{children:"FULL([qb_name] TBL_NAME)"}),(0,s.jsxs)(n.td,{children:["Specifies that the primary access path is equivalent to ",(0,s.jsx)(n.code,{children:"INDEX(TBL_NAME PRIMARY)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_PLAN_CACHE"}),(0,s.jsx)(n.td,{children:"USE_PLAN_CACHE(NONE[DEFAULT])"}),(0,s.jsxs)(n.td,{children:["Specifies whether to use the plan cache. Valid values: ",(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"NONE"}),": specifies not to use the plan cache. "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.code,{children:"DEFAULT"}),": specifies to use or not to use the scheduled cache based on the server settings. "]})]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_MERGE"}),(0,s.jsx)(n.td,{children:"USE_MERGE([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Specifies to use a merge join when the specified table is a right-side table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_HASH"}),(0,s.jsx)(n.td,{children:"USE_HASH([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Specifies to use a hash join when the specified table is a right-side table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NO_USE_HASH"}),(0,s.jsx)(n.td,{children:"NO_USE_HASH([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Specifies not to use a hash join when the specified table is a right-side table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_NL"}),(0,s.jsx)(n.td,{children:"USE_NL([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Specifies to use a nested loop join when the specified table is a right-side table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_BNL"}),(0,s.jsx)(n.td,{children:"USE_BNL([qb_name] TBL_NAME_LIST)"}),(0,s.jsx)(n.td,{children:"Specifies to use a block nested loop join when the specified table is a right-side table."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_HASH_AGGREGATION"}),(0,s.jsx)(n.td,{children:"USE_HASH_AGGREGATION([qb_name])"}),(0,s.jsxs)(n.td,{children:["Sets the aggregation algorithm to a hash algorithm, such as ",(0,s.jsx)(n.code,{children:"HASH GROUP BY"})," or ",(0,s.jsx)(n.code,{children:"HASH DISTINCT"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NO_USE_HASH_AGGREGATION"}),(0,s.jsx)(n.td,{children:"NO_USE_HASH_AGGREGATION([qb_name])"}),(0,s.jsxs)(n.td,{children:["Specifies to use ",(0,s.jsx)(n.code,{children:"MERGE GROUP BY"})," or ",(0,s.jsx)(n.code,{children:"MERGE DISTINCT"}),", rather than a hash aggregate algorithm, as the method to aggregate data."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"USE_LATE_MATERIALIZATION"}),(0,s.jsx)(n.td,{children:"USE_LATE_MATERIALIZATION"}),(0,s.jsxs)(n.td,{children:["Specifies to use ",(0,s.jsx)(n.code,{children:"LATE MATERIALIZATION"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NO_USE_LATE_MATERIALIZATION"}),(0,s.jsx)(n.td,{children:"NO_USE_LATE_MATERIALIZATION"}),(0,s.jsxs)(n.td,{children:["Specifies not to use ",(0,s.jsx)(n.code,{children:"LATE MATERIALIZATION"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TRACE_LOG"}),(0,s.jsx)(n.td,{children:"TRACE_LOG"}),(0,s.jsxs)(n.td,{children:["Specifies to collect the trace log for ",(0,s.jsx)(n.code,{children:"SHOW TRACE"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"QB_NAME"}),(0,s.jsx)(n.td,{children:"QB_NAME( NAME )"}),(0,s.jsx)(n.td,{children:"Sets the name of the query block."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PARALLEL"}),(0,s.jsx)(n.td,{children:"PARALLEL(INTNUM)"}),(0,s.jsx)(n.td,{children:"Sets the degree of parallelism (DOP) for distributed execution."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TOPK"}),(0,s.jsx)(n.td,{children:"TOPK(PRECISION MINIMUM_ROWS)"}),(0,s.jsxs)(n.td,{children:["Specifies the precision and the minimum number of rows of a fuzzy query. The value of ",(0,s.jsx)(n.code,{children:"PRECISION"})," is an integer within the range of [0, 100], which means the percentage of rows queried in a fuzzy query. ",(0,s.jsx)(n.code,{children:"MINIMUM_ROWS"})," specifies the minimum number of returned rows."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MAX_CONCURRENT"}),(0,s.jsx)(n.td,{children:"MAX_CONCURRENT(n)"}),(0,s.jsx)(n.td,{children:"Specifies the maximum DOP for the SQL statement."})]})]})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The syntax of ",(0,s.jsx)(n.code,{children:"QB_NAME"})," is ",(0,s.jsx)(n.code,{children:"@NAME"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The syntax of ",(0,s.jsx)(n.code,{children:"TBL_NAME"})," is ",(0,s.jsx)(n.code,{children:"[db_name.]relation_name [qb_name]"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"qb_name",children:"QB_NAME"}),"\n",(0,s.jsxs)(n.p,{children:["In DML statements, each query block has a query block name indicated by ",(0,s.jsx)(n.code,{children:"QB_NAME"}),", which can be specified or automatically generated by the system. Each query block is a semantically complete query statement. Simply put, ",(0,s.jsx)(n.code,{children:"SELECT"}),", ",(0,s.jsx)(n.code,{children:"DELETE"}),", and similar keywords are extracted from SQL statements, structured, and then identified from left to right."]}),"\n",(0,s.jsxs)(n.p,{children:["If you do not use a hint to specify ",(0,s.jsx)(n.code,{children:"QB_NAME"}),", the system generates the names such as ",(0,s.jsx)(n.code,{children:"SEL$1"}),", ",(0,s.jsx)(n.code,{children:"SEL$2"}),", ",(0,s.jsx)(n.code,{children:"UPD$1"}),", and ",(0,s.jsx)(n.code,{children:"DEL$1"})," from left to right, which is the operation order of the resolver."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"QB_NAME"})," to accurately locate every table and specify the behavior of any query block at one position. ",(0,s.jsx)(n.code,{children:"QB_NAME"})," in ",(0,s.jsx)(n.code,{children:"TBL_NAME"})," is used to locate the table, and the first query block name in the hint is used to locate the query block to which the hint applies."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the following rules apply to the ",(0,s.jsx)(n.code,{children:"SELECT *FROM t1, (SELECT* FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;"})," statement by default:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The first query block ",(0,s.jsx)(n.code,{children:"SEL$1"})," is the outermost statement: ",(0,s.jsx)(n.code,{children:"SELECT * FROM t1, VIEW1 WHERE t1.c1 = 1"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The second query block ",(0,s.jsx)(n.code,{children:"SEL$2"})," is ",(0,s.jsx)(n.code,{children:"ANONYMOUS_VIEW1"})," in the plan: ",(0,s.jsx)(n.code,{children:"SELECT * FROM t2 WHERE c2 = 1 LIMIT 5"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The optimizer selects the index ",(0,s.jsx)(n.code,{children:"t1_c1"})," for the ",(0,s.jsx)(n.code,{children:"t1"})," table in ",(0,s.jsx)(n.code,{children:"SEL$1"})," and primary table access for the ",(0,s.jsx)(n.code,{children:"t2"})," table in ",(0,s.jsx)(n.code,{children:"SEL$2"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE t1(c1 INT, c2 INT, KEY t1_c1(c1));\n\nCREATE TABLE t2(c1 INT, c2 INT, KEY t2_c1(c1));\n\nEXPLAIN EXTENDED_NOADDR SELECT * FROM t1, (SELECT * FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;\n+-----------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                |\n+-----------------------------------------------------------------------------------------------------------+\n| ======================================================================                                    |\n| |ID|OPERATOR                   |NAME           |EST.ROWS|EST.TIME(us)|                                    |\n| ----------------------------------------------------------------------                                    |\n| |0 |NESTED-LOOP JOIN CARTESIAN |               |1       |11          |                                    |\n| |1 |\u251c\u2500TABLE RANGE SCAN         |t1(t1_c1)      |1       |7           |                                    |\n| |2 |\u2514\u2500MATERIAL                 |               |1       |4           |                                    |\n| |3 |  \u2514\u2500SUBPLAN SCAN           |ANONYMOUS_VIEW1|1       |4           |                                    |\n| |4 |    \u2514\u2500TABLE FULL SCAN      |t2             |1       |4           |                                    |\n| ======================================================================                                    |\n| Outputs & filters:                                                                                        |\n| -------------------------------------                                                                     |\n|   0 - output([t1.c1], [t1.c2], [.c1], [.c2]), filter(nil), rowset=16                                      |\n|       conds(nil), nl_params_(nil), use_batch=false                                                        |\n|   1 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                                    |\n|       access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)                                       |\n|       is_index_back=true, is_global_index=false,                                                          |\n|       range_key([t1.c1], [t1.__pk_increment]), range(1,MIN ; 1,MAX),                                      |\n|       range_cond([t1.c1 = 1])                                                                             |\n|   2 - output([.c1], [.c2]), filter(nil), rowset=16                                                        |\n|   3 - output([.c1], [.c2]), filter(nil), rowset=16                                                        |\n|       access([.c1], [.c2])                                                                                |\n|   4 - output([t2.c1], [t2.c2]), filter([t2.c2 = 1]), rowset=16                                            |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                                            |\n|       limit(5), offset(nil), is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                                         |\n| Used Hint:                                                                                                |\n| -------------------------------------                                                                     |\n|   /*+                                                                                                     |\n|                                                                                                           |\n|   */                                                                                                      |\n| Qb name trace:                                                                                            |\n| -------------------------------------                                                                     |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                                          |\n|   stmt_id:1, SEL$1                                                                                        |\n|   stmt_id:2, SEL$2                                                                                        |\n| Outline Data:                                                                                             |\n| -------------------------------------                                                                     |\n|   /*+                                                                                                     |\n|       BEGIN_OUTLINE_DATA                                                                                  |\n|       LEADING(@"SEL$1" ("test"." t1"@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1"))                                   |\n|       USE_NL(@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1")                                                          |\n|       USE_NL_MATERIALIZATION(@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1")                                          |\n|       INDEX(@"SEL$1" "test"." t1"@"SEL$1" "t1_c1")                                                         |\n|       FULL(@"SEL$2" "test"." t2"@"SEL$2")                                                                  |\n|       OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')                                                                |\n|       END_OUTLINE_DATA                                                                                    |\n|   */                                                                                                      |\n|   ......                                                                                                  |\n+-----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The following example uses a hint in an SQL statement to specify the access method of the ",(0,s.jsx)(n.code,{children:"t1"})," table in ",(0,s.jsx)(n.code,{children:"SEL$1"})," to primary table access, and that of the ",(0,s.jsx)(n.code,{children:"t2"})," table in ",(0,s.jsx)(n.code,{children:"SEL$2"})," to index access."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'EXPLAIN EXTENDED_NOADDR\nSELECT /*+ INDEX(@SEL$1 t1 PRIMARY) INDEX(@SEL$2 t2 t2_c1) */ *\nFROM t1 , (SELECT * FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;\n+----------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                               |\n+----------------------------------------------------------------------------------------------------------+\n| ======================================================================                                   |\n| |ID|OPERATOR                   |NAME           |EST.ROWS|EST.TIME(us)|                                   |\n| ----------------------------------------------------------------------                                   |\n| |0 |NESTED-LOOP JOIN CARTESIAN |               |1       |11          |                                   |\n| |1 |\u251c\u2500TABLE FULL SCAN          |t1             |1       |4           |                                   |\n| |2 |\u2514\u2500MATERIAL                 |               |1       |7           |                                   |\n| |3 |  \u2514\u2500SUBPLAN SCAN           |ANONYMOUS_VIEW1|1       |7           |                                   |\n| |4 |    \u2514\u2500TABLE FULL SCAN      |t2(t2_c1)      |1       |7           |                                   |\n| ======================================================================                                   |\n| Outputs & filters:                                                                                       |\n| -------------------------------------                                                                    |\n|   0 - output([t1.c1], [t1.c2], [.c1], [.c2]), filter(nil), rowset=16                                     |\n|       conds(nil), nl_params_(nil), use_batch=false                                                       |\n|   1 - output([t1.c1], [t1.c2]), filter([t1.c1 = 1]), rowset=16                                           |\n|       access([t1.c1], [t1.c2]), partitions(p0)                                                           |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],                        |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                                        |\n|   2 - output([.c1], [.c2]), filter(nil), rowset=16                                                       |\n|   3 - output([.c1], [.c2]), filter(nil), rowset=16                                                       |\n|       access([.c1], [.c2])                                                                               |\n|   4 - output([t2.c1], [t2.c2]), filter([t2.c2 = 1]), rowset=16                                           |\n|       access([t2.__pk_increment], [t2.c2], [t2.c1]), partitions(p0)                                      |\n|       limit(5), offset(nil), is_index_back=true, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.c1], [t2.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true                       |\n| Used Hint:                                                                                               |\n| -------------------------------------                                                                    |\n|   /*+                                                                                                    |\n|                                                                                                          |\n|       INDEX("t1" "primary")                                                                              |\n|       INDEX(@"SEL$2" "t2" "t2_c1")                                                                       |\n|   */                                                                                                     |\n| Qb name trace:                                                                                           |\n| -------------------------------------                                                                    |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                                         |\n|   stmt_id:1, SEL$1                                                                                       |\n|   stmt_id:2, SEL$2                                                                                       |\n| Outline Data:                                                                                            |\n| -------------------------------------                                                                    |\n|   /*+                                                                                                    |\n|       BEGIN_OUTLINE_DATA                                                                                 |\n|       LEADING(@"SEL$1" ("test"." t1"@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1"))                                  |\n|       USE_NL(@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1")                                                         |\n|       USE_NL_MATERIALIZATION(@"SEL$1" "ANONYMOUS_VIEW1"@"SEL$1")                                         |\n|       FULL(@"SEL$1" "test"." t1"@"SEL$1")                                                                 |\n|       INDEX(@"SEL$2" "test"." t2"@"SEL$2" "t2_c1")                                                        |\n|       OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')                                                               |\n|       END_OUTLINE_DATA                                                                                   |\n|   */                                                                                                     |\n|   ......                                                                                                 |\n+----------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can observe the changes in the ",(0,s.jsx)(n.code,{children:"Query Plan"})," and ",(0,s.jsx)(n.code,{children:"Outline Data"})," sections after the hint ",(0,s.jsx)(n.code,{children:"/*+ INDEX(t1 PRIMARY) INDEX(@SEL$2 t2 t2_c1)*/"})," is specified and determine whether the changes are expected."]}),"\n",(0,s.jsx)(n.p,{children:"You can also rewrite the preceding hint in the following three ways, which are equivalent:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Method 1:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT /*+INDEX(@SEL$1 t1 PRIMARY) INDEX(@SEL$2 t2 t2_c1)*/ * FROM t1 , (SELECT * FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Method 2:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT /*+INDEX(t1 PRIMARY) INDEX(@SEL$2 t2@SEL$2 t2_c1)*/ * FROM t1 , (SELECT * FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Method 3:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT /*+INDEX(t1 PRIMARY)*/ * FROM t1 , (SELECT /*+INDEX(t2 t2_c1)*/ * FROM t2 WHERE c2 = 1 LIMIT 5) WHERE t1.c1 = 1;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"usage-rules-of-hints",children:"Usage rules of hints"}),"\n",(0,s.jsx)(n.p,{children:"Observe the following rules when you use hints:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A hint applies to the query block where it resides, if no query block is specified."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Example 1: The hint cannot take effect because it is written in query block 1 but the ",(0,s.jsx)(n.code,{children:"t2"})," table resides in query block 2 and the optimizer cannot relocate the ",(0,s.jsx)(n.code,{children:"t2"})," table in ",(0,s.jsx)(n.code,{children:"SEL$2"})," to ",(0,s.jsx)(n.code,{children:"SEL$1"})," by rewriting the SQL statement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT /*+INDEX(t2 t2_c1)*/ *\n        FROM t1 , (SELECT * FROM t2 WHERE c2 = 1 LIMIT 5)\n        WHERE t1.c1 = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                |\n+-----------------------------------------------------------------------------------------------------------+\n| ======================================================================                                    |\n| |ID|OPERATOR                   |NAME           |EST.ROWS|EST.TIME(us)|                                    |\n| ----------------------------------------------------------------------                                    |\n| |0 |NESTED-LOOP JOIN CARTESIAN |               |1       |11          |                                    |\n| |1 |\u251c\u2500TABLE RANGE SCAN         |t1(t1_c1)      |1       |7           |                                    |\n| |2 |\u2514\u2500MATERIAL                 |               |1       |4           |                                    |\n| |3 |  \u2514\u2500SUBPLAN SCAN           |ANONYMOUS_VIEW1|1       |4           |                                    |\n| |4 |    \u2514\u2500TABLE FULL SCAN      |t2             |1       |4           |                                    |\n| ======================================================================                                    |\n| ......                                                                                                    |\n+-----------------------------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Example 2: The hint takes effect because the optimizer can relocate the ",(0,s.jsx)(n.code,{children:"t2"})," table to ",(0,s.jsx)(n.code,{children:"SEL$1"})," by rewriting the SQL statement. In the following plan, the original SQL statement is rewritten into one without an anonymous view: ",(0,s.jsx)(n.code,{children:"SELECT /*+INDEX(t2 t2_c1)*/ * FROM t1, t2 WHERE t1.c1 = 1 and t2.c2 = 1;"}),". In the rewritten SQL statement, the hint takes effect because the ",(0,s.jsx)(n.code,{children:"t2"})," table is relocated to the outermost query block ",(0,s.jsx)(n.code,{children:"SEL$1"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT /*+ INDEX(t2 t2_c1) */ *\n        FROM t1 , (SELECT * FROM t2 WHERE c2 = 1)\n        WHERE t1.c1 = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| ================================================================                   |\n| |ID|OPERATOR                   |NAME     |EST.ROWS|EST.TIME(us)|                   |\n| ----------------------------------------------------------------                   |\n| |0 |NESTED-LOOP JOIN CARTESIAN |         |1       |13          |                   |\n| |1 |\u251c\u2500TABLE RANGE SCAN         |t1(t1_c1)|1       |7           |                   |\n| |2 |\u2514\u2500MATERIAL                 |         |1       |7           |                   |\n| |3 |  \u2514\u2500TABLE FULL SCAN        |t2(t2_c1)|1       |7           |                   |\n| ================================================================                   |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       conds(nil), nl_params_(nil), use_batch=false                                 |\n|   1 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                             |\n|       access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)                |\n|       is_index_back=true, is_global_index=false,                                   |\n|       range_key([t1.c1], [t1.__pk_increment]), range(1,MIN ; 1,MAX),               |\n|       range_cond([t1.c1 = 1])                                                      |\n|   2 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                             |\n|   3 - output([t2.c2], [t2.c1]), filter([t2.c2 = 1]), rowset=16                     |\n|       access([t2.__pk_increment], [t2.c2], [t2.c1]), partitions(p0)                |\n|       is_index_back=true, is_global_index=false, filter_before_indexback[false],   |\n|       range_key([t2.c1], [t2.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true |\n+------------------------------------------------------------------------------------+\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"If a table is specified but is not found in the query block where the hint resides, or a conflict occurs, the hint is invalid."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-hints",children:"Common hints"}),"\n",(0,s.jsx)(n.p,{children:"Compared with the optimizer behaviors of other databases, the behaviors of the OceanBase Database optimizer are dynamically planned, and all possible optimal paths have been considered. Hints are mainly used to specify the behavior of the optimizer, and SQL queries are executed based on the hints. This section describes the most commonly used hints."}),"\n",(0,s.jsx)(n.h4,{id:"index-hint",children:"INDEX hint"}),"\n",(0,s.jsxs)(n.p,{children:["The syntax of the ",(0,s.jsx)(n.code,{children:"INDEX"})," hint is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT/*+ INDEX(table_name index_name) */ * FROM table_name;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If the SQL syntax contains ",(0,s.jsx)(n.code,{children:"table_name [AS] alias"}),", you must specify a table alias for an ",(0,s.jsx)(n.code,{children:"INDEX"})," hint to take effect. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table t1(c1 int, c2 int, c3 int);\n\ncreate index idx1 on t1(c1);\n\ncreate index idx2 on t1(c2);\n\n-- Insert 1000 rows of test data.\ninsert into t1 with recursive cte(n) as (select 1 from dual union all select n + 1 from cte where n < 1000) select n, mod(n, 3), n from cte;\n\n-- Collect statistics on the `t1` table.\nanalyze table t1 COMPUTE STATISTICS for all columns size 128;\n\n-- `c1 = 1` achieves better filtering effect for the 1000 rows of test data than `c2 = 1`.\n-- Therefore, the optimizer preferentially selects the index `idx1` for generating a plan when the `INDEX` hint is not specified or does not take effect.\nexplain select * from t1 where c1 = 1 and c2 = 1;\n+-----------------------------------------------------------------------------------+\n| Query Plan                                                                        |\n+-----------------------------------------------------------------------------------+\n| ====================================================                              |\n| |ID|OPERATOR        |NAME    |EST.ROWS|EST.TIME(us)|                              |\n| ----------------------------------------------------                              |\n| |0 |TABLE RANGE SCAN|t1(idx1)|1       |7           |                              |\n| ====================================================                              |\n| Outputs & filters:                                                                |\n| -------------------------------------                                             |\n|   0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c2 = 1]), rowset=16           |\n|       access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3]), partitions(p0)      |\n|       is_index_back=true, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t1.c1], [t1.__pk_increment]), range(1,MIN ; 1,MAX),              |\n|       range_cond([t1.c1 = 1])                                                     |\n+-----------------------------------------------------------------------------------+\n\n-- The `INDEX` hint takes effect.\nexplain select /*+index(t idx2)*/ * from t1 as t where c1 = 1 and c2 = 1;\n+-----------------------------------------------------------------------------------+\n| Query Plan                                                                        |\n+-----------------------------------------------------------------------------------+\n| ===================================================                               |\n| |ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|                               |\n| ---------------------------------------------------                               |\n| |0 |TABLE RANGE SCAN|t(idx2)|1       |871         |                               |\n| ===================================================                               |\n| Outputs & filters:                                                                |\n| -------------------------------------                                             |\n|   0 - output([t.c1], [t.c2], [t.c3]), filter([t.c1 = 1]), rowset=16               |\n|       access([t. __pk_increment], [t.c1], [t.c2], [t.c3]), partitions(p0)          |\n|       is_index_back=true, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t.c2], [t. __pk_increment]), range(1,MIN ; 1,MAX),                |\n|       range_cond([t.c2 = 1])                                                      |\n+-----------------------------------------------------------------------------------+\n\n-- The `INDEX` hint does not take effect because the `t1` table is assigned the alias `t`.\nexplain select /*+index(t1 idx2)*/ * from t1 t where c1 = 1 and c2 = 1;\n+-----------------------------------------------------------------------------------+\n| Query Plan                                                                        |\n+-----------------------------------------------------------------------------------+\n| ===================================================                               |\n| |ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|                               |\n| ---------------------------------------------------                               |\n| |0 |TABLE RANGE SCAN|t(idx1)|1       |7           |                               |\n| ===================================================                               |\n| Outputs & filters:                                                                |\n| -------------------------------------                                             |\n|   0 - output([t.c1], [t.c2], [t.c3]), filter([t.c2 = 1]), rowset=16               |\n|       access([t. __pk_increment], [t.c1], [t.c2], [t.c3]), partitions(p0)          |\n|       is_index_back=true, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t.c1], [t. __pk_increment]), range(1,MIN ; 1,MAX),                |\n|       range_cond([t.c1 = 1])                                                      |\n+-----------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"full-hint",children:"FULL hint"}),"\n",(0,s.jsxs)(n.p,{children:["The syntax of the ",(0,s.jsx)(n.code,{children:"FULL"})," hint specifies to scan the primary table. It is equivalent to the ",(0,s.jsx)(n.code,{children:"INDEX"})," hint ",(0,s.jsx)(n.code,{children:"/*+ INDEX(table_name PRIMARY)*/"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table t1(c1 int, c2 int, c3 int);\n\ncreate index idx1 on t1(c1);\n\n-- The `c1` column has an index `idx1`, and both the column in the filter condition and the result column are `c1`. Therefore, the optimizer selects `idx1` by default.\nexplain select c1 from t1 where c1 = 1;\n+-----------------------------------------------------------------------+\n| Query Plan                                                            |\n+-----------------------------------------------------------------------+\n| ====================================================                  |\n| |ID|OPERATOR        |NAME    |EST.ROWS|EST.TIME(us)|                  |\n| ----------------------------------------------------                  |\n| |0 |TABLE RANGE SCAN|t1(idx1)|1       |4           |                  |\n| ====================================================                  |\n| Outputs & filters:                                                    |\n| -------------------------------------                                 |\n|   0 - output([t1.c1]), filter(nil), rowset=4                          |\n|       access([t1.c1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                     |\n|       range_key([t1.c1], [t1.__pk_increment]), range(1,MIN ; 1,MAX),  |\n|       range_cond([t1.c1 = 1])                                         |\n+-----------------------------------------------------------------------+\n\n-- Use a hint to specify a full table scan.\nexplain select /*+ FULL(t1) */ c1 from t1 where c1 = 1;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| ===============================================                                    |\n| |ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|                                    |\n| -----------------------------------------------                                    |\n| |0 |TABLE FULL SCAN|t1  |1       |4           |                                    |\n| ===============================================                                    |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1]), filter([t1.c1 = 1]), rowset=4                               |\n|       access([t1.c1]), partitions(p0)                                              |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n\n-- Use a hint to specify a full table scan. The following statement is equivalent to the preceding one.\nexplain select /*+ index(t1 PRIMARY) */ c1 from t1 where c1 = 1;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| ===============================================                                    |\n| |ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|                                    |\n| -----------------------------------------------                                    |\n| |0 |TABLE FULL SCAN|t1  |1       |4           |                                    |\n| ===============================================                                    |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1]), filter([t1.c1 = 1]), rowset=4                               |\n|       access([t1.c1]), partitions(p0)                                              |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"leading-hint",children:"LEADING hint"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"LEADING"})," hint specifies the order in which tables are joined. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ LEADING(table_name_list)*/"}),". You can use ",(0,s.jsx)(n.code,{children:"()"})," in ",(0,s.jsx)(n.code,{children:"table_name_list"})," to indicate the join priorities of right-side tables to specify a complex join. It is more flexible than the ",(0,s.jsx)(n.code,{children:"ORDERED"})," hint. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN BASIC SELECT /*+LEADING(d c b a)*/ * FROM t1 a, t1 b, t1 c, t1 d;\n+------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                           |\n+------------------------------------------------------------------------------------------------------+\n| =========================================                                                            |\n| |ID|OPERATOR                       |NAME|                                                            |\n| -----------------------------------------                                                            |\n| |0 |NESTED-LOOP JOIN CARTESIAN     |    |                                                            |\n| |1 |\u251c\u2500NESTED-LOOP JOIN CARTESIAN   |    |                                                            |\n| |2 |\u2502 \u251c\u2500NESTED-LOOP JOIN CARTESIAN |    |                                                            |\n| |3 |\u2502 \u2502 \u251c\u2500TABLE FULL SCAN          |d   |                                                            |\n| |4 |\u2502 \u2502 \u2514\u2500MATERIAL                 |    |                                                            |\n| |5 |\u2502 \u2502   \u2514\u2500TABLE FULL SCAN        |c   |                                                            |\n| |6 |\u2502 \u2514\u2500MATERIAL                   |    |                                                            |\n| |7 |\u2502   \u2514\u2500TABLE FULL SCAN          |b   |                                                            |\n| |8 |\u2514\u2500MATERIAL                     |    |                                                            |\n| |9 |  \u2514\u2500TABLE FULL SCAN            |a   |                                                            |\n| =========================================                                                            |\n+------------------------------------------------------------------------------------------------------+\n\nEXPLAIN BASIC SELECT /*+LEADING((d c) (b a))*/ * FROM  t1 a, t1 b, t1 c, t1 d;\n+------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                           |\n+------------------------------------------------------------------------------------------------------+\n| =========================================                                                            |\n| |ID|OPERATOR                       |NAME|                                                            |\n| -----------------------------------------                                                            |\n| |0 |NESTED-LOOP JOIN CARTESIAN     |    |                                                            |\n| |1 |\u251c\u2500NESTED-LOOP JOIN CARTESIAN   |    |                                                            |\n| |2 |\u2502 \u251c\u2500TABLE FULL SCAN            |d   |                                                            |\n| |3 |\u2502 \u2514\u2500MATERIAL                   |    |                                                            |\n| |4 |\u2502   \u2514\u2500TABLE FULL SCAN          |c   |                                                            |\n| |5 |\u2514\u2500MATERIAL                     |    |                                                            |\n| |6 |  \u2514\u2500NESTED-LOOP JOIN CARTESIAN |    |                                                            |\n| |7 |    \u251c\u2500TABLE FULL SCAN          |b   |                                                            |\n| |8 |    \u2514\u2500MATERIAL                 |    |                                                            |\n| |9 |      \u2514\u2500TABLE FULL SCAN        |a   |                                                            |\n| =========================================                                                            |\n+------------------------------------------------------------------------------------------------------+\n\nEXPLAIN BASIC SELECT /*+LEADING((d c b) a))*/ * FROM t1 a, t1 b, t1 c, t1 d;\n+------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                           |\n+------------------------------------------------------------------------------------------------------+\n| =========================================                                                            |\n| |ID|OPERATOR                       |NAME|                                                            |\n| -----------------------------------------                                                            |\n| |0 |NESTED-LOOP JOIN CARTESIAN     |    |                                                            |\n| |1 |\u251c\u2500NESTED-LOOP JOIN CARTESIAN   |    |                                                            |\n| |2 |\u2502 \u251c\u2500NESTED-LOOP JOIN CARTESIAN |    |                                                            |\n| |3 |\u2502 \u2502 \u251c\u2500TABLE FULL SCAN          |d   |                                                            |\n| |4 |\u2502 \u2502 \u2514\u2500MATERIAL                 |    |                                                            |\n| |5 |\u2502 \u2502   \u2514\u2500TABLE FULL SCAN        |c   |                                                            |\n| |6 |\u2502 \u2514\u2500MATERIAL                   |    |                                                            |\n| |7 |\u2502   \u2514\u2500TABLE FULL SCAN          |b   |                                                            |\n| |8 |\u2514\u2500MATERIAL                     |    |                                                            |\n| |9 |  \u2514\u2500TABLE FULL SCAN            |a   |                                                            |\n| =========================================                                                            |\n+------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"LEADING"})," hint is strictly examined to ensure that tables are joined in the order specified by the user. The ",(0,s.jsx)(n.code,{children:"LEADING"})," hint becomes invalid if ",(0,s.jsx)(n.code,{children:"table_name"})," specified in the hint does not exist, or duplicate tables are found in the hint. If the optimizer does not find a table in ",(0,s.jsx)(n.code,{children:"FROM"})," items by ",(0,s.jsx)(n.code,{children:"table_id"})," during a ",(0,s.jsx)(n.code,{children:"JOIN"})," operation, the query may have been rewritten. In this case, the join order for this table and tables after this table is invalid. The join order before the table is still valid."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"ORDERED"})," and ",(0,s.jsx)(n.code,{children:"LEADING"})," hints are used at the same time, only the ",(0,s.jsx)(n.code,{children:"ORDERED"})," hint takes effect."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"use_nl-hint",children:"USE_NL hint"}),"\n",(0,s.jsxs)(n.p,{children:["The syntax of a hint that uses a join algorithm is ",(0,s.jsx)(n.code,{children:"join_hint_name ( @ qb_name table_name_list)"}),". When the right-side table in the join matches ",(0,s.jsx)(n.code,{children:"table_name_list"}),", the optimizer generates a plan based on the hint semantics. Generally, you need to use a ",(0,s.jsx)(n.code,{children:"LEADING"})," hint to specify the join order to make sure that the table in ",(0,s.jsx)(n.code,{children:"table_name_list"})," is the right-side table. Otherwise, the hint becomes invalid as the join order changes."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"table_name_list"})," supports the following forms:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"USE_NL(t1)"}),": uses the nested loop join algorithm when the ",(0,s.jsx)(n.code,{children:"t1"})," table is the right-side table."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"USE_NL(t1 t2 ... )"}),": uses the nested loop join algorithm when the ",(0,s.jsx)(n.code,{children:"t1"})," or ",(0,s.jsx)(n.code,{children:"t2"})," table or any other one in the list is the right-side table."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"USE_NL((t1 t2))"}),": uses the nested loop join algorithm when the join result of the ",(0,s.jsx)(n.code,{children:"t1"})," and ",(0,s.jsx)(n.code,{children:"t2"})," tables is the right-side table. The join order and method of the ",(0,s.jsx)(n.code,{children:"t1"})," and ",(0,s.jsx)(n.code,{children:"t2"})," tables are ignored."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"USE_NL(t1 (t2 t3) (t4 t5 t6) ... )"}),": uses the nested loop join algorithm when the ",(0,s.jsx)(n.code,{children:"t1"})," table, the join result of the ",(0,s.jsx)(n.code,{children:"t2"})," and ",(0,s.jsx)(n.code,{children:"t3"}),"tables, the join result of the ",(0,s.jsx)(n.code,{children:"t4"}),", ",(0,s.jsx)(n.code,{children:"t5"}),", and ",(0,s.jsx)(n.code,{children:"t6"}),"tables, or any other item in the list is the right-side table."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"USE_NL"})," hint specifies to use the nested loop join algorithm for a join when the specified table is a right-side table. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ USE_NL(table_name_list)*/"}),". Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t0(c1 INT, c2 INT, c3 INT);\n\nCREATE TABLE t1(c1 INT, c2 INT, c3 INT);\n\nCREATE TABLE t2(c1 INT, c2 INT, c3 INT);\n\n-- If you want to join the `t0` table with the `t1` table in a nested loop join, specify the hint as follows:\nEXPLAIN BASIC SELECT /*+ LEADING(t0 t1) USE_NL(t1) */ * FROM t0, t1 WHERE t0.c1 = t1.c1;\n+--------------------------------------------------------------------------------------------+\n| Query Plan                                                                                 |\n+--------------------------------------------------------------------------------------------+\n| =============================                                                              |\n| |ID|OPERATOR           |NAME|                                                              |\n| -----------------------------                                                              |\n| |0 |NESTED-LOOP JOIN   |    |                                                              |\n| |1 |\u251c\u2500TABLE FULL SCAN  |t0  |                                                              |\n| |2 |\u2514\u2500MATERIAL         |    |                                                              |\n| |3 |  \u2514\u2500TABLE FULL SCAN|t1  |                                                              |\n| =============================                                                              |\n+--------------------------------------------------------------------------------------------+\n\n-- If you want to join the `t0` table with the join result of the `t1` and `t2` tables with the outermost join as a nested loop join, specify the hint as follows:\nEXPLAIN BASIC SELECT /*+ LEADING(t0 (t1 t2)) USE_NL((t1 t2)) */ * FROM t0, t1, t2 WHERE t0.c1 = t1.c1 AND t0.c1 = t2.c1;\n+-----------------------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                            |\n+-----------------------------------------------------------------------------------------------------------------------+\n| ===============================                                                                                       |\n| |ID|OPERATOR             |NAME|                                                                                       |\n| -------------------------------                                                                                       |\n| |0 |NESTED-LOOP JOIN     |    |                                                                                       |\n| |1 |\u251c\u2500TABLE FULL SCAN    |t0  |                                                                                       |\n| |2 |\u2514\u2500MATERIAL           |    |                                                                                       |\n| |3 |  \u2514\u2500HASH JOIN        |    |                                                                                       |\n| |4 |    \u251c\u2500TABLE FULL SCAN|t1  |                                                                                       |\n| |5 |    \u2514\u2500TABLE FULL SCAN|t2  |                                                                                       |\n| ===============================                                                                                       |\n+-----------------------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notice"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"USE_NL"}),", ",(0,s.jsx)(n.code,{children:"USE_HASH"}),", and ",(0,s.jsx)(n.code,{children:"USE_MERGE"})," hints are usually used with the ",(0,s.jsx)(n.code,{children:"LEADING"})," hint because the optimizer generates a plan based on the hint semantics only when the right-side table in the join matches ",(0,s.jsx)(n.code,{children:"table_name_list"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example: Assume that you want to modify the join method for the ",(0,s.jsx)(n.code,{children:"t1"})," and ",(0,s.jsx)(n.code,{children:"t2"})," tables in the plan for the ",(0,s.jsx)(n.code,{children:"SELECT * FROM t1, t2 WHERE t1.c1 = t2.c1;"})," statement."]}),"\n",(0,s.jsx)(n.p,{children:"Six plans are originally available:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"t1 nest loop join t2"}),"\n",(0,s.jsx)(n.li,{children:"t1 hash join t2"}),"\n",(0,s.jsx)(n.li,{children:"t1 merge join t2"}),"\n",(0,s.jsx)(n.li,{children:"t2 nest loop join t1"}),"\n",(0,s.jsx)(n.li,{children:"t2 hash join t1"}),"\n",(0,s.jsx)(n.li,{children:"t2 merge join t1"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you specify the hint ",(0,s.jsx)(n.code,{children:"/*+ USE_NL(t1)*/"}),", four plans are available:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"t1 nest loop join t2"}),"\n",(0,s.jsx)(n.li,{children:"t1 hash join t2"}),"\n",(0,s.jsx)(n.li,{children:"t1 merge join t2"}),"\n",(0,s.jsx)(n.li,{children:"t2 nest loop join t1"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"t2 nest loop join t1"})," plan is generated according to the hint only when the ",(0,s.jsx)(n.code,{children:"t1"})," table is the right-side table of the join. When the ",(0,s.jsx)(n.code,{children:"t1"})," table is the left-side table of the join, the hint does not take effect."]}),"\n",(0,s.jsxs)(n.p,{children:["If you specify the hint ",(0,s.jsx)(n.code,{children:"/*+ LEADING(t2 t1) USE_NL(t1)*/"}),", only one plan is available: ",(0,s.jsx)(n.code,{children:"t2 nest loop join t1"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"use_hash-hint",children:"USE_HASH hint"}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the ",(0,s.jsx)(n.code,{children:"USE_NL"})," hint, the ",(0,s.jsx)(n.code,{children:"USE_HASH"})," hint specifies to use the hash join algorithm for a join by taking the specified table as the right-side table. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ USE_HASH(table_name_list)*/"}),". Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t0(c1 INT, c2 INT, c3 INT);\n\nCREATE TABLE t1(c1 INT, c2 INT, c3 INT);\n\nEXPLAIN BASIC SELECT /*+LEADING(t0 t1) USE_HASH(t1)*/ * FROM t0, t1 WHERE t0.c1 = t1.c1;\n+--------------------------------------------------------------------------------------------+\n| Query Plan                                                                                 |\n+--------------------------------------------------------------------------------------------+\n| ===========================                                                                |\n| |ID|OPERATOR         |NAME|                                                                |\n| ---------------------------                                                                |\n| |0 |HASH JOIN        |    |                                                                |\n| |1 |\u251c\u2500TABLE FULL SCAN|t0  |                                                                |\n| |2 |\u2514\u2500TABLE FULL SCAN|t1  |                                                                |\n| ===========================                                                                |\n+--------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"use_merge-hint",children:"USE_MERGE hint"}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the ",(0,s.jsx)(n.code,{children:"USE_NL"})," hint, the ",(0,s.jsx)(n.code,{children:"USE_MERGE"})," hint specifies to use the merge join algorithm for a join by taking the specified table as the right-side table. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ USE_MERGE(table_name_list)*/"}),". Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t0(c1 INT, c2 INT, c3 INT);\n\nCREATE TABLE t1(c1 INT, c2 INT, c3 INT);\n\nEXPLAIN BASIC SELECT /*+LEADING(t0 t1) USE_MERGE(t1)*/ * FROM t0, t1 WHERE t0.c1 = t1.c1;\n+--------------------------------------------------------------------------------------------+\n| Query Plan                                                                                 |\n+--------------------------------------------------------------------------------------------+\n| =============================                                                              |\n| |ID|OPERATOR           |NAME|                                                              |\n| -----------------------------                                                              |\n| |0 |MERGE JOIN         |    |                                                              |\n| |1 |\u251c\u2500SORT             |    |                                                              |\n| |2 |\u2502 \u2514\u2500TABLE FULL SCAN|t0  |                                                              |\n| |3 |\u2514\u2500SORT             |    |                                                              |\n| |4 |  \u2514\u2500TABLE FULL SCAN|t1  |                                                              |\n| =============================                                                              |\n+--------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.p,{children:["In OceanBase Database, a merge join requires an equality join condition. When you join two tables without an equality join condition, the ",(0,s.jsx)(n.code,{children:"USE_MERGE"})," hint does not take effect."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parallel-hint",children:"PARALLEL hint"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"PARALLEL"})," specifies the DOP of SQL statements. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ PARALLEL(n)*/"}),". In the syntax, ",(0,s.jsx)(n.code,{children:"n"})," is an integer that indicates the global DOP of SQL statements. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE tbl1 (col1 INT) PARTITION BY HASH(col1) ;\n\nEXPLAIN BASIC SELECT /*+ PARALLEL(5) */ * FROM tbl1;\n+----------------------------------------------------------------------+\n| Query Plan                                                           |\n+----------------------------------------------------------------------+\n| ===================================                                  |\n| |ID|OPERATOR             |NAME    |                                  |\n| -----------------------------------                                  |\n| |0 |PX COORDINATOR       |        |                                  |\n| |1 |\u2514\u2500EXCHANGE OUT DISTR |:EX10000|                                  |\n| |2 |  \u2514\u2500PX BLOCK ITERATOR|        |                                  |\n| |3 |    \u2514\u2500TABLE FULL SCAN|tbl1    |                                  |\n| ===================================                                  |\n| Outputs & filters:                                                   |\n| -------------------------------------                                |\n|   0 - output([INTERNAL_FUNCTION(tbl1.col1)]), filter(nil), rowset=16 |\n|   1 - output([INTERNAL_FUNCTION(tbl1.col1)]), filter(nil), rowset=16 |\n|       dop=5                                                          |\n|   2 - output([tbl1.col1]), filter(nil), rowset=16                    |\n|   3 - output([tbl1.col1]), filter(nil), rowset=16                    |\n|       access([tbl1.col1]), partitions(p0)                            |\n|       is_index_back=false, is_global_index=false,                    |\n|       range_key([tbl1.__pk_increment]), range(MIN ; MAX)always true  |\n+----------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the preceding plan, ",(0,s.jsx)(n.code,{children:"dop=5"})," indicates that the hint has taken effect."]}),"\n",(0,s.jsxs)(n.p,{children:["OceanBase Database also supports table-level ",(0,s.jsx)(n.code,{children:"PARALLEL"})," hints. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ PARALLEL(table_name n)*/"}),". Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t1 (c1 INT, c2 INT) PARTITION BY HASH(c1) PARTITIONS 5;\n\nCREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT) PARTITION BY HASH(c1) PARTITIONS 4;\n\nEXPLAIN SELECT /*+ PARALLEL(3) PARALLEL(t2 5)*/* FROM t1, t2 WHERE t1.c1 = t2.c1;\nEXPLAIN SELECT /*+ PARALLEL(3) PARALLEL(t1 4) PARALLEL(t2 5)*/* FROM t1, t2 WHERE t1.c1 = t2.c1;\n+---------------------------------------------------------------------------------------+\n| Query Plan                                                                            |\n+---------------------------------------------------------------------------------------+\n| =======================================================================               |\n| |ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|               |\n| -----------------------------------------------------------------------               |\n| |0 |PX COORDINATOR                     |        |1       |9           |               |\n| |1 |\u2514\u2500EXCHANGE OUT DISTR               |:EX10001|1       |9           |               |\n| |2 |  \u2514\u2500HASH JOIN                      |        |1       |9           |               |\n| |3 |    \u251c\u2500PART JOIN FILTER CREATE      |:RF0000 |1       |5           |               |\n| |4 |    \u2502 \u2514\u2500PX PARTITION ITERATOR      |        |1       |5           |               |\n| |5 |    \u2502   \u2514\u2500TABLE FULL SCAN          |t1      |1       |5           |               |\n| |6 |    \u2514\u2500EXCHANGE IN DISTR            |        |1       |4           |               |\n| |7 |      \u2514\u2500EXCHANGE OUT DISTR (PKEY)  |:EX10000|1       |4           |               |\n| |8 |        \u2514\u2500PX BLOCK HASH JOIN-FILTER|:RF0000 |1       |4           |               |\n| |9 |          \u2514\u2500TABLE FULL SCAN        |t2      |1       |4           |               |\n| =======================================================================               |\n| Outputs & filters:                                                                    |\n| -------------------------------------                                                 |\n|   0 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, t2.c1, t2.c2)]), filter(nil), rowset=16 |\n|   1 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, t2.c1, t2.c2)]), filter(nil), rowset=16 |\n|       dop=4                                                                           |\n|   2 - output([t1.c1], [t2.c1], [t1.c2], [t2.c2]), filter(nil), rowset=16              |\n|       equal_conds([t1.c1 = t2.c1]), other_conds(nil)                                  |\n|   3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       RF_TYPE(bloom), RF_EXPR[calc_tablet_id(t1.c1)]                                  |\n|   4 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       affinitize                                                                      |\n|   5 - output([t1.c1], [t1.c2]), filter(nil), rowset=16                                |\n|       access([t1.c1], [t1.c2]), partitions(p[0-4])                                    |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                     |\n|   6 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|   7 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|       (#keys=1, [t2.c1]), dop=5                                                       |\n|   8 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|   9 - output([t2.c1], [t2.c2]), filter(nil), rowset=16                                |\n|       access([t2.c1], [t2.c2]), partitions(p[0-3])                                    |\n|       is_index_back=false, is_global_index=false,                                     |\n|       range_key([t2.c1]), range(MIN ; MAX)always true                                 |\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"read_consistencyweak-hint",children:"READ_CONSISTENCY(WEAK) hint"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"READ_CONSISTENCY"})," hint sets the read consistency level of an SQL statement to weak consistency. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ READ_CONSISTENCY(WEAK)*/"}),". Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Read data from a follower replica of the `t1` table.\nSELECT /*+ READ_CONSISTENCY(WEAK) */ * FROM t1;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can set weak consistency read for time-insensitive analytical processing (AP) requests to enable read/write splitting for AP and transaction processing (TP) businesses and avoid the impact of AP requests on the leader replica. After you specify a hint for weak consistency read, data reads will be executed on follower replicas. For more information about weak consistency read, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001168895",children:"Weak consistency read"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"query_timeout-hint",children:"QUERY_TIMEOUT hint"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"QUERY_TIMEOUT"})," hint specifies the timeout period of an SQL statement. The syntax is as follows: ",(0,s.jsx)(n.code,{children:"/*+ query_timeout(n)*/"}),". ",(0,s.jsx)(n.code,{children:"n"})," is an integer, in microseconds. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Set the timeout period of the SQL statement to 100000000 microseconds, namely, 100s.\nSELECT /*+ query_timeout(100000000) */ * FROM t1;\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["You can execute the ",(0,s.jsx)(n.code,{children:"SHOW VARIABLES LIKE 'ob_query_timeout';"})," statement to query the timeout period of an SQL statement."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["OceanBase Database also allows you to execute the ",(0,s.jsx)(n.code,{children:"SET SESSION ob_query_timeout = 100000000;"})," statement to modify the timeout period of an SQL statement for a session and execute the ",(0,s.jsx)(n.code,{children:"SET GLOBAL ob_query_timeout = 100000000;"})," statement to modify the timeout period of an SQL statement for a tenant."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"use-an-outline-to-bind-a-plan",children:"Use an outline to bind a plan"}),"\n",(0,s.jsx)(n.p,{children:"You can create an outline for an SQL statement to bind a plan to the SQL statement."}),"\n",(0,s.jsx)(n.p,{children:"Before you launch a production system, you can directly add hints to SQL statements of the application and control the optimizer to generate plans based on the specified hints."}),"\n",(0,s.jsx)(n.p,{children:"For an application that you already launched, if a plan selected by the optimizer is not optimal for an SQL statement of the application, you need to bind an optimal plan to this SQL statement online. This means that you need to add a set of hints to this SQL statement by using DDL operations, instead of modifying the SQL statement. Then, the optimizer generates an optimal plan for the SQL statement based on the specified hints. The set of hints is referred to as an outline."}),"\n",(0,s.jsx)(n.h3,{id:"dictionary-views-related-to-outlines",children:"Dictionary views related to outlines"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DBA_OB_OUTLINES"})," is an outline view. The following table describes the fields in the outline view."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Field"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Type (MySQL mode)"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Type (Oracle mode)"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CREATE_TIME"}),(0,s.jsx)(n.td,{children:"TIMESTAMP(6)"}),(0,s.jsx)(n.td,{children:"TIMESTAMP(6)"}),(0,s.jsx)(n.td,{children:"The timestamp that indicates when the outline was created."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MODIFY_TIME"}),(0,s.jsx)(n.td,{children:"TIMESTAMP(6)"}),(0,s.jsx)(n.td,{children:"TIMESTAMP(6)"}),(0,s.jsx)(n.td,{children:"The timestamp that indicates when the outline was modified."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TENANT_ID"}),(0,s.jsx)(n.td,{children:"BIGINT(20)"}),(0,s.jsx)(n.td,{children:"NUMBER(38)"}),(0,s.jsx)(n.td,{children:"The ID of the tenant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DATABASE_ID"}),(0,s.jsx)(n.td,{children:"BIGINT(20)"}),(0,s.jsx)(n.td,{children:"NUMBER(38)"}),(0,s.jsx)(n.td,{children:"The ID of the database."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE_ID"}),(0,s.jsx)(n.td,{children:"BIGINT(20)"}),(0,s.jsx)(n.td,{children:"NUMBER(38)"}),(0,s.jsx)(n.td,{children:"The ID of the outline."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DATABASE_NAME"}),(0,s.jsx)(n.td,{children:"VARCHAR2(128)"}),(0,s.jsx)(n.td,{children:"VARCHAR2(128)"}),(0,s.jsx)(n.td,{children:"The name of the database."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE_NAME"}),(0,s.jsx)(n.td,{children:"VARCHAR2(128)"}),(0,s.jsx)(n.td,{children:"VARCHAR2(128)"}),(0,s.jsx)(n.td,{children:"The name of the outline."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"VISIBLE_SIGNATURE"}),(0,s.jsx)(n.td,{children:"LONGTEXT"}),(0,s.jsx)(n.td,{children:"CLOB"}),(0,s.jsx)(n.td,{children:"The deserialization result of the signature, for ease of querying the signature information."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SQL_TEXT"}),(0,s.jsx)(n.td,{children:"LONGTEXT"}),(0,s.jsx)(n.td,{children:"CLOB"}),(0,s.jsxs)(n.td,{children:["The SQL text specified in the ",(0,s.jsx)(n.code,{children:"ON"})," clause when the outline was created."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE_TARGET"}),(0,s.jsx)(n.td,{children:"LONGTEXT"}),(0,s.jsx)(n.td,{children:"CLOB"}),(0,s.jsxs)(n.td,{children:["The SQL text specified in the ",(0,s.jsx)(n.code,{children:"TO"})," clause when the outline was created."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE_SQL"}),(0,s.jsx)(n.td,{children:"LONGTEXT"}),(0,s.jsx)(n.td,{children:"CLOB"}),(0,s.jsx)(n.td,{children:"The SQL statement with complete outline information."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SQL_ID"}),(0,s.jsx)(n.td,{children:"VARCHAR2(32)"}),(0,s.jsx)(n.td,{children:"VARCHAR2(32)"}),(0,s.jsx)(n.td,{children:"The ID of the SQL statement."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OUTLINE_CONTENT"}),(0,s.jsx)(n.td,{children:"LONGTEXT"}),(0,s.jsx)(n.td,{children:"CLOB"}),(0,s.jsx)(n.td,{children:"The complete information about the execution plan outline."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"create-an-outline",children:"Create an outline"}),"\n",(0,s.jsxs)(n.p,{children:["OceanBase Database supports creating an outline based on ",(0,s.jsx)(n.code,{children:"SQL_TEXT"})," or ",(0,s.jsx)(n.code,{children:"SQL_ID"}),", where ",(0,s.jsx)(n.code,{children:"SQL_TEXT"})," is the original SQL statement with parameters."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notice"})}),"\n",(0,s.jsx)(n.p,{children:"To create an outline, you must go to the corresponding database."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"create-an-outline-based-on-sql_text",children:"Create an outline based on SQL_TEXT"}),"\n",(0,s.jsxs)(n.p,{children:["After you create an outline based on ",(0,s.jsx)(n.code,{children:"SQL_TEXT"}),", a key-value pair is generated and stored in the map. The key is the parameterized text of the bound SQL statement, and the value is the bound hints. For more information about the parameterization principle, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001168984",children:"Fast parameterization"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use the following syntax to create an outline based on ",(0,s.jsx)(n.code,{children:"SQL_TEXT"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE [OR REPLACE] OUTLINE <outline_name> ON <stmt>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["After you specify ",(0,s.jsx)(n.code,{children:"OR REPLACE"}),", you can replace the existing execution plan."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"stmt"})," is generally a DML statement with hints and original parameters. Here is an example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE OUTLINE outline1 ON \nSELECT /*+NO_REWRITE*/ * \nFROM tbl1\nWHERE col1 = 4 AND col2 = 6 ORDER BY 2 TO SELECT  * FROM tbl1 WHERE col1 = 4 AND col2 = 6 ORDER BY 2;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notice"})}),"\n",(0,s.jsxs)(n.p,{children:["When you specify ",(0,s.jsx)(n.code,{children:"target_stmt"}),", you must ensure that ",(0,s.jsx)(n.code,{children:"stmt"})," exactly matches ",(0,s.jsx)(n.code,{children:"target_stmt"})," when hints are removed."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, the optimizer selects the index ",(0,s.jsx)(n.code,{children:"idx_c2"})," by default. The index contains only the indexed column ",(0,s.jsx)(n.code,{children:"c2"})," and the primary key column ",(0,s.jsx)(n.code,{children:"c1"}),", which is a hidden column only used for table access by index primary key. Table access by index primary key is required for the ",(0,s.jsx)(n.code,{children:"c3"})," column because values of the ",(0,s.jsx)(n.code,{children:"c3"})," column must be returned."]}),"\n",(0,s.jsxs)(n.p,{children:["The cost of table access by index primary key per row is approximately 10 times that of a full table scan. If the ",(0,s.jsx)(n.code,{children:"c2"})," column has poor filtering, you can rewrite the SQL statement to forcibly use a full table scan to improve the performance. In this case, you can create an outline to bind the SQL statement to a full table scan plan."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT, c3 INT, INDEX idx_c2(c2));\n\nINSERT INTO t1 VALUES(1, 1, 1), (2, 1, 2), (3, 1, 3);\n\nEXPLAIN SELECT * FROM t1 WHERE c2 = 1;\n+-----------------------------------------------------------------+\n| Query Plan                                                      |\n+-----------------------------------------------------------------+\n| ======================================================          |\n| |ID|OPERATOR        |NAME      |EST.ROWS|EST.TIME(us)|          |\n| ------------------------------------------------------          |\n| |0 |TABLE RANGE SCAN|t1(idx_c2)|1       |7           |          |\n| ======================================================          |\n| Outputs & filters:                                              |\n| -------------------------------------                           |\n|   0 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16 |\n|       access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)         |\n|       is_index_back=true, is_global_index=false,                |\n|       range_key([t1.c2], [t1.c1]), range(1,MIN ; 1,MAX),        |\n|       range_cond([t1.c2 = 1])                                   |\n+-----------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create an outline based on the following SQL statement:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE OR REPLACE OUTLINE otl_t1_full ON SELECT /*+ full(t1) */ * FROM t1 WHERE c2 = 1;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can query the actual execution plan for an SQL statement from the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_STAT"})," and ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_EXPLAIN"})," views instead of directly executing the ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement. For more information, see ",(0,s.jsx)(n.a,{href:"#Verify_whether_the_outline_creation_takes_effect",children:"Verify whether the outline creation takes effect"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"create-an-outline-based-on-sql_id",children:"Create an outline based on SQL_ID"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the following syntax to create an outline based on ",(0,s.jsx)(n.code,{children:"SQL_ID"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE OUTLINE outline_name ON sql_id USING HINT hint_text;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"SQL_ID"})," is the SQL ID of the SQL statement to be bound. You can query the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_STAT"})," view for it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select\n  TENANT_ID,\n  SVR_IP,\n  SVR_PORT,\n  PLAN_ID,\n  LAST_ACTIVE_TIME,\n  QUERY_SQL,\n  SQL_ID\nfrom\n  oceanbase.GV$OB_PLAN_CACHE_PLAN_STAT\nwhere\n  QUERY_SQL = 'SELECT * FROM t1 WHERE c2 = 1';\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------+--------------+----------+---------+----------------------------+-------------------------------+----------------------------------+\n| TENANT_ID | SVR_IP       | SVR_PORT | PLAN_ID | LAST_ACTIVE_TIME           | QUERY_SQL                     | SQL_ID                           |\n+-----------+--------------+----------+---------+----------------------------+-------------------------------+----------------------------------+\n|      1002 | 10.10.10.1   |    22602 |   49820 | 2024-03-13 18:49:17.375906 | SELECT * FROM t1 WHERE c2 = 1 | ED570339F2C856BA96008A29EDF04C74 |\n+-----------+--------------+----------+---------+----------------------------+-------------------------------+----------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The following example binds an outline based on ",(0,s.jsx)(n.code,{children:"SQL_ID"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'DROP OUTLINE otl_t1_full;\n\nCREATE OUTLINE otl_t1_idx_c2 ON "ED570339F2C856BA96008A29EDF04C74" USING HINT /*+ INDEX(t1 idx_c2)*/ ;\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Notice"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["A hint is specified in the ",(0,s.jsx)(n.code,{children:"/*+ xxx*/"})," format."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["An outline created based on ",(0,s.jsx)(n.code,{children:"SQL_TEXT"})," overrides an outline created based on ",(0,s.jsx)(n.code,{children:"SQL_ID"})," because the former has a higher priority."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If the SQL statement of a specific ",(0,s.jsx)(n.code,{children:"SQL_ID"})," already contains hints, the hints specified when you create an outline will override all hints in the original statement."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Outline data is a set of hint information generated by the optimizer to fully reproduce a plan. It begins with ",(0,s.jsx)(n.code,{children:"BEGIN_OUTLINE_DATA"})," and ends with ",(0,s.jsx)(n.code,{children:"END_OUTLINE_DATA"}),". You can execute the ",(0,s.jsx)(n.code,{children:"EXPLAIN outline"})," statement to get the ",(0,s.jsx)(n.code,{children:"Outline Data"}),", as shown in the following example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN outline SELECT/*+ index(t1 idx_c2)*/ * FROM t1 WHERE c2 = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'-----------------------------------------------------------------+\n| Query Plan                                                      |\n+-----------------------------------------------------------------+\n| ======================================================          |\n| |ID|OPERATOR        |NAME      |EST.ROWS|EST.TIME(us)|          |\n| ------------------------------------------------------          |\n| |0 |TABLE RANGE SCAN|t1(idx_c2)|3       |12          |          |\n| ======================================================          |\n| Outputs & filters:                                              |\n| -------------------------------------                           |\n|   0 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16 |\n|       access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)         |\n|       is_index_back=true, is_global_index=false,                |\n|       range_key([t1.c2], [t1.c1]), range(1,MIN ; 1,MAX),        |\n|       range_cond([t1.c2 = 1])                                   |\n| Outline Data:                                                   |\n| -------------------------------------                           |\n|   /*+                                                           |\n|       BEGIN_OUTLINE_DATA                                        |\n|       INDEX(@"SEL$1" "test"." t1"@"SEL$1" "idx_c2")              |\n|       OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')                      |\n|       END_OUTLINE_DATA                                          |\n|   */                                                            |\n+-----------------------------------------------------------------+\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Outline Data"})," is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'Outline Data:\n-------------------------------------\n/*+\n    BEGIN_OUTLINE_DATA\n    INDEX(@"SEL$1" "test"." t1"@"SEL$1" "idx_c2")\n    OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')\n    END_OUTLINE_DATA\n*/\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Outline Data"})," is also a hint and is therefore applicable to plan binding, as shown in the following sample statement:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'DROP OUTLINE otl_t1_idx_c2;\n\nCREATE OUTLINE otl_t1_idx_c2\n     ON "ED570339F2C856BA96008A29EDF04C74" USING HINT\n/*+\n    BEGIN_OUTLINE_DATA\n    INDEX(@"SEL$1" "test"." t1"@"SEL$1" "idx_c2")\n    OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\')\n    END_OUTLINE_DATA\n*/;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"verify-whether-the-outline-creation-takes-effect",children:"Verify whether the outline creation takes effect"}),"\n",(0,s.jsx)(n.p,{children:"To verify whether the outline has been created and meets expectations, perform the following three steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Verify whether the outline is created. Query the ",(0,s.jsx)(n.code,{children:"DBA_OB_OUTLINES"})," view to verify whether the outline of the corresponding name has been created."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM oceanbase.DBA_OB_OUTLINES WHERE OUTLINE_NAME = 'otl_t1_full'\\G\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'*************************** 1. row ***************************\n      CREATE_TIME: 2024-03-13 18:38:18.807692\n      MODIFY_TIME: 2024-03-13 18:39:57.210761\n        TENANT_ID: 1002\n      DATABASE_ID: 500001\n       OUTLINE_ID: 500133\n    DATABASE_NAME: test\n     OUTLINE_NAME: otl_t1_full\nVISIBLE_SIGNATURE: SELECT * FROM t1 WHERE c2 = ?\n         SQL_TEXT: SELECT/*+ full(t1) */ * FROM t1 WHERE c2 = 1\n   OUTLINE_TARGET:\n      OUTLINE_SQL: SELECT /*+BEGIN_OUTLINE_DATA FULL(@"SEL$1" "test"." t1"@"SEL$1") OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\') END_OUTLINE_DATA*/* FROM t1 WHERE c2 = 1\n           SQL_ID:\n  OUTLINE_CONTENT: /*+BEGIN_OUTLINE_DATA FULL(@"SEL$1" "test"." t1"@"SEL$1") OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\') END_OUTLINE_DATA*/\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Verify whether a new execution plan is generated for the SQL statement based on the bound outline. After the SQL statement bound to the outline executes a new query, check the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_STAT"})," view for ",(0,s.jsx)(n.code,{children:"outline_id"})," in the plan information that corresponds to the SQL statement. If the value of ",(0,s.jsx)(n.code,{children:"outline_id"})," is identical to that found in the ",(0,s.jsx)(n.code,{children:"DBA_OB_OUTLINES"})," view, the plan is generated based on the bound outline. Otherwise, it is not."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT SQL_ID, PLAN_ID, STATEMENT, OUTLINE_ID, OUTLINE_DATA\nFROM oceanbase.GV$OB_PLAN_CACHE_PLAN_STAT\nWHERE STATEMENT LIKE '%SELECT * FROM t1 WHERE c2 =%'\\G\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'*************************** 1. row ***************************\n      SQL_ID: ED570339F2C856BA96008A29EDF04C74\n     PLAN_ID: 49820\n   STATEMENT: SELECT * FROM t1 WHERE c2 = ?\n  OUTLINE_ID: 500133\nOUTLINE_DATA: /*+BEGIN_OUTLINE_DATA FULL(@"SEL$1" "test"." t1"@"SEL$1") OPTIMIZER_FEATURES_ENABLE(\'4.0.0.0\') END_OUTLINE_DATA*/\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Verify whether the execution plan meets expectations. After you verify that the plan is generated based on the bound outline, you can query the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_EXPLAIN"})," view to check the shape of the execution plan cached in the plan cache to verify whether the plan meets expectations. For more information, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001168987",children:"Real-time execution plan display"}),"."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Query the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_STAT"})," view for the ",(0,s.jsx)(n.code,{children:"TENANT_ID"}),", ",(0,s.jsx)(n.code,{children:"SVR_IP"}),", ",(0,s.jsx)(n.code,{children:"SVR_PORT"}),", and ",(0,s.jsx)(n.code,{children:"PLAN_ID"})," fields corresponding to the SQL statement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select\n  TENANT_ID,\n  SVR_IP,\n  SVR_PORT,\n  PLAN_ID,\n  LAST_ACTIVE_TIME,\n  QUERY_SQL\nfrom\n  oceanbase.GV$OB_PLAN_CACHE_PLAN_STAT\nwhere\n  QUERY_SQL = 'SELECT * FROM t1 WHERE c2 = 1';\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------+--------------+----------+---------+----------------------------+-------------------------------+\n| TENANT_ID | SVR_IP       | SVR_PORT | PLAN_ID | LAST_ACTIVE_TIME           | QUERY_SQL                     |\n+-----------+--------------+----------+---------+----------------------------+-------------------------------+\n|      1002 | 10.10.10.1   |    22602 |   49820 | 2024-03-13 18:49:17.375906 | SELECT * FROM t1 WHERE c2 = 1 |\n+-----------+--------------+----------+---------+----------------------------+-------------------------------+\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Query the ",(0,s.jsx)(n.code,{children:"oceanbase.GV$OB_PLAN_CACHE_PLAN_EXPLAIN"})," view for the actual execution plan for the SQL statement. For more information about the fields in the ",(0,s.jsx)(n.code,{children:"GV$OB_PLAN_CACHE_PLAN_EXPLAIN"})," view, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001104596",children:"GV$OB_PLAN_CACHE_PLAN_EXPLAIN"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT\n  *\nFROM\n  oceanbase.GV$OB_PLAN_CACHE_PLAN_EXPLAIN\nWHERE\n  tenant_id = 1002\n  AND SVR_IP = '10.10.10.1'\n  AND SVR_PORT = 22602\n  AND PLAN_ID = 49820;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------+--------------+----------+---------+------------+--------------+----------------+------+------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TENANT_ID | SVR_IP       | SVR_PORT | PLAN_ID | PLAN_DEPTH | PLAN_LINE_ID | OPERATOR       | NAME | ROWS | COST | PROPERTY                                                                                                                                                                                                                                                |\n+-----------+--------------+----------+---------+------------+--------------+----------------+------+------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|      1002 | 10.10.10.1   |    22602 |   49820 |          0 |            0 | PHY_TABLE_SCAN | t1   |    1 |    3 | table_rows:3, physical_range_rows:3, logical_range_rows:3, index_back_rows:0, output_rows:1, avaiable_index_name[idx_c2,t1], pruned_index_name[idx_c2], estimation info[table_id:500131, (table_type:0, version: -1--1--1, logical_rc:3, physical_rc:3)] |\n+-----------+--------------+----------+---------+------------+--------------+----------------+------+------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also use the ",(0,s.jsx)(n.code,{children:"DBMS_XPLAN.DISPLAY_CURSOR"})," function to query the actual execution plan for the SQL statement. The information returned by this function is similar to that returned by the ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," statement. For more information, see ",(0,s.jsx)(n.a,{href:"https://en.oceanbase.com/docs/common-oceanbase-database-10000000001170657",children:"DISPLAY_CURSOR"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT DBMS_XPLAN.DISPLAY_CURSOR(\n       49820,\n        'typical',\n        '10.10.10.1',\n        22602,\n        1002\n      ) FROM DUAL;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"================================================================================================\n|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|REAL.ROWS|REAL.TIME(us)|IO TIME(us)|CPU TIME(us)|\n------------------------------------------------------------------------------------------------\n|0 |TABLE FULL SCAN|t1  |1       |4           |3        |0            |0          |0           |\n================================================================================================\nOutputs & filters:\n-------------------------------------\n  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c2 = :0]), rowset=16\n      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)\n      is_index_back=false, is_global_index=false, filter_before_indexback[false], \n      range_key([t1.c1]), range(MIN ; MAX)always true\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"drop-an-outline",children:"Drop an outline"}),"\n",(0,s.jsx)(n.p,{children:"After an outline is dropped, new execution plans are not generated for the corresponding SQL query based on the bound outline. The syntax for dropping an outline is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DROP OUTLINE outline_name;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relationship-between-plan-binding-and-plan-caching",children:"Relationship between plan binding and plan caching"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["After you create an outline based on ",(0,s.jsx)(n.code,{children:"SQL_TEXT"}),", the optimizer generates a new plan for the SQL statement. The key used by the optimizer to locate the outline is the same as the one used for plan caching. They are both text strings that you get after the SQL statement is parameterized."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"After an outline is created or deleted, a new query of the corresponding SQL statement triggers the invalidation of the corresponding execution plan in the plan cache and updates it to the execution plan generated based on the bound outline."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"relationship-between-plan-binding-and-throttling-rules",children:"Relationship between plan binding and throttling rules"}),"\n",(0,s.jsxs)(n.p,{children:["In OceanBase Database V4.2.2 and later, the functionality of the ",(0,s.jsx)(n.code,{children:"CREATE OUTLINE"})," and ",(0,s.jsx)(n.code,{children:"ALTER OUTLINE"})," statements is extended. In addition to binding an execution plan for a specific query, these statements also allow you to limit the DOP for the query. Throttling can help you effectively manage the database load, thereby avoiding performance issues caused by highly concurrent queries."]}),"\n",(0,s.jsx)(n.p,{children:"Here are some examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Execute the ",(0,s.jsx)(n.code,{children:"CREATE OUTLINE"})," statement to create an outline that contains the ",(0,s.jsx)(n.code,{children:"USE_NL(tbl2)"})," hint. This hint tells the optimizer to use a nested loop join for the ",(0,s.jsx)(n.code,{children:"tbl2"})," table. The ",(0,s.jsx)(n.code,{children:"MAX_CONCURRENT(1)"})," hint in the following example specifies to use only one thread for executing the query at a time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE OUTLINE otl2 ON SELECT /*+ USE_NL(tbl2) MAX_CONCURRENT(1) */ * FROM t WHERE c1 = ?;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Execute the ",(0,s.jsx)(n.code,{children:"ALTER OUTLINE"})," statement to add the preceding hints to an existing outline."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"ALTER OUTLINE otl2 ON SELECT /*+ USE_NL(tbl2) MAX_CONCURRENT(1) */ * FROM t WHERE c1 = ?;\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},18007:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/001-07611d5452024ef4a866a72916bef28e.png"},29276:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/002-0b47377aae231a3b950333873c64e41d.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);