"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[344],{35131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(74848),o=t(28453);const r={title:"Check Whether ODP Causes a Performance Bottleneck",weight:2},a=void 0,i={id:"user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/show_trace",title:"Check Whether ODP Causes a Performance Bottleneck",description:"When the SQL performance is not as expected, you first need to execute the SHOW TRACE statement to query the time spent in each phase and identify the phase that takes the longest time.",source:"@site/docs/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/02_show_trace.md",sourceDirName:"user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide",slug:"/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/show_trace",permalink:"/docs/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/show_trace",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/02_show_trace.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Check Whether ODP Causes a Performance Bottleneck",weight:2},sidebar:"operation_and_maintenanceEnglishSidebar",previous:{title:"Background Knowledge of ODP",permalink:"/docs/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/introduction"},next:{title:"Troubleshoot ODP Connection Issues",permalink:"/docs/user_manual/operation_and_maintenance/en-US/tool_emergency_handbook/odp_troubleshooting_guide/connection_diagnosis"}},c={},l=[{value:"End-to-end Tracing",id:"end-to-end-tracing",level:2},{value:"Examples",id:"examples",level:3},{value:"Summary",id:"summary",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["When the SQL performance is not as expected, you first need to execute the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement to query the time spent in each phase and identify the phase that takes the longest time."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsxs)("font",{color:"red",children:["This topic describes how to use the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement to check whether poor SQL performance occurs because OceanBase Database Proxy (ODP) causes a performance bottleneck. If you are skilled in analyzing SQL performance issues by using the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement, skip this topic. "]})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"end-to-end-tracing",children:"End-to-end Tracing"}),"\n",(0,s.jsx)(n.p,{children:"Data is processed through the following link: application server <-> ODP <-> OBServer node. Specifically, an application server connects to and sends requests to ODP by calling database drivers. Then, ODP forwards the requests to the most appropriate OBServer nodes of OceanBase Database, which stores user data in multiple partitions and replicas across OBServer nodes in its distributed architecture. OBServer nodes execute the requests and return the execution results to the user. OBServer nodes also support request forwarding. If a request cannot be executed on the current OBServer node, it is forwarded to the appropriate OBServer node."}),"\n",(0,s.jsx)(n.p,{children:"In the case of an end-to-end performance issue, such as long response time (RT) detected on the application server, you need to first find the component that has caused the issue on the database access link, and then troubleshoot the component."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"End-to-end tracing",src:t(99451).A+"",width:"1600",height:"1356"})}),"\n",(0,s.jsx)(n.p,{children:"Two paths are involved in end-to-end tracing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"An application sends a request to ODP through a client, such as Java Database Connectivity (JDBC) or Oracle Call Interface (OCI), ODP forwards the request to an OBServer node, and then the OBServer node returns the result to the application."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"An application directly sends a request to an OBServer node through a client, and then the OBServer node returns the result to the application."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use ODP to connect to OceanBase Database, create a table, and insert data into the table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table t1(c1 int);\n\ninsert into t1 values(123);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enable end-to-end tracing for the current session."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SET ob_enable_show_trace = ON;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Execute a simple query statement."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT c1 FROM t1 LIMIT 2;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+------+\n| c1   |\n+------+\n|  123 |\n+------+\n1 row in set\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Execute the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SHOW TRACE;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------------------------------------------------------+----------------------------+------------+\n| Operation                                                 | StartTime                  | ElapseTime |\n+-----------------------------------------------------------+----------------------------+------------+\n| ob_proxy                                                  | 2024-03-20 15:07:46.419433 | 191.999 ms |\n| \u251c\u2500\u2500 ob_proxy_partition_location_lookup                    | 2024-03-20 15:07:46.419494 | 181.839 ms |\n| \u251c\u2500\u2500 ob_proxy_server_process_req                           | 2024-03-20 15:07:46.601697 | 9.138 ms   |\n| \u2514\u2500\u2500 com_query_process                                     | 2024-03-20 15:07:46.601920 | 8.824 ms   |\n|     \u2514\u2500\u2500 mpquery_single_stmt                               | 2024-03-20 15:07:46.601940 | 8.765 ms   |\n|         \u251c\u2500\u2500 sql_compile                                   | 2024-03-20 15:07:46.601984 | 7.666 ms   |\n|         \u2502   \u251c\u2500\u2500 pc_get_plan                               | 2024-03-20 15:07:46.602051 | 0.029 ms   |\n|         \u2502   \u2514\u2500\u2500 hard_parse                                | 2024-03-20 15:07:46.602195 | 7.423 ms   |\n|         \u2502       \u251c\u2500\u2500 parse                                 | 2024-03-20 15:07:46.602201 | 0.137 ms   |\n|         \u2502       \u251c\u2500\u2500 resolve                               | 2024-03-20 15:07:46.602393 | 0.555 ms   |\n|         \u2502       \u251c\u2500\u2500 rewrite                               | 2024-03-20 15:07:46.603104 | 1.055 ms   |\n|         \u2502       \u251c\u2500\u2500 optimize                              | 2024-03-20 15:07:46.604194 | 4.298 ms   |\n|         \u2502       \u2502   \u251c\u2500\u2500 inner_execute_read                | 2024-03-20 15:07:46.605959 | 0.825 ms   |\n|         \u2502       \u2502   \u2502   \u251c\u2500\u2500 sql_compile                   | 2024-03-20 15:07:46.606078 | 0.321 ms   |\n|         \u2502       \u2502   \u2502   \u2502   \u2514\u2500\u2500 pc_get_plan               | 2024-03-20 15:07:46.606124 | 0.147 ms   |\n|         \u2502       \u2502   \u2502   \u251c\u2500\u2500 open                          | 2024-03-20 15:07:46.606418 | 0.129 ms   |\n|         \u2502       \u2502   \u2502   \u2514\u2500\u2500 do_local_das_task             | 2024-03-20 15:07:46.606606 | 0.095 ms   |\n|         \u2502       \u2502   \u2514\u2500\u2500 close                             | 2024-03-20 15:07:46.606813 | 0.240 ms   |\n|         \u2502       \u2502       \u251c\u2500\u2500 close_das_task                | 2024-03-20 15:07:46.606879 | 0.022 ms   |\n|         \u2502       \u2502       \u2514\u2500\u2500 end_transaction               | 2024-03-20 15:07:46.607009 | 0.023 ms   |\n|         \u2502       \u251c\u2500\u2500 code_generate                         | 2024-03-20 15:07:46.608527 | 0.374 ms   |\n|         \u2502       \u2514\u2500\u2500 pc_add_plan                           | 2024-03-20 15:07:46.609375 | 0.207 ms   |\n|         \u2514\u2500\u2500 sql_execute                                   | 2024-03-20 15:07:46.609677 | 0.832 ms   |\n|             \u251c\u2500\u2500 open                                      | 2024-03-20 15:07:46.609684 | 0.156 ms   |\n|             \u251c\u2500\u2500 response_result                           | 2024-03-20 15:07:46.609875 | 0.327 ms   |\n|             \u2502   \u2514\u2500\u2500 do_local_das_task                     | 2024-03-20 15:07:46.609905 | 0.136 ms   |\n|             \u2514\u2500\u2500 close                                     | 2024-03-20 15:07:46.610221 | 0.225 ms   |\n|                 \u251c\u2500\u2500 close_das_task                        | 2024-03-20 15:07:46.610229 | 0.029 ms   |\n|                 \u2514\u2500\u2500 end_transaction                       | 2024-03-20 15:07:46.610410 | 0.019 ms   |\n+-----------------------------------------------------------+----------------------------+------------+\n29 rows in set\n"})}),"\n",(0,s.jsx)(n.p,{children:"The query result shows that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The execution of the SQL statement took a total of 191.999 ms."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ob_proxy_partition_location_lookup"})," operation took 181.839 ms, which was the time taken by ODP to search for the location of the leader of the ",(0,s.jsx)(n.code,{children:"t1"})," table. This operation took a long time because the ",(0,s.jsx)(n.code,{children:"t1"})," table was newly created and ODP had not cached its location information in the location. However, ODP will directly get the location information from the location cache upon next access to the table."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"com_query_process"})," operation on the OBServer node to which the SQL statement was forwarded took 8.824 ms."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Other important operations in the query result are described as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ob_proxy"}),": the operation that spans from when ODP receives an SQL request to when it returns a complete response to the client."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ob_proxy_server_process_req"}),": the operation that spans from when an SQL request is sent to when a response is first received from the OBServer node. The time taken by this operation equals the value of the processing time on the OBServer node plus the time consumed to transmit the request over the network."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"com_query_process"}),": the operation that spans from when the OBServer node receives an SQL request to when it forwards a response."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Execute the ",(0,s.jsx)(n.code,{children:"SELECT c1 FROM t1 LIMIT 2;"})," statement in the same session again, and then execute the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SHOW TRACE;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-----------------------------------------------+----------------------------+------------+\n| Operation                                     | StartTime                  | ElapseTime |\n+-----------------------------------------------+----------------------------+------------+\n| ob_proxy                                      | 2024-03-20 15:34:14.879559 | 7.390 ms   |\n| \u251c\u2500\u2500 ob_proxy_partition_location_lookup        | 2024-03-20 15:34:14.879652 | 4.691 ms   |\n| \u251c\u2500\u2500 ob_proxy_server_process_req               | 2024-03-20 15:34:14.884785 | 1.514 ms   |\n| \u2514\u2500\u2500 com_query_process                         | 2024-03-20 15:34:14.884943 | 1.237 ms   |\n|     \u2514\u2500\u2500 mpquery_single_stmt                   | 2024-03-20 15:34:14.884959 | 1.207 ms   |\n|         \u251c\u2500\u2500 sql_compile                       | 2024-03-20 15:34:14.884997 | 0.279 ms   |\n|         \u2502   \u2514\u2500\u2500 pc_get_plan                   | 2024-03-20 15:34:14.885042 | 0.071 ms   |\n|         \u2514\u2500\u2500 sql_execute                       | 2024-03-20 15:34:14.885300 | 0.809 ms   |\n|             \u251c\u2500\u2500 open                          | 2024-03-20 15:34:14.885310 | 0.139 ms   |\n|             \u251c\u2500\u2500 response_result               | 2024-03-20 15:34:14.885513 | 0.314 ms   |\n|             \u2502   \u2514\u2500\u2500 do_local_das_task         | 2024-03-20 15:34:14.885548 | 0.114 ms   |\n|             \u2514\u2500\u2500 close                         | 2024-03-20 15:34:14.885847 | 0.190 ms   |\n|                 \u251c\u2500\u2500 close_das_task            | 2024-03-20 15:34:14.885856 | 0.030 ms   |\n|                 \u2514\u2500\u2500 end_transaction           | 2024-03-20 15:34:14.885997 | 0.019 ms   |\n+-----------------------------------------------+----------------------------+------------+\n14 rows in set\n"})}),"\n",(0,s.jsx)(n.p,{children:"The query result shows that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The execution time of the SQL statement was shortened from 191.999 ms to 7.390 ms."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The time taken by ODP to search for routing information and forward the SQL statement was shortened from 181.839 ms to 4.691 ms. This is because ODP directly obtained the location information from the location cache."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The time taken by the ",(0,s.jsx)(n.code,{children:"com_query_process"})," operation on the OBServer node to which the SQL statement was forwarded was shortened from 8.824 ms to 1.237 ms. The execution of the preceding SQL statement was divided into two phases. In the compilation phase, the optimizer generated an execution plan. In the execution phase, the execution engine calculated results based on the execution plan. During the second execution, the time spent in the compilation phase was shortened. This is because an execution plan (",(0,s.jsx)(n.code,{children:"pc_get_plan"}),") has been generated and stored in the plan cache during the first execution and no plan needed to be generated again during the second execution. This way, the overhead of the ",(0,s.jsx)(n.code,{children:"hard_parse"})," operation to parse the SQL statement and generate a plan was eliminated."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Directly connect to the OBServer node to log in to OceanBase Database, execute the ",(0,s.jsx)(n.code,{children:"SELECT c1 FROM t1 LIMIT 2;"})," statement again, and then execute the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SHOW TRACE;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"+-------------------------------------------+----------------------------+------------+\n| Operation                                 | StartTime                  | ElapseTime |\n+-------------------------------------------+----------------------------+------------+\n| com_query_process                         | 2024-03-20 15:54:38.772699 | 1.746 ms   |\n| \u2514\u2500\u2500 mpquery_single_stmt                   | 2024-03-20 15:54:38.772771 | 1.647 ms   |\n|     \u251c\u2500\u2500 sql_compile                       | 2024-03-20 15:54:38.772835 | 0.356 ms   |\n|     \u2502   \u2514\u2500\u2500 pc_get_plan                   | 2024-03-20 15:54:38.772900 | 0.143 ms   |\n|     \u2514\u2500\u2500 sql_execute                       | 2024-03-20 15:54:38.773209 | 1.052 ms   |\n|         \u251c\u2500\u2500 open                          | 2024-03-20 15:54:38.773232 | 0.150 ms   |\n|         \u251c\u2500\u2500 response_result               | 2024-03-20 15:54:38.773413 | 0.421 ms   |\n|         \u2502   \u2514\u2500\u2500 do_local_das_task         | 2024-03-20 15:54:38.773479 | 0.192 ms   |\n|         \u2514\u2500\u2500 close                         | 2024-03-20 15:54:38.773857 | 0.379 ms   |\n|             \u251c\u2500\u2500 close_das_task            | 2024-03-20 15:54:38.773913 | 0.069 ms   |\n|             \u2514\u2500\u2500 end_transaction           | 2024-03-20 15:54:38.774139 | 0.058 ms   |\n+-------------------------------------------+----------------------------+------------+\n11 rows in set\n"})}),"\n",(0,s.jsx)(n.p,{children:"The query result shows that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The direct connection to the OBServer node eliminated ODP-related overheads."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The execution plan for the SQL statement was stored in the plan cache of the OBServer node. Therefore, hard parsing was not required in the compilation phase of the next execution."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)("font",{color:"red",children:"After the analysis, run the following command to disable session-level end-to-end tracing to avoid compromising the performance of subsequent SQL statements. "})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"set ob_enable_show_trace='off';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["For an SQL statement whose performance is not as expected, you can execute the ",(0,s.jsx)(n.code,{children:"SHOW TRACE"})," statement to check whether most of the time is spent in the ODP forwarding phase, plan generation phase, or execution phase. You can see details about the time spent in each phase and further analyze the slow operations."]}),"\n",(0,s.jsx)(n.p,{children:"If ODP forwarding is slow, check whether the network between ODP and the OBServer node fails or whether ODP has not cached location information."}),"\n",(0,s.jsxs)(n.p,{children:["If the execution is slow, check whether the index used in the execution plan is inappropriate and perform SQL tuning as needed. For more information, see the ",(0,s.jsx)(n.a,{href:"https://oceanbase.github.io/docs/user_manual/operation_and_maintenance/en-US/scenario_best_practices/chapter_03_htap/performance_tuning",children:"SQL performance diagnostics and tuning"})," topic of this tutorial."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},99451:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/001-2ba31d4fdfaf5ec8e15ff65f80f1107e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);