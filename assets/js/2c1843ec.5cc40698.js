"use strict";(self.webpackChunkmy_docs_website=self.webpackChunkmy_docs_website||[]).push([[7881],{66168:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>b,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var s=n(74848),c=n(28453);const t={slug:"troubleshoot",title:"Five Steps to Troubleshoot Process Crashes Based on Logs"},a=void 0,r={id:"blogs/tech/troubleshoot",title:"Five Steps to Troubleshoot Process Crashes Based on Logs",description:"About the author: Hu Chengqing, a database administrator (DBA) at Action Technology, specializes in fault analysis and performance optimization. For further discussion, subscribe to his blogs on Jianshu.",source:"@site/docs/blogs/tech/troubleshoot.md",sourceDirName:"blogs/tech",slug:"/blogs/tech/troubleshoot",permalink:"/docs/blogs/tech/troubleshoot",draft:!1,unlisted:!1,editUrl:"https://github.com/oceanbase/oceanbase.github.io/tree/main/docs/blogs/tech/troubleshoot.md",tags:[],version:"current",frontMatter:{slug:"troubleshoot",title:"Five Steps to Troubleshoot Process Crashes Based on Logs"},sidebar:"blogsSidebar",previous:{title:"Principles and Practices of Transaction Recovery in Distributed Databases",permalink:"/docs/blogs/tech/trans-recovery"},next:{title:"Why Truncated Tables Cannot Be Recycled in OceanBase Database V4.x?",permalink:"/docs/blogs/tech/truncated-table"}},i={},l=[{value:"Background",id:"background",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Find the crash logs",id:"1-find-the-crash-logs",level:3},{value:"2. Obtain the stack information of the crashed threads",id:"2-obtain-the-stack-information-of-the-crashed-threads",level:3},{value:"3. Locate the line of code where the crash occurs",id:"3-locate-the-line-of-code-where-the-crash-occurs",level:3},{value:"4. Analyze the code",id:"4-analyze-the-code",level:3},{value:"Purpose of the function",id:"purpose-of-the-function",level:4},{value:"5. Search the knowledge base",id:"5-search-the-knowledge-base",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const o={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.blockquote,{children:["\n",(0,s.jsxs)(o.p,{children:["About the author: Hu Chengqing, a database administrator (DBA) at Action Technology, specializes in fault analysis and performance optimization. For further discussion, subscribe to his blogs on ",(0,s.jsx)(o.a,{href:"https://www.jianshu.com/u/a95ec11f67a8",children:"Jianshu"}),".",(0,s.jsx)(o.br,{}),"\n","This article is original content from the open source community of Action Technology. Unauthorized use is prohibited. For reposts, please contact the editor and cite the source.",(0,s.jsx)(o.br,{}),"\n","It will take you about 5 minutes to read the following content."]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"background",children:"Background"}),"\n",(0,s.jsx)(o.p,{children:"The observer process crashes are hard to diagnose. They are typically caused by program bugs, corrupt files, bad disk sectors, or bad memory blocks."}),"\n",(0,s.jsx)(o.p,{children:"A core dump file is automatically configured during the cluster deployment to capture memory information in the event of process crashes. It contains a snapshot of the program status at failure and the stack information for all threads, which are useful in debugging and crash analysis."}),"\n",(0,s.jsxs)(o.p,{children:["Sometimes, the core dump file may fail to be generated. In such cases, we must obtain stack information from ",(0,s.jsx)(o.code,{children:"observer.log"})," to pinpoint the crash location in code and identify the cause. This method is what this article will discuss."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.em,{children:"This method applies to OceanBase Database of all versions as of the article's publication."})}),"\n",(0,s.jsx)(o.h2,{id:"procedure",children:"Procedure"}),"\n",(0,s.jsx)(o.h3,{id:"1-find-the-crash-logs",children:"1. Find the crash logs"}),"\n",(0,s.jsxs)(o.p,{children:["The observer process generates a section of logs similar to the following one upon a crash. You only need to search by the ",(0,s.jsx)(o.strong,{children:"CRASH ERROR"})," keywords."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"    CRASH ERROR!!! sig=11, sig_code=2, \\\n    sig_addr=7f3edd31dffb, timestamp=1725496052323606, \\\n    tid=57605, tname=TNT_L0_1002, \\\n    trace_id=20970917872454-1707004480400037, \\\n    extra_info=((null)), lbt=0x9baead8 \\\n    0x9b9f358 0x7f43d58e562f \\\n    0x7f43d52525fc 0x95eeda9 \\\n    0x95ec568 0x95e6c0c \\\n    0x95e4c33 0x9cbf4c7 \\\n    0x93be9ee 0x939e320 \\\n    0x93bd64e 0x939c105 \\\n    0x939c6e6 0x2cff1c1 \\\n    0x9918a74 0x9917461 0x9913f1e\n"})}),"\n",(0,s.jsx)(o.h3,{id:"2-obtain-the-stack-information-of-the-crashed-threads",children:"2. Obtain the stack information of the crashed threads"}),"\n",(0,s.jsx)(o.p,{children:"Parse memory addresses to get the stack information, where each memory address corresponds to one stack frame."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"    addr2line -pCfe /home/admin/oceanbase/bin/observer \\\n    0x9baead8 0x9b9f358 0x7f43d58e562f 0x7f43d52525fc \\\n    0x95eeda9 0x95ec568 0x95e6c0c 0x95e4c33 0x9cbf4c7 \\\n    0x93be9ee 0x939e320 0x93bd64e 0x939c105 0x939c6e6 \\\n    0x2cff1c1 0x9918a74 0x9917461 0x9913f1e\n"})}),"\n",(0,s.jsx)(o.p,{children:"The output is as follows:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Check the stack information from the top down, and ignore the first four lines, which are the fixed stack for processing crashes."}),"\n",(0,s.jsxs)(o.li,{children:["The crash occurs at line 5, in the ",(0,s.jsx)(o.code,{children:"ObMPStmtExecute::copy_or_convert_str"})," function."]}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"        safe_backtrace at ??:?\n        oceanbase::common::coredump_cb(int, siginfo_t*) at ??:?\n        ?? ??:0\n        ?? ??:0\n        oceanbase::observer::ObMPStmtExecute::copy_or_convert_str(oceanbase::common::ObIAllocator&, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, oceanbase::common::ObString const&, oceanbase::common::ObString&, long) at ??:?\n        oceanbase::observer::ObMPStmtExecute::parse_basic_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::common::ObObj&) at ??:?\n        oceanbase::observer::ObMPStmtExecute::parse_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::sql::TypeInfo*, oceanbase::sql::TypeInfo*, oceanbase::common::ObObjParam&, short) at ??:?\n        oceanbase::observer::ObMPStmtExecute::before_process() at ??:?\n        oceanbase::rpc::frame::ObReqProcessor::run() at ??:?\n        oceanbase::omt::ObWorkerProcessor::process_one(oceanbase::rpc::ObRequest&, int&) at ??:?\n        oceanbase::omt::ObWorkerProcessor::process(oceanbase::rpc::ObRequest&) at ??:?\n        oceanbase::omt::ObThWorker::process_request(oceanbase::rpc::ObRequest&) at ??:?\n        oceanbase::omt::ObThWorker::worker(long&, long&, int&) at ??:?\n        non-virtual thunk to oceanbase::omt::ObThWorker::run(long) at ??:?\n        oceanbase::lib::CoKThreadTemp<oceanbase::lib::CoUserThreadTemp<oceanbase::lib::CoSetSched> >::start()::{lambda()#1}::operator()() const at ??:?\n        oceanbase::lib::CoSetSched::Worker::run() at ??:?\n        oceanbase::lib::CoRoutine::__start(boost::context::detail::transfer_t) at ??:?\n        trampoline at safe_snprintf.c:?\n"})}),"\n",(0,s.jsx)(o.h3,{id:"3-locate-the-line-of-code-where-the-crash-occurs",children:"3. Locate the line of code where the crash occurs"}),"\n",(0,s.jsxs)(o.p,{children:["To locate the last line of code executed within the ",(0,s.jsx)(o.code,{children:"ObMPStmtExecute::copy_or_convert_str"})," function, use GNU Debugger (GDB) 9.0 or later on the debug version to parse the memory addresses."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"    ## Download the debug package of the corresponding version. If you are using an enterprise version, contact OceanBase Technical Support.\n    https://mirrors.aliyun.com/oceanbase/community/stable/el/7/x86_64/\n    \n    ## Install the debug package.\n    rpm2cpio oceanbase-ce-debuginfo-3.1.5-100010012023060910.el7.x86_64.rpm |cpio -div\n    \n    ## Use GDB to open the binary file.\n    gdb ./usr/lib/debug/home/admin/oceanbase/bin/observer.debug\n    \n    ## Parse the memory addresses.\n    (gdb) list *0x95eeda9\n    0x95eeda9 is in oceanbase::observer::ObMPStmtExecute::copy_or_convert_str(oceanbase::common::ObIAllocator&, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, oceanbase::common::ObString const&, oceanbase::common::ObString&, long) (./src/observer/mysql/obmp_stmt_execute.cpp:1428).\n    (gdb) list *0x95ec568\n    0x95ec568 is in oceanbase::observer::ObMPStmtExecute::parse_basic_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::common::ObObj&) (./src/observer/mysql/obmp_stmt_execute.cpp:1237).\n    (gdb) list *0x95e6c0c\n    0x95e6c0c is in oceanbase::observer::ObMPStmtExecute::parse_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::sql::TypeInfo*, oceanbase::sql::TypeInfo*, oceanbase::common::ObObjParam&, short) (./src/observer/mysql/obmp_stmt_execute.cpp:1372).\n    (gdb) list *0x95e4c33\n    0x95e4c33 is in oceanbase::observer::ObMPStmtExecute::before_process() (./src/observer/mysql/obmp_stmt_execute.cpp:512).\n    507    in ./src/observer/mysql/obmp_stmt_execute.cpp\n"})}),"\n",(0,s.jsx)(o.p,{children:"Additional information:"}),"\n",(0,s.jsx)(o.p,{children:"The call stack in this case is as follows:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"    ...\n    ->ObMPStmtExecute::before_process() \n    --\x3eObMPStmtExecute::parse_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::sql::TypeInfo*, oceanbase::sql::TypeInfo*, oceanbase::common::ObObjParam&, short)\n    ---\x3eObMPStmtExecute::parse_basic_param_value(oceanbase::common::ObIAllocator&, unsigned int, oceanbase::common::ObCharsetType, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, char const*&, oceanbase::common::ObTimeZoneInfo const*, oceanbase::common::ObObj&)\n    ----\x3eObMPStmtExecute::copy_or_convert_str(oceanbase::common::ObIAllocator&, oceanbase::common::ObCollationType, oceanbase::common::ObCollationType, oceanbase::common::ObString const&, oceanbase::common::ObString&, long) \n"})}),"\n",(0,s.jsx)(o.h3,{id:"4-analyze-the-code",children:"4. Analyze the code"}),"\n",(0,s.jsxs)(o.p,{children:["The crash occurs within the ",(0,s.jsx)(o.code,{children:"ObMPStmtExecute::copy_or_convert_str"})," function at ",(0,s.jsx)(o.strong,{children:"obmp_stmt_execute.cpp:1428"}),"."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.img,{src:"http://action-weikai.oss-accelerate.aliyuncs.com/20241022/filename.png",alt:"Line 1428"})}),"\n",(0,s.jsx)(o.h4,{id:"purpose-of-the-function",children:"Purpose of the function"}),"\n",(0,s.jsxs)(o.p,{children:["The ",(0,s.jsx)(o.code,{children:"ObMPStmtExecute::copy_or_convert_str"})," function copies or converts the string specified by ",(0,s.jsx)(o.code,{children:"src"}),", a request parameter from the statement protocol, based on the specified character set, and stores the result in ",(0,s.jsx)(o.code,{children:"out"}),". ",(0,s.jsx)(o.code,{children:"sig=11"})," in the crash information refers to signal 11, which indicates that the program accessed an invalid memory address. This is usually because a null pointer is used or the accessed memory is already released."]}),"\n",(0,s.jsxs)(o.p,{children:["The crash occurs at ",(0,s.jsx)(o.code,{children:"MEMCPY(buf + extra_buf_len, src.ptr(), src.length());"}),", where the ",(0,s.jsx)(o.code,{children:"MEMCPY"})," function copies the source string to the allocated memory."]}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"buf + extra_buf_len"}),": the target address, which is the offset of the buffer pointer ",(0,s.jsx)(o.code,{children:"buf"})," plus ",(0,s.jsx)(o.code,{children:"extra_buf_len"})]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"src.ptr()"}),": the pointer to the source string"]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"src.length()"}),": the length of the source string, which specifies the number of bytes to be copied"]}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["Here, we can conclude that ",(0,s.jsx)(o.code,{children:"src.ptr()"})," is a null pointer. If a core dump file is available, all you need to do for confirmation is to print the pointer variable by using GDB."]}),"\n",(0,s.jsx)(o.h3,{id:"5-search-the-knowledge-base",children:"5. Search the knowledge base"}),"\n",(0,s.jsxs)(o.p,{children:["Search the official knowledge base by the name of the crashed function, which is ",(0,s.jsx)(o.strong,{children:"copy_or_convert_str"})," in this case and find the corresponding ",(0,s.jsx)(o.a,{href:"https://www.oceanbase.com/knowledge-base/oceanbase-database-1000000000430545?back=kb",children:"bug"}),"."]}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsxs)(o.em,{children:["The code snippet where the crash occurs matches the bug description: When the ",(0,s.jsx)(o.code,{children:"execute"})," protocol is processed, the ",(0,s.jsx)(o.code,{children:"send long data"})," protocol has not finished handling ",(0,s.jsx)(o.code,{children:"param_data"}),", causing the ",(0,s.jsx)(o.code,{children:"execute"})," protocol to read a null pointer during the conversion of ",(0,s.jsx)(o.code,{children:"param_data"})," and triggering a crash."]})}),"\n",(0,s.jsx)(o.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(o.p,{children:"In most cases, you can analyze logs by following the preceding five steps to quickly identify the cause of an observer process crash. I hope you find this article useful."})]})}function b(e={}){const{wrapper:o}={...(0,c.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>r});var s=n(96540);const c={},t=s.createContext(c);function a(e){const o=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(t.Provider,{value:o},e.children)}}}]);